5ff902f4ce8193221c2ba85c0052c0cd
Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Volumes/Work/ReactNative/stint-mobile-app-dev/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js';

var _react = require('react');var _react2 = babelHelpers.interopRequireDefault(_react);
var _propTypes = require('prop-types');var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);
var _reactNative = require('react-native');var _reactNative2 = babelHelpers.interopRequireDefault(_reactNative);

var _reactNativeIphoneXHelper = require('react-native-iphone-x-helper');

var _KAM_DEFAULT_TAB_BAR_HEIGHT = (0, _reactNativeIphoneXHelper.isIphoneX)() ? 83 : 49;
var _KAM_KEYBOARD_OPENING_TIME = 250;
var _KAM_EXTRA_HEIGHT = 75;

function listenToKeyboardEvents(ScrollableComponent) {
  var _class, _temp, _initialiseProps;
  return _temp = _class = function (_React$Component) {
    babelHelpers.inherits(_class, _React$Component);

    function _class(props) {
      babelHelpers.classCallCheck(this, _class);var _this = babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));_initialiseProps.call(_this);
      _this.keyboardWillShowEvent = undefined;
      _this.keyboardWillHideEvent = undefined;
      _this.position = { x: 0, y: 0 };
      _this.defaultResetScrollToCoords = null;
      var keyboardSpace = props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;
      _this.state = { keyboardSpace: keyboardSpace };return _this;
    }babelHelpers.createClass(_class, [{ key: 'componentDidMount', value: function componentDidMount() {
        this.mountedComponent = true;

        if (_reactNative.Platform.OS === 'ios') {
          this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardWillShow', this._updateKeyboardSpace);

          this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardWillHide', this._resetKeyboardSpace);
        } else if (_reactNative.Platform.OS === 'android' && this.props.enableOnAndroid) {
          this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardDidShow', this._updateKeyboardSpace);

          this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardDidHide', this._resetKeyboardSpace);
        }
      } }, { key: 'componentWillReceiveProps', value: function componentWillReceiveProps(nextProps) {
        if (nextProps.viewIsInsideTabBar !== this.props.viewIsInsideTabBar) {
          var _keyboardSpace = nextProps.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;
          if (this.state.keyboardSpace !== _keyboardSpace) {
            this.setState({ keyboardSpace: _keyboardSpace });
          }
        }
      } }, { key: 'componentWillUnmount', value: function componentWillUnmount() {
        this.mountedComponent = false;
        this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();
        this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();
      } }, { key: 'render', value: function render() {
        var _props = this.props,
            enableOnAndroid = _props.enableOnAndroid,
            contentContainerStyle = _props.contentContainerStyle;
        var newContentContainerStyle = void 0;
        if (_reactNative.Platform.OS === 'android' && enableOnAndroid) {
          newContentContainerStyle = [].concat(contentContainerStyle).concat({
            paddingBottom: ((contentContainerStyle || {}).paddingBottom || 0) + this.state.keyboardSpace });
        }
        return _react2.default.createElement(ScrollableComponent, babelHelpers.extends({
          ref: this._handleRef,
          keyboardDismissMode: 'interactive',
          contentInset: { bottom: this.state.keyboardSpace },
          automaticallyAdjustContentInsets: false,
          showsVerticalScrollIndicator: true,
          scrollEventThrottle: 1 }, this.props, {
          contentContainerStyle: newContentContainerStyle || contentContainerStyle,

          keyboardSpace: this.state.keyboardSpace,
          getScrollResponder: this.getScrollResponder,
          scrollToPosition: this.scrollToPosition,
          scrollToEnd: this.scrollToEnd,
          scrollForExtraHeightOnAndroid: this.scrollForExtraHeightOnAndroid,
          scrollToFocusedInput: this.scrollToFocusedInput,
          resetKeyboardSpace: this._resetKeyboardSpace,
          handleOnScroll: this._handleOnScroll,
          onScroll: this._onScroll, __source: { fileName: _jsxFileName, lineNumber: 397 } }));
      } }]);return _class;
  }(_react2.default.Component), _class.propTypes = { viewIsInsideTabBar: _propTypes2.default.bool, resetScrollToCoords: _propTypes2.default.shape({ x: _propTypes2.default.number.isRequired, y: _propTypes2.default.number.isRequired }), enableResetScrollToCoords: _propTypes2.default.bool, enableAutomaticScroll: _propTypes2.default.bool, extraHeight: _propTypes2.default.number, extraScrollHeight: _propTypes2.default.number, keyboardOpeningTime: _propTypes2.default.number, onScroll: _propTypes2.default.func, contentContainerStyle: _propTypes2.default.any, enableOnAndroid: _propTypes2.default.bool, innerRef: _propTypes2.default.func }, _class.defaultProps = { enableAutomaticScroll: true, extraHeight: _KAM_EXTRA_HEIGHT, extraScrollHeight: 0, enableResetScrollToCoords: true, keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME, viewIsInsideTabBar: false }, _initialiseProps = function _initialiseProps() {
    var _this2 = this;this.getScrollResponder = function () {
      return _this2._rnkasv_keyboardView && _this2._rnkasv_keyboardView.getScrollResponder();
    };this.scrollToPosition = function (x, y) {
      var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;var responder = _this2.getScrollResponder();responder && responder.scrollResponderScrollTo({ x: x, y: y, animated: animated });
    };this.scrollToEnd = function () {
      var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;var responder = _this2.getScrollResponder();responder && responder.scrollResponderScrollToEnd({ animated: animated });
    };this.scrollForExtraHeightOnAndroid = function (extraHeight) {
      _this2.scrollToPosition(0, _this2.position.y + extraHeight, true);
    };this.scrollToFocusedInput = function (reactNode, extraHeight, keyboardOpeningTime) {
      if (extraHeight === undefined) {
        extraHeight = _this2.props.extraHeight || 0;
      }if (keyboardOpeningTime === undefined) {
        keyboardOpeningTime = _this2.props.keyboardOpeningTime || 0;
      }setTimeout(function () {
        if (!_this2.mountedComponent) {
          return;
        }var responder = _this2.getScrollResponder();responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);
      }, keyboardOpeningTime);
    };this.scrollIntoView = function _callee(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var _ref, _ref2, parentLayout, childLayout, getScrollPosition, _getScrollPosition, x, y, animated;return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {case 0:
              if (!(!_this2._rnkasv_keyboardView || !element)) {
                _context.next = 2;break;
              }return _context.abrupt('return');case 2:
              _context.next = 4;return regeneratorRuntime.awrap(Promise.all([_this2._measureElement(_this2._rnkasv_keyboardView), _this2._measureElement(element)]));case 4:
              _ref = _context.sent;_ref2 = babelHelpers.slicedToArray(_ref, 2);parentLayout = _ref2[0];childLayout = _ref2[1];getScrollPosition = options.getScrollPosition || _this2._defaultGetScrollPosition;_getScrollPosition = getScrollPosition(parentLayout, childLayout, _this2.position), x = _getScrollPosition.x, y = _getScrollPosition.y, animated = _getScrollPosition.animated;_this2.scrollToPosition(x, y, animated);case 11:case 'end':
              return _context.stop();}
        }
      }, null, _this2);
    };this._defaultGetScrollPosition = function (parentLayout, childLayout, contentOffset) {
      return { x: 0, y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y), animated: true };
    };this._measureElement = function (element) {
      var node = (0, _reactNative.findNodeHandle)(element);return new Promise(function (resolve) {
        _reactNative.UIManager.measureInWindow(node, function (x, y, width, height) {
          resolve({ x: x, y: y, width: width, height: height });
        });
      });
    };this._updateKeyboardSpace = function (frames) {
      if (_this2.props.enableAutomaticScroll) {
        var _keyboardSpace2 = frames.endCoordinates.height + _this2.props.extraScrollHeight;if (_this2.props.viewIsInsideTabBar) {
          _keyboardSpace2 -= _KAM_DEFAULT_TAB_BAR_HEIGHT;
        }_this2.setState({ keyboardSpace: _keyboardSpace2 });var currentlyFocusedField = _reactNative.TextInput.State.currentlyFocusedField();var responder = _this2.getScrollResponder();if (!currentlyFocusedField || !responder) {
          return;
        }_reactNative.UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {
          if (isAncestor) {
            _reactNative.UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {
              var textInputBottomPosition = y + height;var keyboardPosition = frames.endCoordinates.screenY;var totalExtraHeight = _this2.props.extraScrollHeight + _this2.props.extraHeight;if (_reactNative.Platform.OS === 'ios') {
                if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {
                  _this2._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);
                }
              } else {
                if (textInputBottomPosition > keyboardPosition) {
                  _keyboardSpace2 = _keyboardSpace2 - (textInputBottomPosition - keyboardPosition);_this2.setState({ keyboardSpace: _keyboardSpace2 });_this2.scrollForExtraHeightOnAndroid(totalExtraHeight);
                } else if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {
                  _this2.scrollForExtraHeightOnAndroid(totalExtraHeight - (keyboardPosition - textInputBottomPosition));
                }
              }
            });
          }
        });
      }if (!_this2.resetCoords) {
        if (!_this2.defaultResetScrollToCoords) {
          _this2.defaultResetScrollToCoords = _this2.position;
        }
      }
    };this._resetKeyboardSpace = function () {
      var keyboardSpace = _this2.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT + _this2.props.extraScrollHeight || 0 : _this2.props.extraScrollHeight || 0;_this2.setState({ keyboardSpace: keyboardSpace });if (_this2.props.enableResetScrollToCoords === false) {
        _this2.defaultResetScrollToCoords = null;return;
      } else if (_this2.resetCoords) {
        _this2.scrollToPosition(_this2.resetCoords.x, _this2.resetCoords.y, true);
      } else {
        if (_this2.defaultResetScrollToCoords) {
          _this2.scrollToPosition(_this2.defaultResetScrollToCoords.x, _this2.defaultResetScrollToCoords.y, true);_this2.defaultResetScrollToCoords = null;
        } else {
          _this2.scrollToPosition(0, 0, true);
        }
      }
    };this._scrollToFocusedInputWithNodeHandle = function (nodeID, extraHeight, keyboardOpeningTime) {
      if (extraHeight === undefined) {
        extraHeight = _this2.props.extraHeight;
      }var reactNode = _reactNative2.default.findNodeHandle(nodeID);_this2.scrollToFocusedInput(reactNode, extraHeight + _this2.props.extraScrollHeight, keyboardOpeningTime !== undefined ? keyboardOpeningTime : _this2.props.keyboardOpeningTime || 0);
    };this._handleOnScroll = function (e) {
      _this2.position = e.nativeEvent.contentOffset;
    };this._handleRef = function (ref) {
      _this2._rnkasv_keyboardView = ref;if (_this2.props.innerRef) {
        _this2.props.innerRef(_this2._rnkasv_keyboardView);
      }
    };this._onScroll = function (e) {
      _this2._handleOnScroll(e);_this2.props.onScroll && _this2.props.onScroll(e);
    };
  }, _temp;
}exports.default = listenToKeyboardEvents;