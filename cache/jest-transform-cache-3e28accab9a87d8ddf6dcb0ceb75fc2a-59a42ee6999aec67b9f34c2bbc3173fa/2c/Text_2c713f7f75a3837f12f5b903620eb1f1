f9364343be51843c25b51ddbfc3f14e1


'use strict';
var _jsxFileName = '/Volumes/Work/ReactNative/stint-mobile-app-dev/node_modules/react-native/Libraries/Text/Text.js';

var viewConfig = {
  validAttributes: require('mergeFast')(require('ReactNativeViewAttributes').UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true }),

  uiViewClassName: 'RCTText' };

var Text = require('create-react-class')({
  displayName: 'Text',
  propTypes: require('TextPropTypes'),
  getDefaultProps: function getDefaultProps() {
    return {
      accessible: true,
      allowFontScaling: true,
      ellipsizeMode: 'tail' };
  },
  getInitialState: function getInitialState() {
    return require('mergeFast')(require('Touchable').Mixin.touchableGetInitialState(), {
      isHighlighted: false });
  },
  mixins: [require('NativeMethodsMixin')],
  viewConfig: viewConfig,
  getChildContext: function getChildContext() {
    return {
      isInAParentText: true };
  },
  childContextTypes: require('ViewContext').ViewContextTypes,
  contextTypes: require('ViewContext').ViewContextTypes,

  _handlers: null,
  _hasPressHandler: function _hasPressHandler() {
    return !!this.props.onPress || !!this.props.onLongPress;
  },

  touchableHandleActivePressIn: null,
  touchableHandleActivePressOut: null,
  touchableHandlePress: null,
  touchableHandleLongPress: null,
  touchableGetPressRectOffset: null,
  render: function render() {
    var _this = this;
    var newProps = this.props;
    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
      if (!this._handlers) {
        this._handlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();
            var setResponder = shouldSetFromProps || _this._hasPressHandler();
            if (setResponder && !_this.touchableHandleActivePressIn) {

              for (var key in require('Touchable').Mixin) {
                if (typeof require('Touchable').Mixin[key] === 'function') {
                  _this[key] = require('Touchable').Mixin[key].bind(_this);
                }
              }
              _this.touchableHandleActivePressIn = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: true });
              };

              _this.touchableHandleActivePressOut = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: false });
              };

              _this.touchableHandlePress = function (e) {
                _this.props.onPress && _this.props.onPress(e);
              };

              _this.touchableHandleLongPress = function (e) {
                _this.props.onLongPress && _this.props.onLongPress(e);
              };

              _this.touchableGetPressRectOffset = function () {
                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
              };
            }
            return setResponder;
          },
          onResponderGrant: function (e, dispatchID) {
            this.touchableHandleResponderGrant(e, dispatchID);
            this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
          }.bind(this),
          onResponderMove: function (e) {
            this.touchableHandleResponderMove(e);
            this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
          }.bind(this),
          onResponderRelease: function (e) {
            this.touchableHandleResponderRelease(e);
            this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
          }.bind(this),
          onResponderTerminate: function (e) {
            this.touchableHandleResponderTerminate(e);
            this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
          }.bind(this),
          onResponderTerminationRequest: function () {

            var allowTermination = this.touchableHandleResponderTerminationRequest();
            if (allowTermination && this.props.onResponderTerminationRequest) {
              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
            }
            return allowTermination;
          }.bind(this) };
      }
      newProps = babelHelpers.extends({}, this.props, this._handlers, {
        isHighlighted: this.state.isHighlighted });
    }
    if (newProps.selectionColor != null) {
      newProps = babelHelpers.extends({}, newProps, {
        selectionColor: require('processColor')(newProps.selectionColor) });
    }
    if (require('Touchable').TOUCH_TARGET_DEBUG && newProps.onPress) {
      newProps = babelHelpers.extends({}, newProps, {
        style: [this.props.style, { color: 'magenta' }] });
    }
    if (this.context.isInAParentText) {
      return require('React').createElement(RCTVirtualText, babelHelpers.extends({}, newProps, { __source: { fileName: _jsxFileName, lineNumber: 200 } }));
    } else {
      return require('React').createElement(RCTText, babelHelpers.extends({}, newProps, { __source: { fileName: _jsxFileName, lineNumber: 202 } }));
    }
  } });

var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var RCTText = require('createReactNativeComponentClass')(viewConfig.uiViewClassName, function () {
  return viewConfig;
});

var RCTVirtualText = RCTText;

if (require('UIManager').RCTVirtualText) {
  RCTVirtualText = require('createReactNativeComponentClass')('RCTVirtualText', function () {
    return {
      validAttributes: require('mergeFast')(require('ReactNativeViewAttributes').UIView, {
        isHighlighted: true }),

      uiViewClassName: 'RCTVirtualText' };
  });
}

module.exports = Text;