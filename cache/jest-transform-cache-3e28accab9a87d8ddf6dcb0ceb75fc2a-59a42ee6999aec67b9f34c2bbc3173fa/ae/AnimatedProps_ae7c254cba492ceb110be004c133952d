837c50ff320faac242cc5dd805a3ab88


'use strict';
var AnimatedProps = function (_AnimatedNode) {
  babelHelpers.inherits(AnimatedProps, _AnimatedNode);

  function AnimatedProps(props, callback) {
    babelHelpers.classCallCheck(this, AnimatedProps);var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

    if (props.style) {
      props = babelHelpers.extends({}, props, {
        style: new (require('./AnimatedStyle'))(props.style) });
    }
    _this._props = props;
    _this._callback = callback;
    _this.__attach();return _this;
  }babelHelpers.createClass(AnimatedProps, [{ key: '__getValue', value: function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          if (!value.__isNative || value instanceof require('./AnimatedStyle')) {

            props[key] = value.__getValue();
          }
        } else if (value instanceof require('../AnimatedEvent').AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    } }, { key: '__getAnimatedValue', value: function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    } }, { key: '__attach', value: function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          value.__addChild(this);
        }
      }
    } }, { key: '__detach', value: function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          value.__removeChild(this);
        }
      }
      babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), '__detach', this).call(this);
    } }, { key: 'update', value: function update() {
      this._callback();
    } }, { key: '__makeNative', value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof require('./AnimatedNode')) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    } }, { key: 'setNativeView', value: function setNativeView(animatedView) {
      if (this._animatedView === animatedView) {
        return;
      }
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    } }, { key: '__connectAnimatedView', value: function __connectAnimatedView() {
      require('fbjs/lib/invariant')(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = require('ReactNative').findNodeHandle(this._animatedView);

      require('fbjs/lib/invariant')(nativeViewTag != null, 'Unable to locate attached view in the native tree');

      require('../NativeAnimatedHelper').API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    } }, { key: '__disconnectAnimatedView', value: function __disconnectAnimatedView() {
      require('fbjs/lib/invariant')(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = require('ReactNative').findNodeHandle(this._animatedView);

      require('fbjs/lib/invariant')(nativeViewTag != null, 'Unable to locate attached view in the native tree');

      require('../NativeAnimatedHelper').API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    } }, { key: '__getNativeConfig', value: function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof require('./AnimatedNode')) {
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig };
    } }]);return AnimatedProps;
}(require('./AnimatedNode'));

module.exports = AnimatedProps;