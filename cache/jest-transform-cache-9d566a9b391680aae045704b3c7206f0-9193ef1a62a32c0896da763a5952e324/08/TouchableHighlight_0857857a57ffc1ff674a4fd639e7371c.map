{"version":3,"sources":["TouchableHighlight.js"],"names":["ColorPropType","require","NativeMethodsMixin","PropTypes","Platform","React","ReactNativeViewAttributes","StyleSheet","Touchable","TouchableWithoutFeedback","View","ViewPropTypes","createReactClass","ensurePositiveDelayProps","DEFAULT_PROPS","activeOpacity","delayPressOut","underlayColor","PRESS_RETENTION_OFFSET","top","left","right","bottom","TouchableHighlight","displayName","propTypes","number","style","onShowUnderlay","func","onHideUnderlay","hasTVPreferredFocus","bool","tvParallaxProperties","object","testOnly_pressed","mixins","Mixin","getDefaultProps","getInitialState","_isMounted","props","touchableGetInitialState","extraChildStyle","opacity","extraUnderlayStyle","backgroundColor","componentDidMount","componentWillUnmount","clearTimeout","_hideTimeout","UNSAFE_componentWillReceiveProps","nextProps","viewConfig","uiViewClassName","validAttributes","RCTView","touchableHandleActivePressIn","e","_showUnderlay","onPressIn","touchableHandleActivePressOut","_hideUnderlay","onPressOut","touchableHandlePress","isTV","setTimeout","onPress","touchableHandleLongPress","onLongPress","touchableGetPressRectOffset","pressRetentionOffset","touchableGetHitSlop","hitSlop","touchableGetHighlightDelayMS","delayPressIn","touchableGetLongPressDelayMS","delayLongPress","touchableGetPressOutDelayMS","_hasPressHandler","setState","render","child","Children","only","children","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityStates","compose","state","onLayout","touchableHandleStartShouldSetResponder","touchableHandleResponderTerminationRequest","touchableHandleResponderGrant","touchableHandleResponderMove","touchableHandleResponderRelease","touchableHandleResponderTerminate","nativeID","testID","cloneElement","renderDebugView","color","module","exports"],"mappings":"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","file":"TouchableHighlight.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst PropTypes = require('prop-types');\nconst Platform = require('Platform');\nconst React = require('React');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst StyleSheet = require('StyleSheet');\nconst Touchable = require('Touchable');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst ensurePositiveDelayProps = require('ensurePositiveDelayProps');\n\nimport type {PressEvent} from 'CoreEventTypes';\nimport type {Props as TouchableWithoutFeedbackProps} from 'TouchableWithoutFeedback';\nimport type {ViewStyleProp} from 'StyleSheet';\nimport type {ColorValue} from 'StyleSheetTypes';\n\nconst DEFAULT_PROPS = {\n  activeOpacity: 0.85,\n  delayPressOut: 100,\n  underlayColor: 'black',\n};\n\nconst PRESS_RETENTION_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\ntype IOSProps = $ReadOnly<{|\n  hasTVPreferredFocus?: ?boolean,\n  tvParallaxProperties?: ?Object,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...TouchableWithoutFeedbackProps,\n  ...IOSProps,\n\n  activeOpacity?: ?number,\n  underlayColor?: ?ColorValue,\n  style?: ?ViewStyleProp,\n  onShowUnderlay?: ?Function,\n  onHideUnderlay?: ?Function,\n  testOnly_pressed?: ?boolean,\n|}>;\n\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, which allows\n * the underlay color to show through, darkening or tinting the view.\n *\n * The underlay comes from wrapping the child in a new View, which can affect\n * layout, and sometimes cause unwanted visual artifacts if not used correctly,\n * for example if the backgroundColor of the wrapped view isn't explicitly set\n * to an opaque color.\n *\n * TouchableHighlight must have one child (not zero or more than one).\n * If you wish to have several child components, wrap them in a View.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableHighlight onPress={this._onPressButton}>\n *       <Image\n *         style={styles.button}\n *         source={require('./myButton.png')}\n *       />\n *     </TouchableHighlight>\n *   );\n * },\n * ```\n *\n *\n * ### Example\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react'\n * import {\n *   AppRegistry,\n *   StyleSheet,\n *   TouchableHighlight,\n *   Text,\n *   View,\n * } from 'react-native'\n *\n * class App extends Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = { count: 0 }\n *   }\n *\n *   onPress = () => {\n *     this.setState({\n *       count: this.state.count+1\n *     })\n *   }\n *\n *  render() {\n *     return (\n *       <View style={styles.container}>\n *         <TouchableHighlight\n *          style={styles.button}\n *          onPress={this.onPress}\n *         >\n *          <Text> Touch Here </Text>\n *         </TouchableHighlight>\n *         <View style={[styles.countContainer]}>\n *           <Text style={[styles.countText]}>\n *             { this.state.count !== 0 ? this.state.count: null}\n *           </Text>\n *         </View>\n *       </View>\n *     )\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'center',\n *     paddingHorizontal: 10\n *   },\n *   button: {\n *     alignItems: 'center',\n *     backgroundColor: '#DDDDDD',\n *     padding: 10\n *   },\n *   countContainer: {\n *     alignItems: 'center',\n *     padding: 10\n *   },\n *   countText: {\n *     color: '#FF00FF'\n *   }\n * })\n *\n * AppRegistry.registerComponent('App', () => App)\n * ```\n *\n */\n\nconst TouchableHighlight = ((createReactClass({\n  displayName: 'TouchableHighlight',\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n    /**\n     * Determines what the opacity of the wrapped view should be when touch is\n     * active.\n     */\n    activeOpacity: PropTypes.number,\n    /**\n     * The color of the underlay that will show through when the touch is\n     * active.\n     */\n    underlayColor: ColorPropType,\n    /**\n     * Style to apply to the container/underlay. Most commonly used to make sure\n     * rounded corners match the wrapped component.\n     */\n    style: ViewPropTypes.style,\n    /**\n     * Called immediately after the underlay is shown\n     */\n    onShowUnderlay: PropTypes.func,\n    /**\n     * Called immediately after the underlay is hidden\n     */\n    onHideUnderlay: PropTypes.func,\n    /**\n     * *(Apple TV only)* TV preferred focus (see documentation for the View component).\n     *\n     * @platform ios\n     */\n    hasTVPreferredFocus: PropTypes.bool,\n    /**\n     * *(Apple TV only)* Object with properties to control Apple TV parallax effects.\n     *\n     * enabled: If true, parallax effects are enabled.  Defaults to true.\n     * shiftDistanceX: Defaults to 2.0.\n     * shiftDistanceY: Defaults to 2.0.\n     * tiltAngle: Defaults to 0.05.\n     * magnification: Defaults to 1.0.\n     * pressMagnification: Defaults to 1.0.\n     * pressDuration: Defaults to 0.3.\n     * pressDelay: Defaults to 0.0.\n     *\n     * @platform ios\n     */\n    tvParallaxProperties: PropTypes.object,\n    /**\n     * Handy for snapshot tests.\n     */\n    testOnly_pressed: PropTypes.bool,\n  },\n\n  mixins: [NativeMethodsMixin, Touchable.Mixin],\n\n  getDefaultProps: () => DEFAULT_PROPS,\n\n  getInitialState: function() {\n    this._isMounted = false;\n    if (this.props.testOnly_pressed) {\n      return {\n        ...this.touchableGetInitialState(),\n        extraChildStyle: {\n          opacity: this.props.activeOpacity,\n        },\n        extraUnderlayStyle: {\n          backgroundColor: this.props.underlayColor,\n        },\n      };\n    } else {\n      return {\n        ...this.touchableGetInitialState(),\n        extraChildStyle: null,\n        extraUnderlayStyle: null,\n      };\n    }\n  },\n\n  componentDidMount: function() {\n    this._isMounted = true;\n    ensurePositiveDelayProps(this.props);\n  },\n\n  componentWillUnmount: function() {\n    this._isMounted = false;\n    clearTimeout(this._hideTimeout);\n  },\n\n  UNSAFE_componentWillReceiveProps: function(nextProps) {\n    ensurePositiveDelayProps(nextProps);\n  },\n\n  viewConfig: {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView,\n  },\n\n  /**\n   * `Touchable.Mixin` self callbacks. The mixin will invoke these if they are\n   * defined on your component.\n   */\n  touchableHandleActivePressIn: function(e: PressEvent) {\n    clearTimeout(this._hideTimeout);\n    this._hideTimeout = null;\n    this._showUnderlay();\n    this.props.onPressIn && this.props.onPressIn(e);\n  },\n\n  touchableHandleActivePressOut: function(e: PressEvent) {\n    if (!this._hideTimeout) {\n      this._hideUnderlay();\n    }\n    this.props.onPressOut && this.props.onPressOut(e);\n  },\n\n  touchableHandlePress: function(e: PressEvent) {\n    clearTimeout(this._hideTimeout);\n    if (!Platform.isTV) {\n      this._showUnderlay();\n      this._hideTimeout = setTimeout(\n        this._hideUnderlay,\n        this.props.delayPressOut,\n      );\n    }\n    this.props.onPress && this.props.onPress(e);\n  },\n\n  touchableHandleLongPress: function(e: PressEvent) {\n    this.props.onLongPress && this.props.onLongPress(e);\n  },\n\n  touchableGetPressRectOffset: function() {\n    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;\n  },\n\n  touchableGetHitSlop: function() {\n    return this.props.hitSlop;\n  },\n\n  touchableGetHighlightDelayMS: function() {\n    return this.props.delayPressIn;\n  },\n\n  touchableGetLongPressDelayMS: function() {\n    return this.props.delayLongPress;\n  },\n\n  touchableGetPressOutDelayMS: function() {\n    return this.props.delayPressOut;\n  },\n\n  _showUnderlay: function() {\n    if (!this._isMounted || !this._hasPressHandler()) {\n      return;\n    }\n    this.setState({\n      extraChildStyle: {\n        opacity: this.props.activeOpacity,\n      },\n      extraUnderlayStyle: {\n        backgroundColor: this.props.underlayColor,\n      },\n    });\n    this.props.onShowUnderlay && this.props.onShowUnderlay();\n  },\n\n  _hideUnderlay: function() {\n    clearTimeout(this._hideTimeout);\n    this._hideTimeout = null;\n    if (this.props.testOnly_pressed) {\n      return;\n    }\n    if (this._hasPressHandler()) {\n      this.setState({\n        extraChildStyle: null,\n        extraUnderlayStyle: null,\n      });\n      this.props.onHideUnderlay && this.props.onHideUnderlay();\n    }\n  },\n\n  _hasPressHandler: function() {\n    return !!(\n      this.props.onPress ||\n      this.props.onPressIn ||\n      this.props.onPressOut ||\n      this.props.onLongPress\n    );\n  },\n\n  render: function() {\n    const child = React.Children.only(this.props.children);\n    return (\n      <View\n        accessible={this.props.accessible !== false}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityHint={this.props.accessibilityHint}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        style={StyleSheet.compose(\n          this.props.style,\n          this.state.extraUnderlayStyle,\n        )}\n        onLayout={this.props.onLayout}\n        hitSlop={this.props.hitSlop}\n        isTVSelectable={true}\n        tvParallaxProperties={this.props.tvParallaxProperties}\n        hasTVPreferredFocus={this.props.hasTVPreferredFocus}\n        onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n        onResponderTerminationRequest={\n          this.touchableHandleResponderTerminationRequest\n        }\n        onResponderGrant={this.touchableHandleResponderGrant}\n        onResponderMove={this.touchableHandleResponderMove}\n        onResponderRelease={this.touchableHandleResponderRelease}\n        onResponderTerminate={this.touchableHandleResponderTerminate}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {React.cloneElement(child, {\n          style: StyleSheet.compose(\n            child.props.style,\n            this.state.extraChildStyle,\n          ),\n        })}\n        {Touchable.renderDebugView({\n          color: 'green',\n          hitSlop: this.props.hitSlop,\n        })}\n      </View>\n    );\n  },\n}): any): React.ComponentType<Props>);\n\nmodule.exports = TouchableHighlight;\n"]}