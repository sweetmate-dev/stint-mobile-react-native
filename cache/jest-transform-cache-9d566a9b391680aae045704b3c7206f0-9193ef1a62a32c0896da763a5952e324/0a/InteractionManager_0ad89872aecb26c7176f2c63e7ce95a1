b6af105f457d16c1e3cc7b8fcf927faf










'use strict';

var BatchedBridge = require('BatchedBridge');
var EventEmitter = require('EventEmitter');
var Set = require('Set');
var TaskQueue = require('TaskQueue');

var infoLog = require('infoLog');
var invariant = require('fbjs/lib/invariant');



var keyMirror = require('fbjs/lib/keyMirror');




var _emitter = new EventEmitter();

var DEBUG_DELAY = 0;
var DEBUG = false;


















































var InteractionManager = {
  Events: keyMirror({
    interactionStart: true,
    interactionComplete: true }),






  runAfterInteractions: function runAfterInteractions(
  task)
  {
    var tasks = [];
    var promise = new Promise(function (resolve) {
      _scheduleUpdate();
      if (task) {
        tasks.push(task);
      }
      tasks.push({
        run: resolve,
        name: 'resolve ' + (task && task.name || '?') });

      _taskQueue.enqueueTasks(tasks);
    });
    return {
      then: promise.then.bind(promise),
      done: function done() {
        if (promise.done) {
          return promise.done.apply(promise, arguments);
        } else {
          console.warn(
          'Tried to call done when not supported by current Promise implementation.');

        }
      },
      cancel: function cancel() {
        _taskQueue.cancelTasks(tasks);
      } };

  },




  createInteractionHandle: function createInteractionHandle() {
    DEBUG && infoLog('create interaction handle');
    _scheduleUpdate();
    var handle = ++_inc;
    _addInteractionSet.add(handle);
    return handle;
  },




  clearInteractionHandle: function clearInteractionHandle(handle) {
    DEBUG && infoLog('clear interaction handle');
    invariant(!!handle, 'Must provide a handle to clear.');
    _scheduleUpdate();
    _addInteractionSet.delete(handle);
    _deleteInteractionSet.add(handle);
  },

  addListener: _emitter.addListener.bind(_emitter),






  setDeadline: function setDeadline(deadline) {
    _deadline = deadline;
  } };


var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({ onMoreTasks: _scheduleUpdate });
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;






function _scheduleUpdate() {
  if (!_nextUpdateHandle) {
    if (_deadline > 0) {



      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
    } else {
      _nextUpdateHandle = setImmediate(_processUpdate);
    }
  }
}




function _processUpdate() {
  _nextUpdateHandle = 0;

  var interactionCount = _interactionSet.size;
  _addInteractionSet.forEach(function (handle) {return _interactionSet.add(handle);});
  _deleteInteractionSet.forEach(function (handle) {return _interactionSet.delete(handle);});
  var nextInteractionCount = _interactionSet.size;

  if (interactionCount !== 0 && nextInteractionCount === 0) {

    _emitter.emit(InteractionManager.Events.interactionComplete);
  } else if (interactionCount === 0 && nextInteractionCount !== 0) {

    _emitter.emit(InteractionManager.Events.interactionStart);
  }


  if (nextInteractionCount === 0) {
    while (_taskQueue.hasTasksToProcess()) {
      _taskQueue.processNext();
      if (
      _deadline > 0 &&
      BatchedBridge.getEventLoopRunningTime() >= _deadline)
      {

        _scheduleUpdate();
        break;
      }
    }
  }
  _addInteractionSet.clear();
  _deleteInteractionSet.clear();
}

module.exports = InteractionManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,