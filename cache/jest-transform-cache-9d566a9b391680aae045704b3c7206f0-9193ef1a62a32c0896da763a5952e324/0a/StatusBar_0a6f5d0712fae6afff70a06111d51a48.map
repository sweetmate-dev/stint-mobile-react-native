{"version":3,"sources":["StatusBar.js"],"names":["React","require","PropTypes","ColorPropType","Platform","processColor","StatusBarManager","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_stackEntry","_updatePropsStack","clearImmediate","_updateImmediate","setImmediate","oldProps","_currentValues","mergedProps","_propsStack","_defaultProps","OS","setStyle","setHidden","setNetworkActivityIndicatorVisible","setColor","setTranslucent","push","index","indexOf","splice","animation","style","visible","console","warn","color","Component","currentHeight","HEIGHT","propTypes","bool","oneOf","defaultProps","module","exports"],"mappings":"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","file":"StatusBar.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\n\nconst processColor = require('processColor');\n\nconst StatusBarManager = require('NativeModules').StatusBarManager;\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Enum<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Enum<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n}>;\n\ntype DefaultProps = {\n  animated: boolean,\n};\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there is also an imperative\n * API exposed as static functions on the component. It is however not recommended\n * to use the static API and the component for the same prop because any value\n * set by the static API will get overriden by the one set by the component in\n * the next render.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<{\n  hidden?: boolean,\n  animated?: boolean,\n  backgroundColor?: string,\n  translucent?: boolean,\n  barStyle?: 'default' | 'light-content' | 'dark-content',\n  networkActivityIndicatorVisible?: boolean,\n  showHideTransition?: 'fade' | 'slide',\n}> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor: 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight = StatusBarManager.HEIGHT;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    StatusBarManager.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n    StatusBarManager.setColor(processColor(color), animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    StatusBarManager.setTranslucent(translucent);\n  }\n\n  static propTypes = {\n    /**\n     * If the status bar is hidden.\n     */\n    hidden: PropTypes.bool,\n    /**\n     * If the transition between status bar property changes should be animated.\n     * Supported for backgroundColor, barStyle and hidden.\n     */\n    animated: PropTypes.bool,\n    /**\n     * The background color of the status bar.\n     * @platform android\n     */\n    backgroundColor: ColorPropType,\n    /**\n     * If the status bar is translucent.\n     * When translucent is set to true, the app will draw under the status bar.\n     * This is useful when using a semi transparent status bar color.\n     *\n     * @platform android\n     */\n    translucent: PropTypes.bool,\n    /**\n     * Sets the color of the status bar text.\n     */\n    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),\n    /**\n     * If the network activity indicator should be visible.\n     *\n     * @platform ios\n     */\n    networkActivityIndicatorVisible: PropTypes.bool,\n    /**\n     * The transition effect when showing and hiding the status bar using the `hidden`\n     * prop. Defaults to 'fade'.\n     *\n     * @platform ios\n     */\n    showHideTransition: PropTypes.oneOf(['fade', 'slide']),\n  };\n\n  static defaultProps = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack.push(this._stackEntry);\n    this._updatePropsStack();\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    StatusBar._propsStack.splice(index, 1);\n\n    this._updatePropsStack();\n  }\n\n  componentDidUpdate() {\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack[index] = this._stackEntry;\n\n    this._updatePropsStack();\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          StatusBarManager.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(mergedProps.barStyle.value);\n        }\n        if (\n          !oldProps ||\n          oldProps.backgroundColor.value !== mergedProps.backgroundColor.value\n        ) {\n          StatusBarManager.setColor(\n            processColor(mergedProps.backgroundColor.value),\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          StatusBarManager.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"]}