10e71e0355d1d41d4ff268f7e8829647










'use strict';

var ReactPropTypes = require('prop-types');

var deprecatedPropType = require('deprecatedPropType');

var TransformMatrixPropType = function TransformMatrixPropType(
props,
propName,
componentName)
{
  if (props[propName]) {
    return new Error(
    'The transformMatrix style property is deprecated. ' +
    'Use `transform: [{ matrix: ... }]` instead.');

  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(
props,
propName,
componentName)
{
  if (props[propName]) {
    return new Error(
    'The decomposedMatrix style property is deprecated. ' +
    'Use `transform: [...]` instead.');

  }
};

var TransformPropTypes = {
















  transform: ReactPropTypes.arrayOf(
  ReactPropTypes.oneOfType([
  ReactPropTypes.shape({ perspective: ReactPropTypes.number }),
  ReactPropTypes.shape({ rotate: ReactPropTypes.string }),
  ReactPropTypes.shape({ rotateX: ReactPropTypes.string }),
  ReactPropTypes.shape({ rotateY: ReactPropTypes.string }),
  ReactPropTypes.shape({ rotateZ: ReactPropTypes.string }),
  ReactPropTypes.shape({ scale: ReactPropTypes.number }),
  ReactPropTypes.shape({ scaleX: ReactPropTypes.number }),
  ReactPropTypes.shape({ scaleY: ReactPropTypes.number }),
  ReactPropTypes.shape({ translateX: ReactPropTypes.number }),
  ReactPropTypes.shape({ translateY: ReactPropTypes.number }),
  ReactPropTypes.shape({ skewX: ReactPropTypes.string }),
  ReactPropTypes.shape({ skewY: ReactPropTypes.string })])),






  transformMatrix: TransformMatrixPropType,



  decomposedMatrix: DecomposedMatrixPropType,


  scaleX: deprecatedPropType(
  ReactPropTypes.number,
  'Use the transform prop instead.'),

  scaleY: deprecatedPropType(
  ReactPropTypes.number,
  'Use the transform prop instead.'),

  rotation: deprecatedPropType(
  ReactPropTypes.number,
  'Use the transform prop instead.'),

  translateX: deprecatedPropType(
  ReactPropTypes.number,
  'Use the transform prop instead.'),

  translateY: deprecatedPropType(
  ReactPropTypes.number,
  'Use the transform prop instead.') };



module.exports = TransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYW5zZm9ybVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlcyIsInJlcXVpcmUiLCJkZXByZWNhdGVkUHJvcFR5cGUiLCJUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiRXJyb3IiLCJEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUiLCJUcmFuc2Zvcm1Qcm9wVHlwZXMiLCJ0cmFuc2Zvcm0iLCJhcnJheU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJwZXJzcGVjdGl2ZSIsIm51bWJlciIsInJvdGF0ZSIsInN0cmluZyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJza2V3WCIsInNrZXdZIiwidHJhbnNmb3JtTWF0cml4IiwiZGVjb21wb3NlZE1hdHJpeCIsInJvdGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVVBOztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxZQUFSLENBQXZCOztBQUVBLElBQU1DLHFCQUFxQkQsUUFBUSxvQkFBUixDQUEzQjs7QUFFQSxJQUFNRSwwQkFBMEIsU0FBMUJBLHVCQUEwQjtBQUM5QkMsS0FEOEI7QUFFOUJDLFFBRjhCO0FBRzlCQyxhQUg4QjtBQUl0QjtBQUNSLE1BQUlGLE1BQU1DLFFBQU4sQ0FBSixFQUFxQjtBQUNuQixXQUFPLElBQUlFLEtBQUo7QUFDTDtBQUNFLGlEQUZHLENBQVA7O0FBSUQ7QUFDRixDQVhEOztBQWFBLElBQU1DLDJCQUEyQixTQUEzQkEsd0JBQTJCO0FBQy9CSixLQUQrQjtBQUUvQkMsUUFGK0I7QUFHL0JDLGFBSCtCO0FBSXZCO0FBQ1IsTUFBSUYsTUFBTUMsUUFBTixDQUFKLEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSjtBQUNMO0FBQ0UscUNBRkcsQ0FBUDs7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBTUUscUJBQXFCOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCekJDLGFBQVdWLGVBQWVXLE9BQWY7QUFDVFgsaUJBQWVZLFNBQWYsQ0FBeUI7QUFDdkJaLGlCQUFlYSxLQUFmLENBQXFCLEVBQUNDLGFBQWFkLGVBQWVlLE1BQTdCLEVBQXJCLENBRHVCO0FBRXZCZixpQkFBZWEsS0FBZixDQUFxQixFQUFDRyxRQUFRaEIsZUFBZWlCLE1BQXhCLEVBQXJCLENBRnVCO0FBR3ZCakIsaUJBQWVhLEtBQWYsQ0FBcUIsRUFBQ0ssU0FBU2xCLGVBQWVpQixNQUF6QixFQUFyQixDQUh1QjtBQUl2QmpCLGlCQUFlYSxLQUFmLENBQXFCLEVBQUNNLFNBQVNuQixlQUFlaUIsTUFBekIsRUFBckIsQ0FKdUI7QUFLdkJqQixpQkFBZWEsS0FBZixDQUFxQixFQUFDTyxTQUFTcEIsZUFBZWlCLE1BQXpCLEVBQXJCLENBTHVCO0FBTXZCakIsaUJBQWVhLEtBQWYsQ0FBcUIsRUFBQ1EsT0FBT3JCLGVBQWVlLE1BQXZCLEVBQXJCLENBTnVCO0FBT3ZCZixpQkFBZWEsS0FBZixDQUFxQixFQUFDUyxRQUFRdEIsZUFBZWUsTUFBeEIsRUFBckIsQ0FQdUI7QUFRdkJmLGlCQUFlYSxLQUFmLENBQXFCLEVBQUNVLFFBQVF2QixlQUFlZSxNQUF4QixFQUFyQixDQVJ1QjtBQVN2QmYsaUJBQWVhLEtBQWYsQ0FBcUIsRUFBQ1csWUFBWXhCLGVBQWVlLE1BQTVCLEVBQXJCLENBVHVCO0FBVXZCZixpQkFBZWEsS0FBZixDQUFxQixFQUFDWSxZQUFZekIsZUFBZWUsTUFBNUIsRUFBckIsQ0FWdUI7QUFXdkJmLGlCQUFlYSxLQUFmLENBQXFCLEVBQUNhLE9BQU8xQixlQUFlaUIsTUFBdkIsRUFBckIsQ0FYdUI7QUFZdkJqQixpQkFBZWEsS0FBZixDQUFxQixFQUFDYyxPQUFPM0IsZUFBZWlCLE1BQXZCLEVBQXJCLENBWnVCLENBQXpCLENBRFMsQ0FqQmM7Ozs7Ozs7QUFxQ3pCVyxtQkFBaUJ6Qix1QkFyQ1E7Ozs7QUF5Q3pCMEIsb0JBQWtCckIsd0JBekNPOzs7QUE0Q3pCYyxVQUFRcEI7QUFDTkYsaUJBQWVlLE1BRFQ7QUFFTixtQ0FGTSxDQTVDaUI7O0FBZ0R6QlEsVUFBUXJCO0FBQ05GLGlCQUFlZSxNQURUO0FBRU4sbUNBRk0sQ0FoRGlCOztBQW9EekJlLFlBQVU1QjtBQUNSRixpQkFBZWUsTUFEUDtBQUVSLG1DQUZRLENBcERlOztBQXdEekJTLGNBQVl0QjtBQUNWRixpQkFBZWUsTUFETDtBQUVWLG1DQUZVLENBeERhOztBQTREekJVLGNBQVl2QjtBQUNWRixpQkFBZWUsTUFETDtBQUVWLG1DQUZVLENBNURhLEVBQTNCOzs7O0FBa0VBZ0IsT0FBT0MsT0FBUCxHQUFpQnZCLGtCQUFqQiIsImZpbGUiOiJUcmFuc2Zvcm1Qcm9wVHlwZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxuY29uc3QgZGVwcmVjYXRlZFByb3BUeXBlID0gcmVxdWlyZSgnZGVwcmVjYXRlZFByb3BUeXBlJyk7XG5cbmNvbnN0IFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24oXG4gIHByb3BzOiBPYmplY3QsXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbik6ID9FcnJvciB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSB0cmFuc2Zvcm1NYXRyaXggc3R5bGUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICdVc2UgYHRyYW5zZm9ybTogW3sgbWF0cml4OiAuLi4gfV1gIGluc3RlYWQuJyxcbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUgPSBmdW5jdGlvbihcbiAgcHJvcHM6IE9iamVjdCxcbiAgcHJvcE5hbWU6IHN0cmluZyxcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuKTogP0Vycm9yIHtcbiAgaWYgKHByb3BzW3Byb3BOYW1lXSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAnVGhlIGRlY29tcG9zZWRNYXRyaXggc3R5bGUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICdVc2UgYHRyYW5zZm9ybTogWy4uLl1gIGluc3RlYWQuJyxcbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBUcmFuc2Zvcm1Qcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBgdHJhbnNmb3JtYCBhY2NlcHRzIGFuIGFycmF5IG9mIHRyYW5zZm9ybWF0aW9uIG9iamVjdHMuIEVhY2ggb2JqZWN0IHNwZWNpZmllc1xuICAgKiB0aGUgcHJvcGVydHkgdGhhdCB3aWxsIGJlIHRyYW5zZm9ybWVkIGFzIHRoZSBrZXksIGFuZCB0aGUgdmFsdWUgdG8gdXNlIGluIHRoZVxuICAgKiB0cmFuc2Zvcm1hdGlvbi4gT2JqZWN0cyBzaG91bGQgbm90IGJlIGNvbWJpbmVkLiBVc2UgYSBzaW5nbGUga2V5L3ZhbHVlIHBhaXJcbiAgICogcGVyIG9iamVjdC5cbiAgICpcbiAgICogVGhlIHJvdGF0ZSB0cmFuc2Zvcm1hdGlvbnMgcmVxdWlyZSBhIHN0cmluZyBzbyB0aGF0IHRoZSB0cmFuc2Zvcm0gbWF5IGJlXG4gICAqIGV4cHJlc3NlZCBpbiBkZWdyZWVzIChkZWcpIG9yIHJhZGlhbnMgKHJhZCkuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgdHJhbnNmb3JtKFt7IHJvdGF0ZVg6ICc0NWRlZycgfSwgeyByb3RhdGVaOiAnMC43ODUzOThyYWQnIH1dKWBcbiAgICpcbiAgICogVGhlIHNrZXcgdHJhbnNmb3JtYXRpb25zIHJlcXVpcmUgYSBzdHJpbmcgc28gdGhhdCB0aGUgdHJhbnNmb3JtIG1heSBiZVxuICAgKiBleHByZXNzZWQgaW4gZGVncmVlcyAoZGVnKS4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIGB0cmFuc2Zvcm0oW3sgc2tld1g6ICc0NWRlZycgfV0pYFxuICAgKi9cbiAgdHJhbnNmb3JtOiBSZWFjdFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cGVyc3BlY3RpdmU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWDogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWjogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NjYWxlWDogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGVZOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHt0cmFuc2xhdGVYOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHt0cmFuc2xhdGVZOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtza2V3WDogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2tld1k6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgIF0pLFxuICApLFxuXG4gIC8qKlxuICAgKiBEZXByZWNhdGVkLiBVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuXG4gICAqL1xuICB0cmFuc2Zvcm1NYXRyaXg6IFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlLFxuICAvKipcbiAgICogRGVwcmVjYXRlZC4gVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLlxuICAgKi9cbiAgZGVjb21wb3NlZE1hdHJpeDogRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlLFxuXG4gIC8qIERlcHJlY2F0ZWQgdHJhbnNmb3JtIHByb3BzIHVzZWQgb24gQW5kcm9pZCBvbmx5ICovXG4gIHNjYWxlWDogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHNjYWxlWTogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHJvdGF0aW9uOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbiAgdHJhbnNsYXRlWDogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHRyYW5zbGF0ZVk6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm1Qcm9wVHlwZXM7XG4iXX0=