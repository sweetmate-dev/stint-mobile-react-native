1c658b805214e165fcd44075a902ef07
Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.




































createVariations = createVariations;exports.












































createSharedStyle = createSharedStyle;var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function capitalizeFirstLetter(value) {return value.charAt(0).toUpperCase() + value.slice(1);}function createVariations(baseName, nameSuffixes, key, value) {return _lodash2.default.reduce(nameSuffixes, function (result, variant) {var variantName = variant ? baseName + '-' + variant : baseName;var keyName = variant ? '' + key + capitalizeFirstLetter(variant) : key;result[variantName] = _defineProperty({}, keyName, value);return result;}, {});}function createSharedStyle(componentNames) {var sharedStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var customStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return _lodash2.default.reduce(componentNames, function (result, componentName) {

    result[componentName] = _extends({},
    sharedStyle,
    customStyles[componentName]);


    return result;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZG9ucy5qcyJdLCJuYW1lcyI6WyJjcmVhdGVWYXJpYXRpb25zIiwiY3JlYXRlU2hhcmVkU3R5bGUiLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJ2YWx1ZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJiYXNlTmFtZSIsIm5hbWVTdWZmaXhlcyIsImtleSIsIl8iLCJyZWR1Y2UiLCJyZXN1bHQiLCJ2YXJpYW50IiwidmFyaWFudE5hbWUiLCJrZXlOYW1lIiwiY29tcG9uZW50TmFtZXMiLCJzaGFyZWRTdHlsZSIsImN1c3RvbVN0eWxlcyIsImNvbXBvbmVudE5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQ2dCQSxnQixHQUFBQSxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkNBQyxpQixHQUFBQSxpQixDQWxGaEIsZ0Msc1ZBRUEsU0FBU0MscUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNDLENBQ3BDLE9BQU9BLE1BQU1DLE1BQU4sQ0FBYSxDQUFiLEVBQWdCQyxXQUFoQixLQUFnQ0YsTUFBTUcsS0FBTixDQUFZLENBQVosQ0FBdkMsQ0FDRCxDQWlDTSxTQUFTTixnQkFBVCxDQUEwQk8sUUFBMUIsRUFBb0NDLFlBQXBDLEVBQWtEQyxHQUFsRCxFQUF1RE4sS0FBdkQsRUFBOEQsQ0FDbkUsT0FBT08saUJBQUVDLE1BQUYsQ0FBU0gsWUFBVCxFQUF1QixVQUFDSSxNQUFELEVBQVNDLE9BQVQsRUFBcUIsQ0FDakQsSUFBTUMsY0FBY0QsVUFBYU4sUUFBYixTQUF5Qk0sT0FBekIsR0FBcUNOLFFBQXpELENBQ0EsSUFBTVEsVUFBVUYsZUFBYUosR0FBYixHQUFtQlAsc0JBQXNCVyxPQUF0QixDQUFuQixHQUFzREosR0FBdEUsQ0FHQUcsT0FBT0UsV0FBUCx3QkFDR0MsT0FESCxFQUNhWixLQURiLEVBSUEsT0FBT1MsTUFBUCxDQUNELENBVk0sRUFVSixFQVZJLENBQVAsQ0FXRCxDQWlDTSxTQUFTWCxpQkFBVCxDQUEyQmUsY0FBM0IsRUFBZ0YsS0FBckNDLFdBQXFDLHVFQUF2QixFQUF1QixLQUFuQkMsWUFBbUIsdUVBQUosRUFBSTtBQUNyRixTQUFPUixpQkFBRUMsTUFBRixDQUFTSyxjQUFULEVBQXlCLFVBQUNKLE1BQUQsRUFBU08sYUFBVCxFQUEyQjs7QUFFekRQLFdBQU9PLGFBQVA7QUFDS0YsZUFETDtBQUVLQyxpQkFBYUMsYUFBYixDQUZMOzs7QUFLQSxXQUFPUCxNQUFQO0FBQ0QsR0FSTSxFQVFKLEVBUkksQ0FBUDtBQVNEIiwiZmlsZSI6ImFkZG9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zbGljZSgxKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9mIHN0eWxlIHZhcmlhdGlvbnMgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZVxuICogc3VmZml4ZXMuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsIHdoZW4gY3JlYXRpbmcgc3R5bGUgdmFyaWF0aW9uc1xuICogZm9yIHN0eWxlcyB3aXRoIHNob3J0aGFuZHMsIGUuZy4sIG1hcmdpbiwgcGFkZGluZywgZXRjLiBUaGlzIGZ1bmN0aW9uXG4gKiB3aWxsIHJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUga2V5cyB0aGF0IHJlcHJlc2VudCB0aGUgc3R5bGUgdmFyaWF0aW9ucyxcbiAqIGFuZCBlYWNoIGtleSB3aWxsIGhhdmUgYW4gb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIGtleSBhbmQgdmFsdWUuIEJvdGhcbiAqIHN0eWxlIHZhcmlhdGlvbiwgYW5kIHZhbHVlIG9iamVjdCBrZXlzIHdpbGwgZ2V0IHRoZSBwcm92aWRlZCBzdWZmaXhlcy4gVGhlXG4gKiBzdHlsZSB2YXJpYXRpb24ga2V5IG5hbWVzIGFyZSBleHBlY3RlZCB0byBiZSBpbiBzbmFrZS1jYXNlLCBhbmQgdmFsdWUga2V5c1xuICogYXJlIGV4cGVjdGVkIHRvIGJlIGluIGNhbWVsQ2FzZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogY3JlYXRlVmFyaWF0aW9ucygnbGFyZ2UtbWFyZ2luJywgWycnLCAnbGVmdCcsICdyaWdodCddLCAnbWFyZ2luJywgMzApXG4gKiB3aWxsIHJldHVybjpcbiAqIHtcbiAqICAgJ2xhcmdlLW1hcmdpbic6IHtcbiAqICAgICBtYXJnaW46IDMwXG4gKiAgIH0sXG4gKiAgICdsYXJnZS1tYXJnaW4tbGVmdCc6IHtcbiAqICAgICBtYXJnaW5MZWZ0OiAzMCxcbiAqICAgfSxcbiAqICAgJ2xhcmdlLW1hcmdpbi1yaWdodCc6IHtcbiAqICAgICBtYXJnaW5SaWdodDogMzAsXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBAcGFyYW0gYmFzZU5hbWUgQmFzZSBuYW1lIGZvciBzdHlsZSB2YXJpYXRpb24gwqduYW1lcy5cbiAqIEBwYXJhbSBuYW1lU3VmZml4ZXMgU3VmZml4ZXMgdGhhdCB3aWxsIGJlIGNvbmNhdGVuYXRlZCB0byBiYXNlTmFtZS5cbiAqIEBwYXJhbSBrZXkgVGhlIHZhbHVlIGtleSBuYW1lIHRvIHVzZS5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSBrZXkgcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZ2VuZXJhdGVkIHN0eWxlIHZhcmlhbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmFyaWF0aW9ucyhiYXNlTmFtZSwgbmFtZVN1ZmZpeGVzLCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBfLnJlZHVjZShuYW1lU3VmZml4ZXMsIChyZXN1bHQsIHZhcmlhbnQpID0+IHtcbiAgICBjb25zdCB2YXJpYW50TmFtZSA9IHZhcmlhbnQgPyBgJHtiYXNlTmFtZX0tJHt2YXJpYW50fWAgOiBiYXNlTmFtZTtcbiAgICBjb25zdCBrZXlOYW1lID0gdmFyaWFudCA/IGAke2tleX0ke2NhcGl0YWxpemVGaXJzdExldHRlcih2YXJpYW50KX1gIDoga2V5O1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcmVzdWx0W3ZhcmlhbnROYW1lXSA9IHtcbiAgICAgIFtrZXlOYW1lXTogdmFsdWUsXG4gICAgfTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9mIHN0eWxlIHJ1bGVzIGZvciB0aGUgcHJvdmlkZWQgY29tcG9uZW50cy4gVGhpcyBmdW5jdGlvblxuICogaXMgdXNlZnVsIHdoZW4gYSBzZXQgb2YgY29tcG9uZW50cyBuZWVkcyB0byBoYXZlIHRoZSBzYW1lIHN0eWxlLiBUaGVcbiAqIHNoYXJlZCBzdHlsZSB3aWxsIGJlIGFwcGxpZWQgdG8gZWFjaCBjb21wb25lbnQuIEl0IGlzIGFsc28gcG9zc2libGUgdG9cbiAqIHByb3ZpZGUgY3VzdG9tIHN0eWxlIGZvciBlYWNoIGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgYXBwbGllZCBvbiB0b3Agb2ZcbiAqIHRoZSBzaGFyZWQgc3R5bGUuXG4gKlxuICogRXhhbXBsZTpcbiAqIGNyZWF0ZVNoYXJlZFN0eWxlKFsnc2hvdXRlbS51aS5UZXh0JywgJ3Nob3V0ZW0udWkuVGl0bGUnXSwge1xuICogICBjb2xvcjogJ3doaXRlJ1xuICogfSwge1xuICogICAnc2hvdXRlbS51aS5UaXRsZToge1xuICogICAgIG1hcmdpbkJvdHRvbTogMTVcbiAqICAgfVxuICogKTtcbiAqIHdpbGwgcmV0dXJuOlxuICoge1xuICogICAnc2hvdXRlbS51aS5UZXh0Jzoge1xuICogICAgIGNvbG9yOiAnd2hpdGUnXG4gKiAgIH0sXG4gKiAgICdzaG91dGVtLnVpLlRpdGxlJzoge1xuICogICAgIGNvbG9yOiAnd2hpdGUnLFxuICogICAgIG1hcmdpbkJvdHRvbTogMTVcbiAqICAgfVxuICogfVxuICpcbiAqIEBwYXJhbSBjb21wb25lbnROYW1lcyBUaGUgbmFtZXMgb2YgdGhlIGNvbXBvbmVudHMgdG8gZ2VuZXJhdGUgc3R5bGVzIGZvci5cbiAqIEBwYXJhbSBzaGFyZWRTdHlsZSBUaGUgc3R5bGUgdG8gYXBwbHkgdG8gZWFjaCBjb21wb25lbnQuXG4gKiBAcGFyYW0gY3VzdG9tU3R5bGVzIFN0eWxlIG92ZXJyaWRlcyBieSBjb21wb25lbnQgbmFtZXMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZ2VuZXJhdGVkIHN0eWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNoYXJlZFN0eWxlKGNvbXBvbmVudE5hbWVzLCBzaGFyZWRTdHlsZSA9IHt9LCBjdXN0b21TdHlsZXMgPSB7fSkge1xuICByZXR1cm4gXy5yZWR1Y2UoY29tcG9uZW50TmFtZXMsIChyZXN1bHQsIGNvbXBvbmVudE5hbWUpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICByZXN1bHRbY29tcG9uZW50TmFtZV0gPSB7XG4gICAgICAuLi5zaGFyZWRTdHlsZSxcbiAgICAgIC4uLmN1c3RvbVN0eWxlc1tjb21wb25lbnROYW1lXSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwge30pO1xufVxuIl19