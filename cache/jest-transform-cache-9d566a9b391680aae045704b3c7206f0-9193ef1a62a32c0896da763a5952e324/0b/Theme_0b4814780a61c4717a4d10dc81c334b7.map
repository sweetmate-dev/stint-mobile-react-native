{"version":3,"sources":["Theme.js"],"names":["THEME_STYLE","THEME_STYLE_CACHE","defaultTheme","resolveStyle","style","baseStyle","Theme","themeStyle","componentName","defaultStyle","componentIncludedStyle","ThemeShape","PropTypes","shape","createComponentStyle","func","isRequired"],"mappings":"koBAAA;AACA,oD;AACA,8E;AACA,kE;;;AAGA,IAAMA,cAAc,4BAApB;AACA,IAAMC,oBAAoB,kCAA1B;;AAEA,IAAIC,qBAAJ;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,KAAD,EAAQC,SAAR;AACnB,kCAAe,+BAAgBD,KAAhB,EAAuBC,SAAvB,CAAf,CADmB,GAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BqBC,K;AACnB,iBAAYC,UAAZ,EAAwB;AACtB,SAAKP,WAAL,IAAoBG,aAAaI,UAAb,CAApB;AACA,SAAKN,iBAAL,IAA0B,EAA1B;AACD,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCoBO,iB,EAAeC,Y,EAAc;AAChD,UAAI,KAAKR,iBAAL,EAAwBO,aAAxB,CAAJ,EAA4C;AAC1C,eAAO,KAAKP,iBAAL,EAAwBO,aAAxB,CAAP;AACD;;AAED,UAAME,yBAAyBP;AAC7BM,kBAD6B;AAE7B,WAAKT,WAAL,CAF6B,CAA/B;;;;;;;;AAUA,WAAKC,iBAAL,EAAwBO,aAAxB,IAAyC;AACvCE,4BADuC;AAEvC,WAAKV,WAAL,EAAkBQ,aAAlB,CAFuC;AAGvC,WAAKR,WAAL,CAHuC,CAAzC;;;AAMA,aAAO,KAAKC,iBAAL,EAAwBO,aAAxB,CAAP;AACD,K,0EAjD2BJ,K,EAAO,CACjCF,eAAe,IAAII,KAAJ,CAAUF,KAAV,CAAf,CACD,C,gEAMwB,CACvB,IAAI,CAACF,YAAL,EAAmB,CACjBA,eAAe,IAAII,KAAJ,CAAU,EAAV,CAAf,CACD,CAED,OAAOJ,YAAP,CACD,C,wCAvBkBI,K;;;AA6Dd,IAAMK,kCAAaC,qBAAUC,KAAV,CAAgB;AACxCC,wBAAsBF,qBAAUG,IAAV,CAAeC,UADG,EAAhB,CAAnB","file":"Theme.js","sourcesContent":["import { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\n\n// Privates, ideally those should be symbols\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\n\nlet defaultTheme;\n\nconst resolveStyle = (style, baseStyle) =>\n  normalizeStyle(resolveIncludes(style, baseStyle));\n\n/**\n * The theme defines the application style, and provides methods to\n * resolve the style for a specific component.\n *\n * A theme style is a JavaScript object that contains the\n * React Native style rules, with several additional features:\n * 1. Style rules may be nested arbitrarily\n * 2. Top level keys may target specific components by using their fully qualified name\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\n *\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\n * {\n *   // Shared style\n *   baseFont: {\n *     fontFamily: '...'\n *   },\n *\n *   // Style that will be applied to shoutem.ui.Text component\n *   'shoutem.ui.Text': {\n *     [INCLUDE]: ['baseFont'],\n *     color: 'black'\n *   }\n * }\n */\nexport default class Theme {\n  constructor(themeStyle) {\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n\n  /**\n   * Sets the given style as a default theme style.\n   */\n  static setDefaultThemeStyle(style) {\n    defaultTheme = new Theme(style);\n  }\n\n  /**\n   * Returns the default theme that will be used as fallback\n   * if the StyleProvider is not configured in the app.\n   */\n  static getDefaultTheme() {\n    if (!defaultTheme) {\n      defaultTheme = new Theme({});\n    }\n\n    return defaultTheme;\n  }\n\n  /**\n   * Creates a component style by merging the theme style on top of the\n   * provided default component style. Any rules in the theme style will\n   * override the rules from the base component style.\n   *\n   * This method will also resolve any INCLUDE keywords in the theme or\n   * component styles before returning the final style.\n   *\n   * @param componentName fully qualified component name.\n   * @param defaultStyle - default component style that will be used as base style.\n   */\n  createComponentStyle(componentName, defaultStyle) {\n    if (this[THEME_STYLE_CACHE][componentName]) {\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n\n    const componentIncludedStyle = resolveStyle(\n      defaultStyle,\n      this[THEME_STYLE]\n    );\n\n    /**\n     * This is static component style (static per componentName). This style can only\n     * change if the theme changes during runtime, so it is safe to reuse it within a\n     * scope of a theme once it is resolved for the first time.\n     */\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(\n      componentIncludedStyle,\n      this[THEME_STYLE][componentName],\n      this[THEME_STYLE]\n    );\n\n    return this[THEME_STYLE_CACHE][componentName];\n  }\n}\n\nexport const ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});\n"]}