{"version":3,"sources":["mergeComponentAndThemeStyles.js"],"names":["mergeComponentAndThemeStyles","_","componentStyle","themeComponentStyle","themeStyle","componentThemedStyle","merge","intersectedRootThemeStyle","pick","keys"],"mappings":";;AAEwBA,4B,CAFxB,gC,IAAYC,C,oSAEG,SAASD,4BAAT;AACbE,cADa,EACGC,mBADH,EACwBC,UADxB,EACoC;AACjD,MAAMC,uBAAuBJ,EAAEK,KAAF,CAAQ,EAAR,EAAYJ,cAAZ,EAA4BC,mBAA5B,CAA7B;;;;AAIA,MAAMI,4BAA4BN,EAAEO,IAAF,CAAOJ,UAAP,EAAmBH,EAAEQ,IAAF,CAAOJ,oBAAP,CAAnB,CAAlC;;;AAGA,SAAOJ,EAAEK,KAAF,CAAQ,EAAR,EAAYC,yBAAZ,EAAuCF,oBAAvC,CAAP;AACD","file":"mergeComponentAndThemeStyles.js","sourcesContent":["import * as _ from 'lodash';\n\nexport default function mergeComponentAndThemeStyles(\n  componentStyle, themeComponentStyle, themeStyle) {\n  const componentThemedStyle = _.merge({}, componentStyle, themeComponentStyle);\n\n  // Picking only required root theme style, used by component.\n  // We do not want to merge whole theme to component style.\n  const intersectedRootThemeStyle = _.pick(themeStyle, _.keys(componentThemedStyle));\n\n  // Merging only common style, not all theme style with component style\n  return _.merge({}, intersectedRootThemeStyle, componentThemedStyle);\n}\n"]}