fceff191598412ffe6535c3244bf61c2










'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var ColorPropType = require('ColorPropType');
var ReactPropTypes = require('prop-types');
var ViewStylePropTypes = require('ViewStylePropTypes');

var TextStylePropTypes = _extends({},
ViewStylePropTypes, {

  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),





  fontWeight: ReactPropTypes.oneOf([
  'normal',
  'bold',
  '100',
  '200',
  '300',
  '400',
  '500',
  '600',
  '700',
  '800',
  '900']),




  fontVariant: ReactPropTypes.arrayOf(
  ReactPropTypes.oneOf([
  'small-caps',
  'oldstyle-nums',
  'lining-nums',
  'tabular-nums',
  'proportional-nums'])),


  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number }),

  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,



  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,




  textAlign: ReactPropTypes.oneOf([
  'auto',
  'left',
  'right',
  'center',
  'justify']),




  textAlignVertical: ReactPropTypes.oneOf([
  'auto',
  'top',
  'bottom',
  'center']),







  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf([
  'none',
  'underline',
  'line-through',
  'underline line-through']),




  textDecorationStyle: ReactPropTypes.oneOf([
  'solid',
  'double',
  'dotted',
  'dashed']),




  textDecorationColor: ColorPropType,



  textTransform: ReactPropTypes.oneOf([
  'none',
  'capitalize',
  'uppercase',
  'lowercase']),




  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl']) });


module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIlJlYWN0UHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiY29sb3IiLCJmb250RmFtaWx5Iiwic3RyaW5nIiwiZm9udFNpemUiLCJudW1iZXIiLCJmb250U3R5bGUiLCJvbmVPZiIsImZvbnRXZWlnaHQiLCJmb250VmFyaWFudCIsImFycmF5T2YiLCJ0ZXh0U2hhZG93T2Zmc2V0Iiwic2hhcGUiLCJ3aWR0aCIsImhlaWdodCIsInRleHRTaGFkb3dSYWRpdXMiLCJ0ZXh0U2hhZG93Q29sb3IiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInRleHRBbGlnbiIsInRleHRBbGlnblZlcnRpY2FsIiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwiYm9vbCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uU3R5bGUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwidGV4dFRyYW5zZm9ybSIsIndyaXRpbmdEaXJlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUEsYTs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsZUFBUixDQUF0QjtBQUNBLElBQU1DLGlCQUFpQkQsUUFBUSxZQUFSLENBQXZCO0FBQ0EsSUFBTUUscUJBQXFCRixRQUFRLG9CQUFSLENBQTNCOztBQUVBLElBQU1HO0FBQ0RELGtCQURDOztBQUdKRSxTQUFPTCxhQUhIO0FBSUpNLGNBQVlKLGVBQWVLLE1BSnZCO0FBS0pDLFlBQVVOLGVBQWVPLE1BTHJCO0FBTUpDLGFBQVdSLGVBQWVTLEtBQWYsQ0FBcUIsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFyQixDQU5QOzs7Ozs7QUFZSkMsY0FBWVYsZUFBZVMsS0FBZixDQUFxQjtBQUMvQixVQUQrQjtBQUUvQixRQUYrQjtBQUcvQixPQUgrQjtBQUkvQixPQUorQjtBQUsvQixPQUwrQjtBQU0vQixPQU4rQjtBQU8vQixPQVArQjtBQVEvQixPQVIrQjtBQVMvQixPQVQrQjtBQVUvQixPQVYrQjtBQVcvQixPQVgrQixDQUFyQixDQVpSOzs7OztBQTRCSkUsZUFBYVgsZUFBZVksT0FBZjtBQUNYWixpQkFBZVMsS0FBZixDQUFxQjtBQUNuQixjQURtQjtBQUVuQixpQkFGbUI7QUFHbkIsZUFIbUI7QUFJbkIsZ0JBSm1CO0FBS25CLHFCQUxtQixDQUFyQixDQURXLENBNUJUOzs7QUFxQ0pJLG9CQUFrQmIsZUFBZWMsS0FBZixDQUFxQjtBQUNyQ0MsV0FBT2YsZUFBZU8sTUFEZTtBQUVyQ1MsWUFBUWhCLGVBQWVPLE1BRmMsRUFBckIsQ0FyQ2Q7O0FBeUNKVSxvQkFBa0JqQixlQUFlTyxNQXpDN0I7QUEwQ0pXLG1CQUFpQnBCLGFBMUNiOzs7O0FBOENKcUIsaUJBQWVuQixlQUFlTyxNQTlDMUI7QUErQ0phLGNBQVlwQixlQUFlTyxNQS9DdkI7Ozs7O0FBb0RKYyxhQUFXckIsZUFBZVMsS0FBZixDQUFxQjtBQUM5QixRQUQ4QjtBQUU5QixRQUY4QjtBQUc5QixTQUg4QjtBQUk5QixVQUo4QjtBQUs5QixXQUw4QixDQUFyQixDQXBEUDs7Ozs7QUE4REphLHFCQUFtQnRCLGVBQWVTLEtBQWYsQ0FBcUI7QUFDdEMsUUFEc0M7QUFFdEMsT0FGc0M7QUFHdEMsVUFIc0M7QUFJdEMsVUFKc0MsQ0FBckIsQ0E5RGY7Ozs7Ozs7O0FBMEVKYyxzQkFBb0J2QixlQUFld0IsSUExRS9CO0FBMkVKQyxzQkFBb0J6QixlQUFlUyxLQUFmLENBQXFCO0FBQ3ZDLFFBRHVDO0FBRXZDLGFBRnVDO0FBR3ZDLGdCQUh1QztBQUl2QywwQkFKdUMsQ0FBckIsQ0EzRWhCOzs7OztBQW9GSmlCLHVCQUFxQjFCLGVBQWVTLEtBQWYsQ0FBcUI7QUFDeEMsU0FEd0M7QUFFeEMsVUFGd0M7QUFHeEMsVUFId0M7QUFJeEMsVUFKd0MsQ0FBckIsQ0FwRmpCOzs7OztBQTZGSmtCLHVCQUFxQjdCLGFBN0ZqQjs7OztBQWlHSjhCLGlCQUFlNUIsZUFBZVMsS0FBZixDQUFxQjtBQUNsQyxRQURrQztBQUVsQyxjQUZrQztBQUdsQyxhQUhrQztBQUlsQyxhQUprQyxDQUFyQixDQWpHWDs7Ozs7QUEwR0pvQixvQkFBa0I3QixlQUFlUyxLQUFmLENBQXFCLENBQUMsTUFBRCxFQUFxQixLQUFyQixFQUE0QixLQUE1QixDQUFyQixDQTFHZCxHQUFOOzs7QUE2R0FxQixPQUFPQyxPQUFQLEdBQWlCN0Isa0JBQWpCIiwiZmlsZSI6IlRleHRTdHlsZVByb3BUeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbG9yUHJvcFR5cGUgPSByZXF1aXJlKCdDb2xvclByb3BUeXBlJyk7XG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbmNvbnN0IFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ1ZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSB7XG4gIC4uLlZpZXdTdHlsZVByb3BUeXBlcyxcblxuICBjb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgZm9udEZhbWlseTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBmb250U2l6ZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBmb250U3R5bGU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsnbm9ybWFsJywgJ2l0YWxpYyddKSxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBmb250IHdlaWdodC4gVGhlIHZhbHVlcyAnbm9ybWFsJyBhbmQgJ2JvbGQnIGFyZSBzdXBwb3J0ZWQgZm9yXG4gICAqIG1vc3QgZm9udHMuIE5vdCBhbGwgZm9udHMgaGF2ZSBhIHZhcmlhbnQgZm9yIGVhY2ggb2YgdGhlIG51bWVyaWMgdmFsdWVzLFxuICAgKiBpbiB0aGF0IGNhc2UgdGhlIGNsb3Nlc3Qgb25lIGlzIGNob3Nlbi5cbiAgICovXG4gIGZvbnRXZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9ybWFsJyAvKmRlZmF1bHQqLyxcbiAgICAnYm9sZCcsXG4gICAgJzEwMCcsXG4gICAgJzIwMCcsXG4gICAgJzMwMCcsXG4gICAgJzQwMCcsXG4gICAgJzUwMCcsXG4gICAgJzYwMCcsXG4gICAgJzcwMCcsXG4gICAgJzgwMCcsXG4gICAgJzkwMCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgZm9udFZhcmlhbnQ6IFJlYWN0UHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICAgJ3NtYWxsLWNhcHMnLFxuICAgICAgJ29sZHN0eWxlLW51bXMnLFxuICAgICAgJ2xpbmluZy1udW1zJyxcbiAgICAgICd0YWJ1bGFyLW51bXMnLFxuICAgICAgJ3Byb3BvcnRpb25hbC1udW1zJyxcbiAgICBdKSxcbiAgKSxcbiAgdGV4dFNoYWRvd09mZnNldDogUmVhY3RQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgaGVpZ2h0OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIH0pLFxuICB0ZXh0U2hhZG93UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIHRleHRTaGFkb3dDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGxldHRlclNwYWNpbmc6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgbGluZUhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRleHQgYWxpZ25tZW50LiBUaGUgdmFsdWUgJ2p1c3RpZnknIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGlPUyBhbmRcbiAgICogZmFsbGJhY2tzIHRvIGBsZWZ0YCBvbiBBbmRyb2lkLlxuICAgKi9cbiAgdGV4dEFsaWduOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nIC8qZGVmYXVsdCovLFxuICAgICdsZWZ0JyxcbiAgICAncmlnaHQnLFxuICAgICdjZW50ZXInLFxuICAgICdqdXN0aWZ5JyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgdGV4dEFsaWduVmVydGljYWw6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYXV0bycgLypkZWZhdWx0Ki8sXG4gICAgJ3RvcCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2NlbnRlcicsXG4gIF0pLFxuICAvKipcbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gcmVtb3ZlIGV4dHJhIGZvbnQgcGFkZGluZyBpbnRlbmRlZCB0byBtYWtlIHNwYWNlIGZvciBjZXJ0YWluIGFzY2VuZGVycyAvIGRlc2NlbmRlcnMuXG4gICAqIFdpdGggc29tZSBmb250cywgdGhpcyBwYWRkaW5nIGNhbiBtYWtlIHRleHQgbG9vayBzbGlnaHRseSBtaXNhbGlnbmVkIHdoZW4gY2VudGVyZWQgdmVydGljYWxseS5cbiAgICogRm9yIGJlc3QgcmVzdWx0cyBhbHNvIHNldCBgdGV4dEFsaWduVmVydGljYWxgIHRvIGBjZW50ZXJgLiBEZWZhdWx0IGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBpbmNsdWRlRm9udFBhZGRpbmc6IFJlYWN0UHJvcFR5cGVzLmJvb2wsXG4gIHRleHREZWNvcmF0aW9uTGluZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyAvKmRlZmF1bHQqLyxcbiAgICAndW5kZXJsaW5lJyxcbiAgICAnbGluZS10aHJvdWdoJyxcbiAgICAndW5kZXJsaW5lIGxpbmUtdGhyb3VnaCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25TdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdzb2xpZCcgLypkZWZhdWx0Ki8sXG4gICAgJ2RvdWJsZScsXG4gICAgJ2RvdHRlZCcsXG4gICAgJ2Rhc2hlZCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25Db2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHRleHRUcmFuc2Zvcm06IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScgLypkZWZhdWx0Ki8sXG4gICAgJ2NhcGl0YWxpemUnLFxuICAgICd1cHBlcmNhc2UnLFxuICAgICdsb3dlcmNhc2UnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHdyaXRpbmdEaXJlY3Rpb246IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsnYXV0bycgLypkZWZhdWx0Ki8sICdsdHInLCAncnRsJ10pLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0U3R5bGVQcm9wVHlwZXM7XG4iXX0=