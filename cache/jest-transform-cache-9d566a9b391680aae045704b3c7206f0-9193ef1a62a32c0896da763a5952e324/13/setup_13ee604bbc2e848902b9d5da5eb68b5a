e2fc582560ba779b7bdb3f0de8b1824e









'use strict';






















jest.mock('setupDevtools').mock('npmlog');




jest.
mock('InitializeCore', function () {}).
mock('Image', function () {return mockComponent('Image');}).
mock('Text', function () {return mockComponent('Text', MockNativeMethods);}).
mock('TextInput', function () {return mockComponent('TextInput');}).
mock('Modal', function () {return mockComponent('Modal');}).
mock('View', function () {return mockComponent('View', MockNativeMethods);}).
mock('RefreshControl', function () {return require.requireMock('RefreshControlMock');}).
mock('ScrollView', function () {return require.requireMock('ScrollViewMock');}).
mock('ActivityIndicator', function () {return mockComponent('ActivityIndicator');}).
mock('ListView', function () {return require.requireMock('ListViewMock');}).
mock('ListViewDataSource', function () {
  var DataSource = require.requireActual('ListViewDataSource');
  DataSource.prototype.toJSON = function () {
    function ListViewDataSource(dataBlob) {var _this = this;
      this.items = 0;

      try {
        Object.keys(dataBlob).forEach(function (key) {
          _this.items +=
          dataBlob[key] && (
          dataBlob[key].length || dataBlob[key].size || 0);
        });
      } catch (e) {
        this.items = 'unknown';
      }
    }

    return new ListViewDataSource(this._dataBlob);
  };
  return DataSource;
}).
mock('AnimatedImplementation', function () {
  var AnimatedImplementation = require.requireActual(
  'AnimatedImplementation');

  var oldCreate = AnimatedImplementation.createAnimatedComponent;
  AnimatedImplementation.createAnimatedComponent = function (Component) {
    var Wrapped = oldCreate(Component);
    Wrapped.__skipSetNativeProps_FOR_TESTS_ONLY = true;
    return Wrapped;
  };
  return AnimatedImplementation;
}).
mock('ReactNative', function () {
  var ReactNative = require.requireActual('ReactNative');
  var NativeMethodsMixin =
  ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.
  NativeMethodsMixin;

  _extends(NativeMethodsMixin, MockNativeMethods);
  _extends(ReactNative.NativeComponent.prototype, MockNativeMethods);

  return ReactNative;
}).
mock('ensureComponentIsNative', function () {return function () {return true;};});var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var MockNativeMethods = require.requireActual('./MockNativeMethods');var mockComponent = require.requireActual('./mockComponent');require.requireActual('../Libraries/polyfills/babelHelpers.js');require.requireActual('../Libraries/polyfills/Object.es7.js');require.requireActual('../Libraries/polyfills/error-guard');global.__DEV__ = true;global.Promise = require.requireActual('promise');global.regeneratorRuntime = require.requireActual('regenerator-runtime/runtime');global.requestAnimationFrame = function (callback) {return setTimeout(callback, 0);};global.cancelAnimationFrame = function (id) {clearTimeout(id);};jest.setMock('ErrorUtils', require('ErrorUtils'));

var mockNativeModules = {
  AlertManager: {
    alertWithArgs: jest.fn() },

  AppState: {
    addEventListener: jest.fn(),
    removeEventListener: jest.fn() },

  AsyncLocalStorage: {
    multiGet: jest.fn(function (keys, callback) {return (
        process.nextTick(function () {return callback(null, []);}));}),

    multiSet: jest.fn(function (entries, callback) {return (
        process.nextTick(function () {return callback(null);}));}),

    multiRemove: jest.fn(function (keys, callback) {return (
        process.nextTick(function () {return callback(null);}));}),

    multiMerge: jest.fn(function (entries, callback) {return (
        process.nextTick(function () {return callback(null);}));}),

    clear: jest.fn(function (callback) {return process.nextTick(function () {return callback(null);});}),
    getAllKeys: jest.fn(function (callback) {return process.nextTick(function () {return callback(null, []);});}) },

  BuildInfo: {
    appVersion: '0',
    buildVersion: '0' },

  Clipboard: {
    setString: jest.fn() },

  DataManager: {
    queryData: jest.fn() },

  DeviceInfo: {
    Dimensions: {
      window: {
        fontScale: 2,
        height: 1334,
        scale: 2,
        width: 750 },

      screen: {
        fontScale: 2,
        height: 1334,
        scale: 2,
        width: 750 } } },



  FacebookSDK: {
    login: jest.fn(),
    logout: jest.fn(),
    queryGraphPath: jest.fn(function (path, method, params, callback) {return callback();}) },

  GraphPhotoUpload: {
    upload: jest.fn() },

  I18n: {
    translationsDictionary: JSON.stringify({
      'Good bye, {name}!|Bye message': '\xA1Adi\xF3s {name}!' }) },


  ImageLoader: {
    getSize: jest.fn(function (url) {return Promise.resolve({ width: 320, height: 240 });}),
    prefetchImage: jest.fn() },

  ImageViewManager: {
    getSize: jest.fn(function (uri, success) {return (
        process.nextTick(function () {return success(320, 240);}));}),

    prefetchImage: jest.fn() },

  KeyboardObserver: {
    addListener: jest.fn(),
    removeListeners: jest.fn() },

  Linking: {
    openURL: jest.fn(),
    canOpenURL: jest.fn(function () {return Promise.resolve(true);}),
    addEventListener: jest.fn(),
    getInitialURL: jest.fn(function () {return Promise.resolve();}),
    removeEventListener: jest.fn() },

  LocationObserver: {
    getCurrentPosition: jest.fn(),
    startObserving: jest.fn(),
    stopObserving: jest.fn() },

  ModalFullscreenViewManager: {},
  NetInfo: {
    fetch: jest.fn(function () {return Promise.resolve();}),
    getConnectionInfo: jest.fn(function () {return Promise.resolve();}),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    isConnected: {
      fetch: jest.fn(function () {return Promise.resolve();}),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn() },

    isConnectionExpensive: jest.fn(function () {return Promise.resolve();}) },

  Networking: {
    sendRequest: jest.fn(),
    abortRequest: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn() },

  PushNotificationManager: {
    presentLocalNotification: jest.fn(),
    scheduleLocalNotification: jest.fn(),
    cancelAllLocalNotifications: jest.fn(),
    removeAllDeliveredNotifications: jest.fn(),
    getDeliveredNotifications: jest.fn(function (callback) {return process.nextTick(function () {return [];});}),
    removeDeliveredNotifications: jest.fn(),
    setApplicationIconBadgeNumber: jest.fn(),
    getApplicationIconBadgeNumber: jest.fn(function (callback) {return (
        process.nextTick(function () {return callback(0);}));}),

    cancelLocalNotifications: jest.fn(),
    getScheduledLocalNotifications: jest.fn(function (callback) {return (
        process.nextTick(function () {return callback();}));}),

    requestPermissions: jest.fn(function () {return (
        Promise.resolve({ alert: true, badge: true, sound: true }));}),

    abandonPermissions: jest.fn(),
    checkPermissions: jest.fn(function (callback) {return (
        process.nextTick(function () {return callback({ alert: true, badge: true, sound: true });}));}),

    getInitialNotification: jest.fn(function () {return Promise.resolve(null);}),
    addListener: jest.fn(),
    removeListeners: jest.fn() },

  SourceCode: {
    scriptURL: null },

  StatusBarManager: {
    HEIGHT: 42,
    setColor: jest.fn(),
    setStyle: jest.fn(),
    setHidden: jest.fn(),
    setNetworkActivityIndicatorVisible: jest.fn(),
    setBackgroundColor: jest.fn(),
    setTranslucent: jest.fn() },

  Timing: {
    createTimer: jest.fn(),
    deleteTimer: jest.fn() },

  UIManager: {
    AndroidViewPager: {
      Commands: {
        setPage: jest.fn(),
        setPageWithoutAnimation: jest.fn() } },


    blur: jest.fn(),
    createView: jest.fn(),
    dispatchViewManagerCommand: jest.fn(),
    focus: jest.fn(),
    setChildren: jest.fn(),
    manageChildren: jest.fn(),
    updateView: jest.fn(),
    removeSubviewsFromContainerWithID: jest.fn(),
    replaceExistingNonRootView: jest.fn(),
    customBubblingEventTypes: {},
    customDirectEventTypes: {},
    AndroidTextInput: {
      Commands: {} },

    ModalFullscreenView: {
      Constants: {} },

    ScrollView: {
      Constants: {} },

    View: {
      Constants: {} } },


  BlobModule: {
    BLOB_URI_SCHEME: 'content',
    BLOB_URI_HOST: null,
    addNetworkingHandler: jest.fn(),
    enableBlobSupport: jest.fn(),
    disableBlobSupport: jest.fn(),
    createFromParts: jest.fn(),
    sendBlob: jest.fn(),
    release: jest.fn() },

  WebSocketModule: {
    connect: jest.fn(),
    send: jest.fn(),
    sendBinary: jest.fn(),
    ping: jest.fn(),
    close: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn() } };



Object.keys(mockNativeModules).forEach(function (module) {
  try {
    jest.doMock(module, function () {return mockNativeModules[module];});
  } catch (e) {
    jest.doMock(module, function () {return mockNativeModules[module];}, { virtual: true });
  }
});

jest.doMock('NativeModules', function () {return mockNativeModules;});

jest.doMock('requireNativeComponent', function () {
  var React = require('react');

  return function (viewName) {return function (_React$Component) {_inherits(_class, _React$Component);function _class() {_classCallCheck(this, _class);return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));}_createClass(_class, [{ key: 'render', value: function render()

        {
          return React.createElement(viewName, this.props, this.props.children);
        } }]);return _class;}(React.Component);};

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,