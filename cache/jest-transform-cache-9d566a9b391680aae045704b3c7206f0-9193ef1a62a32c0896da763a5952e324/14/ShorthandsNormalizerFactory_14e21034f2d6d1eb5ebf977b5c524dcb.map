{"version":3,"sources":["ShorthandsNormalizerFactory.js"],"names":["createShorthand","name","type","_","isUndefined","SIDES","CORNERS","HORIZONTAL","VERTICAL","LEFT","RIGHT","TOP","BOTTOM","TOP_RIGHT","BOTTOM_RIGHT","TOP_LEFT","BOTTOM_LEFT","ShorthandsNormalizerFactory","createNormalizersMap","createAllSidesNormalizer","createAllCornersNormalizer","createHorizontalSidesNormalizer","createVerticalSidesNormalizer","prop","shorthand","suffix","val","normalizerCreator","getNormalizerCreator"],"mappings":"y0BAAA,gC;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,IAAP,UAAiB,EAAED,UAAF,EAAQC,MAAMC,iBAAEC,WAAF,CAAcF,IAAd,IAAsBD,IAAtB,GAA6BC,IAA3C,EAAjB,EAAxB;;AAEO,IAAMG,wBAAQL,gBAAgB,OAAhB,EAAyB,EAAzB,CAAd;AACA,IAAMM,4BAAUN,gBAAgB,SAAhB,EAA2B,EAA3B,CAAhB;AACA,IAAMO,kCAAaP,gBAAgB,YAAhB,CAAnB;AACA,IAAMQ,8BAAWR,gBAAgB,UAAhB,CAAjB;;AAEA,IAAMS,sBAAO,MAAb;AACA,IAAMC,wBAAQ,OAAd;AACA,IAAMC,oBAAM,KAAZ;AACA,IAAMC,0BAAS,QAAf;AACA,IAAMC,gCAAY,UAAlB;AACA,IAAMC,sCAAe,aAArB;AACA,IAAMC,8BAAW,SAAjB;AACA,IAAMC,oCAAc,YAApB,C;;;;;;;AAODC,2B;AACJ,yCAAc;AACZ,SAAKC,oBAAL;AACGb,UAAMJ,IADT,EACgB,KAAKkB,wBADrB;AAEGb,YAAQL,IAFX,EAEkB,KAAKmB,0BAFvB;AAGGb,eAAWN,IAHd,EAGqB,KAAKoB,+BAH1B;AAIGb,aAASP,IAJZ,EAImB,KAAKqB,6BAJxB;;AAMD,G;;AAEwBC,Q,EAAMC,S,EAAwB,KAAbC,MAAa,uEAAJ,EAAI;AACrD,aAAO,UAACC,GAAD;AACJH,eAAOd,IAAP,GAAcgB,MADV,EACmBC,GADnB;AAEJH,eAAOb,KAAP,GAAee,MAFX,EAEoBC,GAFpB;AAGJH,eAAOZ,GAAP,GAAac,MAHT,EAGkBC,GAHlB;AAIJH,eAAOX,MAAP,GAAgBa,MAJZ,EAIqBC,GAJrB,SAAP;;AAMD,K;;AAE0BH,Q,EAAMC,S,EAAwB,KAAbC,MAAa,uEAAJ,EAAI;AACvD,aAAO,UAACC,GAAD;AACJH,eAAOP,WAAP,GAAqBS,MADjB,EAC0BC,GAD1B;AAEJH,eAAOT,YAAP,GAAsBW,MAFlB,EAE2BC,GAF3B;AAGJH,eAAOR,QAAP,GAAkBU,MAHd,EAGuBC,GAHvB;AAIJH,eAAOV,SAAP,GAAmBY,MAJf,EAIwBC,GAJxB,UAAP;;AAMD,K;;AAE+BH,Q,EAAM;AACpC,aAAO,UAACG,GAAD;AACJH,eAAOd,IADH,EACUiB,GADV;AAEJH,eAAOb,KAFH,EAEWgB,GAFX,UAAP;;AAID,K;;AAE6BH,Q,EAAM;AAClC,aAAO,UAACG,GAAD;AACJH,eAAOZ,GADH,EACSe,GADT;AAEJH,eAAOX,MAFH,EAEYc,GAFZ,UAAP;;AAID,K;;AAEoBF,a,EAAW;AAC9B,aAAO,KAAKN,oBAAL,CAA0BM,UAAUvB,IAApC,CAAP;AACD,K;;AAEgBsB,Q,EAAMC,S,EAAWC,M,EAAQ;AACxC,UAAME,oBAAoB,KAAKC,oBAAL,CAA0BJ,SAA1B,CAA1B;AACA,aAAOG,kBAAkBJ,IAAlB,EAAwBC,SAAxB,EAAmCC,MAAnC,CAAP;AACD,K;;;AAGY,IAAIR,2BAAJ,E","file":"ShorthandsNormalizerFactory.js","sourcesContent":["import _ from 'lodash';\n\nconst createShorthand = (name, type) => ({ name, type: _.isUndefined(type) ? name : type });\n\nexport const SIDES = createShorthand('Sides', '');\nexport const CORNERS = createShorthand('Corners', '');\nexport const HORIZONTAL = createShorthand('Horizontal');\nexport const VERTICAL = createShorthand('Vertical');\n\nexport const LEFT = 'Left';\nexport const RIGHT = 'Right';\nexport const TOP = 'Top';\nexport const BOTTOM = 'Bottom';\nexport const TOP_RIGHT = 'TopRight';\nexport const BOTTOM_RIGHT = 'BottomRight';\nexport const TOP_LEFT = 'TopLeft';\nexport const BOTTOM_LEFT = 'BottomLeft';\n\n// Shorthands normalizers creators.\n// This creators provide standard normalizer used in most cases.\n// When style property has any of this shorthands, use this creators\n// to create shorthand normalizer.\n\nclass ShorthandsNormalizerFactory {\n  constructor() {\n    this.createNormalizersMap = {\n      [SIDES.name]: this.createAllSidesNormalizer,\n      [CORNERS.name]: this.createAllCornersNormalizer,\n      [HORIZONTAL.name]: this.createHorizontalSidesNormalizer,\n      [VERTICAL.name]: this.createVerticalSidesNormalizer,\n    };\n  }\n\n  createAllSidesNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + LEFT + suffix]: val,\n      [prop + RIGHT + suffix]: val,\n      [prop + TOP + suffix]: val,\n      [prop + BOTTOM + suffix]: val,\n    });\n  }\n\n  createAllCornersNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + BOTTOM_LEFT + suffix]: val,\n      [prop + BOTTOM_RIGHT + suffix]: val,\n      [prop + TOP_LEFT + suffix]: val,\n      [prop + TOP_RIGHT + suffix]: val,\n    });\n  }\n\n  createHorizontalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + LEFT]: val,\n      [prop + RIGHT]: val,\n    });\n  }\n\n  createVerticalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + TOP]: val,\n      [prop + BOTTOM]: val,\n    });\n  }\n\n  getNormalizerCreator(shorthand) {\n    return this.createNormalizersMap[shorthand.name];\n  }\n\n  createNormalizer(prop, shorthand, suffix) {\n    const normalizerCreator = this.getNormalizerCreator(shorthand);\n    return normalizerCreator(prop, shorthand, suffix);\n  }\n}\n\nexport default new ShorthandsNormalizerFactory();\n"]}