758cef9fa5cea3358421a116a0de0242










'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var AnimatedImplementation = require('AnimatedImplementation');
var Platform = require('Platform');
var React = require('React');
var ReactNative = require('ReactNative');
var ScrollResponder = require('ScrollResponder');
var ScrollViewStickyHeader = require('ScrollViewStickyHeader');
var StyleSheet = require('StyleSheet');
var View = require('View');
var InternalScrollViewType = require('InternalScrollViewType');

var createReactClass = require('create-react-class');
var dismissKeyboard = require('dismissKeyboard');
var flattenStyle = require('flattenStyle');
var invariant = require('fbjs/lib/invariant');
var processDecelerationRate = require('processDecelerationRate');
var requireNativeComponent = require('requireNativeComponent');
var warning = require('fbjs/lib/warning');
var resolveAssetSource = require('resolveAssetSource');










var AndroidScrollView = void 0;
var AndroidHorizontalScrollContentView = void 0;
var AndroidHorizontalScrollView = void 0;
var RCTScrollView = void 0;
var RCTScrollContentView = void 0;

if (Platform.OS === 'android') {
  AndroidScrollView = requireNativeComponent('RCTScrollView');
  AndroidHorizontalScrollView = requireNativeComponent(
  'AndroidHorizontalScrollView');

  AndroidHorizontalScrollContentView = requireNativeComponent(
  'AndroidHorizontalScrollContentView');

} else if (Platform.OS === 'ios') {
  RCTScrollView = requireNativeComponent('RCTScrollView');
  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');
} else {
  RCTScrollView = requireNativeComponent('RCTScrollView');
  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');
}





















































































































































































































































































































































































































































































var ScrollView = createReactClass({
  displayName: 'ScrollView',
  mixins: [ScrollResponder.Mixin],

  _scrollAnimatedValue: new AnimatedImplementation.Value(
  0),

  _scrollAnimatedValueAttachment: null,
  _stickyHeaderRefs: new Map(),
  _headerLayoutYs: new Map(),
  getInitialState: function getInitialState() {
    return _extends({},
    this.scrollResponderMixinGetInitialState(), {
      layoutHeight: null });

  },

  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
    this._scrollAnimatedValue = new AnimatedImplementation.Value(
    this.props.contentOffset ? this.props.contentOffset.y : 0);

    this._scrollAnimatedValue.setOffset(
    this.props.contentInset ? this.props.contentInset.top : 0);

    this._stickyHeaderRefs = new Map();
    this._headerLayoutYs = new Map();
  },

  componentDidMount: function componentDidMount() {
    this._updateAnimatedNodeAttachment();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._updateAnimatedNodeAttachment();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
  },

  setNativeProps: function setNativeProps(props) {
    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
  },







  getScrollResponder: function getScrollResponder() {
    return this;
  },

  getScrollableNode: function getScrollableNode() {
    return ReactNative.findNodeHandle(this._scrollViewRef);
  },

  getInnerViewNode: function getInnerViewNode() {
    return ReactNative.findNodeHandle(this._innerViewRef);
  },












  scrollTo: function scrollTo(
  y,
  x,
  animated)
  {
    if (typeof y === 'number') {
      console.warn(
      '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +
      'animated: true})` instead.');

    } else {var _ref =
      y || {};x = _ref.x;y = _ref.y;animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({
      x: x || 0,
      y: y || 0,
      animated: animated !== false });

  },









  scrollToEnd: function scrollToEnd(options) {

    var animated = (options && options.animated) !== false;
    this.getScrollResponder().scrollResponderScrollToEnd({
      animated: animated });

  },




  scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    console.warn(
    '`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');

    this.scrollTo({ x: x, y: y, animated: false });
  },






  flashScrollIndicators: function flashScrollIndicators() {
    this.getScrollResponder().scrollResponderFlashScrollIndicators();
  },

  _getKeyForIndex: function _getKeyForIndex(index, childArray) {

    var child = childArray[index];
    return child && child.key;
  },

  _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
    if (
    this.props.stickyHeaderIndices &&
    this.props.stickyHeaderIndices.length > 0)
    {
      this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(
      this._scrollViewRef,
      'onScroll',
      [{ nativeEvent: { contentOffset: { y: this._scrollAnimatedValue } } }]);

    }
  },

  _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
    if (ref) {
      this._stickyHeaderRefs.set(key, ref);
    } else {
      this._stickyHeaderRefs.delete(key);
    }
  },

  _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
    if (!this.props.stickyHeaderIndices) {
      return;
    }
    var childArray = React.Children.toArray(this.props.children);
    if (key !== this._getKeyForIndex(index, childArray)) {

      return;
    }

    var layoutY = event.nativeEvent.layout.y;
    this._headerLayoutYs.set(key, layoutY);

    var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
    var previousHeaderIndex = this.props.stickyHeaderIndices[
    indexOfIndex - 1];

    if (previousHeaderIndex != null) {
      var previousHeader = this._stickyHeaderRefs.get(
      this._getKeyForIndex(previousHeaderIndex, childArray));

      previousHeader && previousHeader.setNextHeaderY(layoutY);
    }
  },

  _handleScroll: function _handleScroll(e) {
    if (__DEV__) {
      if (
      this.props.onScroll &&
      this.props.scrollEventThrottle == null &&
      Platform.OS === 'ios')
      {
        console.log(
        'You specified `onScroll` on a <ScrollView> but not ' +
        '`scrollEventThrottle`. You will only receive one event. ' +
        'Using `16` you get all the events but be aware that it may ' +
        "cause frame drops, use a bigger number if you don't need as " +
        'much precision.');

      }
    }
    if (Platform.OS === 'android') {
      if (
      this.props.keyboardDismissMode === 'on-drag' &&
      this.state.isTouching)
      {
        dismissKeyboard();
      }
    }
    this.scrollResponderHandleScroll(e);
  },

  _handleLayout: function _handleLayout(e) {
    if (this.props.invertStickyHeaders) {
      this.setState({ layoutHeight: e.nativeEvent.layout.height });
    }
    if (this.props.onLayout) {
      this.props.onLayout(e);
    }
  },

  _handleContentOnLayout: function _handleContentOnLayout(e) {var _e$nativeEvent$layout =
    e.nativeEvent.layout,width = _e$nativeEvent$layout.width,height = _e$nativeEvent$layout.height;
    this.props.onContentSizeChange &&
    this.props.onContentSizeChange(width, height);
  },

  _scrollViewRef: null,
  _setScrollViewRef: function _setScrollViewRef(ref) {
    this._scrollViewRef = ref;
  },

  _innerViewRef: null,
  _setInnerViewRef: function _setInnerViewRef(ref) {
    this._innerViewRef = ref;
  },

  render: function render() {var _this = this;
    var ScrollViewClass = void 0;
    var ScrollContentContainerViewClass = void 0;
    if (Platform.OS === 'android') {
      if (this.props.horizontal) {
        ScrollViewClass = AndroidHorizontalScrollView;
        ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
      } else {
        ScrollViewClass = AndroidScrollView;
        ScrollContentContainerViewClass = View;
      }
    } else {
      ScrollViewClass = RCTScrollView;
      ScrollContentContainerViewClass = RCTScrollContentView;
    }

    invariant(
    ScrollViewClass !== undefined,
    'ScrollViewClass must not be undefined');


    invariant(
    ScrollContentContainerViewClass !== undefined,
    'ScrollContentContainerViewClass must not be undefined');


    var contentContainerStyle = [
    this.props.horizontal && styles.contentContainerHorizontal,
    this.props.contentContainerStyle];

    if (__DEV__ && this.props.style) {
      var _style = flattenStyle(this.props.style);
      var childLayoutProps = ['alignItems', 'justifyContent'].filter(
      function (prop) {return _style && _style[prop] !== undefined;});

      invariant(
      childLayoutProps.length === 0,
      'ScrollView child layout (' +
      JSON.stringify(childLayoutProps) +
      ') must be applied through the contentContainerStyle prop.');

    }

    var contentSizeChangeProps = {};
    if (this.props.onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout };

    }var

    stickyHeaderIndices = this.props.stickyHeaderIndices;
    var hasStickyHeaders =
    stickyHeaderIndices && stickyHeaderIndices.length > 0;
    var childArray =
    hasStickyHeaders && React.Children.toArray(this.props.children);
    var children = hasStickyHeaders ?

    childArray.map(function (child, index) {
      var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
      if (indexOfIndex > -1) {
        var key = child.key;
        var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
        return (
          React.createElement(ScrollViewStickyHeader, {
              key: key,
              ref: function ref(_ref2) {return _this._setStickyHeaderRef(key, _ref2);},
              nextHeaderLayoutY: _this._headerLayoutYs.get(
              _this._getKeyForIndex(nextIndex, childArray)),

              onLayout: function onLayout(event) {return (
                  _this._onStickyHeaderLayout(index, event, key));},

              scrollAnimatedValue: _this._scrollAnimatedValue,
              inverted: _this.props.invertStickyHeaders,
              scrollViewHeight: _this.state.layoutHeight },
            child));


      } else {
        return child;
      }
    }) :
    this.props.children;
    var contentContainer =
    React.createElement(ScrollContentContainerViewClass, _extends({},
      contentSizeChangeProps, {

        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews:


        Platform.OS === 'android' && hasStickyHeaders ?
        false :
        this.props.removeClippedSubviews,

        collapsable: false }),
      children);



    var alwaysBounceHorizontal =
    this.props.alwaysBounceHorizontal !== undefined ?
    this.props.alwaysBounceHorizontal :
    this.props.horizontal;

    var alwaysBounceVertical =
    this.props.alwaysBounceVertical !== undefined ?
    this.props.alwaysBounceVertical :
    !this.props.horizontal;

    var DEPRECATED_sendUpdatedChildFrames = !!this.props.
    DEPRECATED_sendUpdatedChildFrames;

    var baseStyle = this.props.horizontal ?
    styles.baseHorizontal :
    styles.baseVertical;
    var props = _extends({},
    this.props, {
      alwaysBounceHorizontal: alwaysBounceHorizontal,
      alwaysBounceVertical: alwaysBounceVertical,
      style: [baseStyle, this.props.style],


      onContentSizeChange: null,
      onLayout: this._handleLayout,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderReject: this.scrollResponderHandleResponderReject,
      onResponderRelease: this.scrollResponderHandleResponderRelease,

      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderTerminationRequest: this.
      scrollResponderHandleTerminationRequest,
      onScroll: this._handleScroll,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onScrollShouldSetResponder: this.
      scrollResponderHandleScrollShouldSetResponder,
      onStartShouldSetResponder: this.
      scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.
      scrollResponderHandleStartShouldSetResponderCapture,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchStart: this.scrollResponderHandleTouchStart,
      onTouchCancel: this.scrollResponderHandleTouchCancel,
      scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
      scrollEventThrottle: hasStickyHeaders ?
      1 :
      this.props.scrollEventThrottle,
      sendMomentumEvents:
      this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ?
      true :
      false,
      DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,

      pagingEnabled: Platform.select({

        ios:
        this.props.pagingEnabled &&
        this.props.snapToInterval == null &&
        this.props.snapToOffsets == null,

        android:
        this.props.pagingEnabled ||
        this.props.snapToInterval != null ||
        this.props.snapToOffsets != null }) });var



    decelerationRate = this.props.decelerationRate;
    if (decelerationRate != null) {
      props.decelerationRate = processDecelerationRate(decelerationRate);
    }

    var refreshControl = this.props.refreshControl;

    if (refreshControl) {
      if (Platform.OS === 'ios') {


        return (
          React.createElement(ScrollViewClass, _extends({}, props, { ref: this._setScrollViewRef }),
            Platform.isTV ? null : refreshControl,
            contentContainer));


      } else if (Platform.OS === 'android') {






        return React.cloneElement(
        refreshControl,
        { style: props.style },
        React.createElement(ScrollViewClass, _extends({},
          props, {
            style: baseStyle,
            ref: this._setScrollViewRef }),
          contentContainer));


      }
    }
    return (
      React.createElement(ScrollViewClass, _extends({}, props, { ref: this._setScrollViewRef }),
        contentContainer));


  } });


var TypedScrollView = ScrollView;



var styles = StyleSheet.create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll' },

  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll' },

  contentContainerHorizontal: {
    flexDirection: 'row' } });



module.exports = TypedScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXcuanMiXSwibmFtZXMiOlsiQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiIsInJlcXVpcmUiLCJQbGF0Zm9ybSIsIlJlYWN0IiwiUmVhY3ROYXRpdmUiLCJTY3JvbGxSZXNwb25kZXIiLCJTY3JvbGxWaWV3U3RpY2t5SGVhZGVyIiwiU3R5bGVTaGVldCIsIlZpZXciLCJJbnRlcm5hbFNjcm9sbFZpZXdUeXBlIiwiY3JlYXRlUmVhY3RDbGFzcyIsImRpc21pc3NLZXlib2FyZCIsImZsYXR0ZW5TdHlsZSIsImludmFyaWFudCIsInByb2Nlc3NEZWNlbGVyYXRpb25SYXRlIiwicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIndhcm5pbmciLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJBbmRyb2lkU2Nyb2xsVmlldyIsIkFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsQ29udGVudFZpZXciLCJBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXciLCJSQ1RTY3JvbGxWaWV3IiwiUkNUU2Nyb2xsQ29udGVudFZpZXciLCJPUyIsIlNjcm9sbFZpZXciLCJkaXNwbGF5TmFtZSIsIm1peGlucyIsIk1peGluIiwiX3Njcm9sbEFuaW1hdGVkVmFsdWUiLCJWYWx1ZSIsIl9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudCIsIl9zdGlja3lIZWFkZXJSZWZzIiwiTWFwIiwiX2hlYWRlckxheW91dFlzIiwiZ2V0SW5pdGlhbFN0YXRlIiwic2Nyb2xsUmVzcG9uZGVyTWl4aW5HZXRJbml0aWFsU3RhdGUiLCJsYXlvdXRIZWlnaHQiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwicHJvcHMiLCJjb250ZW50T2Zmc2V0IiwieSIsInNldE9mZnNldCIsImNvbnRlbnRJbnNldCIsInRvcCIsImNvbXBvbmVudERpZE1vdW50IiwiX3VwZGF0ZUFuaW1hdGVkTm9kZUF0dGFjaG1lbnQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRldGFjaCIsInNldE5hdGl2ZVByb3BzIiwiX3Njcm9sbFZpZXdSZWYiLCJnZXRTY3JvbGxSZXNwb25kZXIiLCJnZXRTY3JvbGxhYmxlTm9kZSIsImZpbmROb2RlSGFuZGxlIiwiZ2V0SW5uZXJWaWV3Tm9kZSIsIl9pbm5lclZpZXdSZWYiLCJzY3JvbGxUbyIsIngiLCJhbmltYXRlZCIsImNvbnNvbGUiLCJ3YXJuIiwic2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8iLCJzY3JvbGxUb0VuZCIsIm9wdGlvbnMiLCJzY3JvbGxSZXNwb25kZXJTY3JvbGxUb0VuZCIsInNjcm9sbFdpdGhvdXRBbmltYXRpb25UbyIsImZsYXNoU2Nyb2xsSW5kaWNhdG9ycyIsInNjcm9sbFJlc3BvbmRlckZsYXNoU2Nyb2xsSW5kaWNhdG9ycyIsIl9nZXRLZXlGb3JJbmRleCIsImluZGV4IiwiY2hpbGRBcnJheSIsImNoaWxkIiwia2V5Iiwic3RpY2t5SGVhZGVySW5kaWNlcyIsImxlbmd0aCIsImF0dGFjaE5hdGl2ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJfc2V0U3RpY2t5SGVhZGVyUmVmIiwicmVmIiwic2V0IiwiZGVsZXRlIiwiX29uU3RpY2t5SGVhZGVyTGF5b3V0IiwiZXZlbnQiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJjaGlsZHJlbiIsImxheW91dFkiLCJsYXlvdXQiLCJpbmRleE9mSW5kZXgiLCJpbmRleE9mIiwicHJldmlvdXNIZWFkZXJJbmRleCIsInByZXZpb3VzSGVhZGVyIiwiZ2V0Iiwic2V0TmV4dEhlYWRlclkiLCJfaGFuZGxlU2Nyb2xsIiwiZSIsIl9fREVWX18iLCJvblNjcm9sbCIsInNjcm9sbEV2ZW50VGhyb3R0bGUiLCJsb2ciLCJrZXlib2FyZERpc21pc3NNb2RlIiwic3RhdGUiLCJpc1RvdWNoaW5nIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsIiwiX2hhbmRsZUxheW91dCIsImludmVydFN0aWNreUhlYWRlcnMiLCJzZXRTdGF0ZSIsImhlaWdodCIsIm9uTGF5b3V0IiwiX2hhbmRsZUNvbnRlbnRPbkxheW91dCIsIndpZHRoIiwib25Db250ZW50U2l6ZUNoYW5nZSIsIl9zZXRTY3JvbGxWaWV3UmVmIiwiX3NldElubmVyVmlld1JlZiIsInJlbmRlciIsIlNjcm9sbFZpZXdDbGFzcyIsIlNjcm9sbENvbnRlbnRDb250YWluZXJWaWV3Q2xhc3MiLCJob3Jpem9udGFsIiwidW5kZWZpbmVkIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwic3R5bGVzIiwiY29udGVudENvbnRhaW5lckhvcml6b250YWwiLCJzdHlsZSIsImNoaWxkTGF5b3V0UHJvcHMiLCJmaWx0ZXIiLCJwcm9wIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnRlbnRTaXplQ2hhbmdlUHJvcHMiLCJoYXNTdGlja3lIZWFkZXJzIiwibWFwIiwibmV4dEluZGV4IiwiY29udGVudENvbnRhaW5lciIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsImFsd2F5c0JvdW5jZUhvcml6b250YWwiLCJhbHdheXNCb3VuY2VWZXJ0aWNhbCIsIkRFUFJFQ0FURURfc2VuZFVwZGF0ZWRDaGlsZEZyYW1lcyIsImJhc2VTdHlsZSIsImJhc2VIb3Jpem9udGFsIiwiYmFzZVZlcnRpY2FsIiwib25Nb21lbnR1bVNjcm9sbEJlZ2luIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbiIsIm9uTW9tZW50dW1TY3JvbGxFbmQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEVuZCIsIm9uUmVzcG9uZGVyR3JhbnQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJHcmFudCIsIm9uUmVzcG9uZGVyUmVqZWN0Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVqZWN0Iiwib25SZXNwb25kZXJSZWxlYXNlIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVsZWFzZSIsIm9uUmVzcG9uZGVyVGVybWluYXRlIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlVGVybWluYXRlIiwib25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUZXJtaW5hdGlvblJlcXVlc3QiLCJvblNjcm9sbEJlZ2luRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEJlZ2luRHJhZyIsIm9uU2Nyb2xsRW5kRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEVuZERyYWciLCJvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwib25Ub3VjaEVuZCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0Iiwib25Ub3VjaENhbmNlbCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoQ2FuY2VsIiwic2Nyb2xsQmFyVGh1bWJJbWFnZSIsInNlbmRNb21lbnR1bUV2ZW50cyIsInBhZ2luZ0VuYWJsZWQiLCJzZWxlY3QiLCJpb3MiLCJzbmFwVG9JbnRlcnZhbCIsInNuYXBUb09mZnNldHMiLCJhbmRyb2lkIiwiZGVjZWxlcmF0aW9uUmF0ZSIsInJlZnJlc2hDb250cm9sIiwiaXNUViIsImNsb25lRWxlbWVudCIsIlR5cGVkU2Nyb2xsVmlldyIsImNyZWF0ZSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImZsZXhEaXJlY3Rpb24iLCJvdmVyZmxvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFV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QUFELGVBQXFCZSxLQUFyQixJQUE0QixLQUFLLEtBQUswRSxpQkFBdEM7QUFDRzlHLHFCQUFTb0wsSUFBVCxHQUFnQixJQUFoQixHQUF1QkQsY0FEMUI7QUFFR2pELDRCQUZILENBREY7OztBQU1ELE9BVEQsTUFTTyxJQUFJbEksU0FBU3FCLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7Ozs7Ozs7QUFPcEMsZUFBT3BCLE1BQU1vTCxZQUFOO0FBQ0xGLHNCQURLO0FBRUwsVUFBQzNELE9BQU9wRixNQUFNb0YsS0FBZCxFQUZLO0FBR0wsNEJBQUMsZUFBRDtBQUNNcEYsZUFETjtBQUVFLG1CQUFPbUcsU0FGVDtBQUdFLGlCQUFLLEtBQUt6QixpQkFIWjtBQUlHb0IsMEJBSkgsQ0FISyxDQUFQOzs7QUFVRDtBQUNGO0FBQ0Q7QUFDRSwwQkFBQyxlQUFELGVBQXFCOUYsS0FBckIsSUFBNEIsS0FBSyxLQUFLMEUsaUJBQXRDO0FBQ0dvQix3QkFESCxDQURGOzs7QUFLRCxHQWxjaUMsRUFBakIsQ0FBbkI7OztBQXFjQSxJQUFNb0Qsa0JBQW9CaEssVUFBMUI7Ozs7QUFJQSxJQUFNZ0csU0FBU2pILFdBQVdrTCxNQUFYLENBQWtCO0FBQy9COUMsZ0JBQWM7QUFDWitDLGNBQVUsQ0FERTtBQUVaQyxnQkFBWSxDQUZBO0FBR1pDLG1CQUFlLFFBSEg7QUFJWkMsY0FBVSxRQUpFLEVBRGlCOztBQU8vQm5ELGtCQUFnQjtBQUNkZ0QsY0FBVSxDQURJO0FBRWRDLGdCQUFZLENBRkU7QUFHZEMsbUJBQWUsS0FIRDtBQUlkQyxjQUFVLFFBSkksRUFQZTs7QUFhL0JwRSw4QkFBNEI7QUFDMUJtRSxtQkFBZSxLQURXLEVBYkcsRUFBbEIsQ0FBZjs7OztBQWtCQUUsT0FBT0MsT0FBUCxHQUFpQlAsZUFBakIiLCJmaWxlIjoiU2Nyb2xsVmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCdBbmltYXRlZEltcGxlbWVudGF0aW9uJyk7XG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJ1BsYXRmb3JtJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ1JlYWN0Jyk7XG5jb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJ1JlYWN0TmF0aXZlJyk7XG5jb25zdCBTY3JvbGxSZXNwb25kZXIgPSByZXF1aXJlKCdTY3JvbGxSZXNwb25kZXInKTtcbmNvbnN0IFNjcm9sbFZpZXdTdGlja3lIZWFkZXIgPSByZXF1aXJlKCdTY3JvbGxWaWV3U3RpY2t5SGVhZGVyJyk7XG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnU3R5bGVTaGVldCcpO1xuY29uc3QgVmlldyA9IHJlcXVpcmUoJ1ZpZXcnKTtcbmNvbnN0IEludGVybmFsU2Nyb2xsVmlld1R5cGUgPSByZXF1aXJlKCdJbnRlcm5hbFNjcm9sbFZpZXdUeXBlJyk7XG5cbmNvbnN0IGNyZWF0ZVJlYWN0Q2xhc3MgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MnKTtcbmNvbnN0IGRpc21pc3NLZXlib2FyZCA9IHJlcXVpcmUoJ2Rpc21pc3NLZXlib2FyZCcpO1xuY29uc3QgZmxhdHRlblN0eWxlID0gcmVxdWlyZSgnZmxhdHRlblN0eWxlJyk7XG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbmNvbnN0IHByb2Nlc3NEZWNlbGVyYXRpb25SYXRlID0gcmVxdWlyZSgncHJvY2Vzc0RlY2VsZXJhdGlvblJhdGUnKTtcbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCdyZXF1aXJlTmF0aXZlQ29tcG9uZW50Jyk7XG5jb25zdCB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuY29uc3QgcmVzb2x2ZUFzc2V0U291cmNlID0gcmVxdWlyZSgncmVzb2x2ZUFzc2V0U291cmNlJyk7XG5cbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICdDb3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQgdHlwZSB7RWRnZUluc2V0c1Byb3B9IGZyb20gJ0VkZ2VJbnNldHNQcm9wVHlwZSc7XG5pbXBvcnQgdHlwZSB7TmF0aXZlTWV0aG9kc01peGluVHlwZX0gZnJvbSAnUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSB7Vmlld1N0eWxlUHJvcH0gZnJvbSAnU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICdWaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtQb2ludFByb3B9IGZyb20gJ1BvaW50UHJvcFR5cGUnO1xuXG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnU3R5bGVTaGVldFR5cGVzJztcblxubGV0IEFuZHJvaWRTY3JvbGxWaWV3O1xubGV0IEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsQ29udGVudFZpZXc7XG5sZXQgQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3O1xubGV0IFJDVFNjcm9sbFZpZXc7XG5sZXQgUkNUU2Nyb2xsQ29udGVudFZpZXc7XG5cbmlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gIEFuZHJvaWRTY3JvbGxWaWV3ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuICBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXcgPSByZXF1aXJlTmF0aXZlQ29tcG9uZW50KFxuICAgICdBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXcnLFxuICApO1xuICBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudChcbiAgICAnQW5kcm9pZEhvcml6b250YWxTY3JvbGxDb250ZW50VmlldycsXG4gICk7XG59IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICBSQ1RTY3JvbGxWaWV3ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuICBSQ1RTY3JvbGxDb250ZW50VmlldyA9IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoJ1JDVFNjcm9sbENvbnRlbnRWaWV3Jyk7XG59IGVsc2Uge1xuICBSQ1RTY3JvbGxWaWV3ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuICBSQ1RTY3JvbGxDb250ZW50VmlldyA9IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoJ1JDVFNjcm9sbENvbnRlbnRWaWV3Jyk7XG59XG5cbnR5cGUgVG91Y2hhYmxlUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgb25Ub3VjaFN0YXJ0PzogKGV2ZW50OiBQcmVzc0V2ZW50KSA9PiB2b2lkLFxuICBvblRvdWNoTW92ZT86IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25Ub3VjaEVuZD86IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25Ub3VjaENhbmNlbD86IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25Ub3VjaEVuZENhcHR1cmU/OiAoZXZlbnQ6IFByZXNzRXZlbnQpID0+IHZvaWQsXG58fT47XG5cbnR5cGUgSU9TUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgaU9TIHNob3VsZCBhdXRvbWF0aWNhbGx5IGFkanVzdCB0aGUgY29udGVudCBpbnNldFxuICAgKiBmb3Igc2Nyb2xsIHZpZXdzIHRoYXQgYXJlIHBsYWNlZCBiZWhpbmQgYSBuYXZpZ2F0aW9uIGJhciBvclxuICAgKiB0YWIgYmFyLyB0b29sYmFyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhdXRvbWF0aWNhbGx5QWRqdXN0Q29udGVudEluc2V0cz86ID9ib29sZWFuLFxuICAvKipcbiAgICogVGhlIGFtb3VudCBieSB3aGljaCB0aGUgc2Nyb2xsIHZpZXcgY29udGVudCBpcyBpbnNldCBmcm9tIHRoZSBlZGdlc1xuICAgKiBvZiB0aGUgc2Nyb2xsIHZpZXcuIERlZmF1bHRzIHRvIGB7dG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwfWAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNvbnRlbnRJbnNldD86ID9FZGdlSW5zZXRzUHJvcCxcbiAgLyoqXG4gICAqIFVzZWQgdG8gbWFudWFsbHkgc2V0IHRoZSBzdGFydGluZyBzY3JvbGwgb2Zmc2V0LlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBge3g6IDAsIHk6IDB9YC5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgY29udGVudE9mZnNldD86ID9Qb2ludFByb3AsXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBzY3JvbGwgdmlldyBib3VuY2VzIHdoZW4gaXQgcmVhY2hlcyB0aGUgZW5kIG9mIHRoZVxuICAgKiBjb250ZW50IGlmIHRoZSBjb250ZW50IGlzIGxhcmdlciB0aGVuIHRoZSBzY3JvbGwgdmlldyBhbG9uZyB0aGUgYXhpcyBvZlxuICAgKiB0aGUgc2Nyb2xsIGRpcmVjdGlvbi4gV2hlbiBmYWxzZSwgaXQgZGlzYWJsZXMgYWxsIGJvdW5jaW5nIGV2ZW4gaWZcbiAgICogdGhlIGBhbHdheXNCb3VuY2UqYCBwcm9wcyBhcmUgdHJ1ZS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYm91bmNlcz86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCBnZXN0dXJlcyBjYW4gZHJpdmUgem9vbSBwYXN0IG1pbi9tYXggYW5kIHRoZSB6b29tIHdpbGwgYW5pbWF0ZVxuICAgKiB0byB0aGUgbWluL21heCB2YWx1ZSBhdCBnZXN0dXJlIGVuZCwgb3RoZXJ3aXNlIHRoZSB6b29tIHdpbGwgbm90IGV4Y2VlZFxuICAgKiB0aGUgbGltaXRzLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBib3VuY2VzWm9vbT86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcgYm91bmNlcyBob3Jpem9udGFsbHkgd2hlbiBpdCByZWFjaGVzIHRoZSBlbmRcbiAgICogZXZlbiBpZiB0aGUgY29udGVudCBpcyBzbWFsbGVyIHRoYW4gdGhlIHNjcm9sbCB2aWV3IGl0c2VsZi4gVGhlIGRlZmF1bHRcbiAgICogdmFsdWUgaXMgdHJ1ZSB3aGVuIGBob3Jpem9udGFsPXt0cnVlfWAgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYWx3YXlzQm91bmNlSG9yaXpvbnRhbD86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcgYm91bmNlcyB2ZXJ0aWNhbGx5IHdoZW4gaXQgcmVhY2hlcyB0aGUgZW5kXG4gICAqIGV2ZW4gaWYgdGhlIGNvbnRlbnQgaXMgc21hbGxlciB0aGFuIHRoZSBzY3JvbGwgdmlldyBpdHNlbGYuIFRoZSBkZWZhdWx0XG4gICAqIHZhbHVlIGlzIGZhbHNlIHdoZW4gYGhvcml6b250YWw9e3RydWV9YCBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGFsd2F5c0JvdW5jZVZlcnRpY2FsPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBzY3JvbGwgdmlldyBhdXRvbWF0aWNhbGx5IGNlbnRlcnMgdGhlIGNvbnRlbnQgd2hlbiB0aGVcbiAgICogY29udGVudCBpcyBzbWFsbGVyIHRoYW4gdGhlIHNjcm9sbCB2aWV3IGJvdW5kczsgd2hlbiB0aGUgY29udGVudCBpc1xuICAgKiBsYXJnZXIgdGhhbiB0aGUgc2Nyb2xsIHZpZXcsIHRoaXMgcHJvcGVydHkgaGFzIG5vIGVmZmVjdC4gVGhlIGRlZmF1bHRcbiAgICogdmFsdWUgaXMgZmFsc2UuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNlbnRlckNvbnRlbnQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFRoZSBzdHlsZSBvZiB0aGUgc2Nyb2xsIGluZGljYXRvcnMuXG4gICAqXG4gICAqICAgLSBgJ2RlZmF1bHQnYCAodGhlIGRlZmF1bHQpLCBzYW1lIGFzIGBibGFja2AuXG4gICAqICAgLSBgJ2JsYWNrJ2AsIHNjcm9sbCBpbmRpY2F0b3IgaXMgYmxhY2suIFRoaXMgc3R5bGUgaXMgZ29vZCBhZ2FpbnN0IGEgbGlnaHQgYmFja2dyb3VuZC5cbiAgICogICAtIGAnd2hpdGUnYCwgc2Nyb2xsIGluZGljYXRvciBpcyB3aGl0ZS4gVGhpcyBzdHlsZSBpcyBnb29kIGFnYWluc3QgYSBkYXJrIGJhY2tncm91bmQuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGluZGljYXRvclN0eWxlPzogPygnZGVmYXVsdCcgfCAnYmxhY2snIHwgJ3doaXRlJyksXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBTY3JvbGxWaWV3IHdpbGwgdHJ5IHRvIGxvY2sgdG8gb25seSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsXG4gICAqIHNjcm9sbGluZyB3aGlsZSBkcmFnZ2luZy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBkaXJlY3Rpb25hbExvY2tFbmFibGVkPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIGZhbHNlLCBvbmNlIHRyYWNraW5nIHN0YXJ0cywgd29uJ3QgdHJ5IHRvIGRyYWcgaWYgdGhlIHRvdWNoIG1vdmVzLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBjYW5DYW5jZWxDb250ZW50VG91Y2hlcz86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiBzZXQsIHRoZSBzY3JvbGwgdmlldyB3aWxsIGFkanVzdCB0aGUgc2Nyb2xsIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGZpcnN0IGNoaWxkIHRoYXQgaXNcbiAgICogY3VycmVudGx5IHZpc2libGUgYW5kIGF0IG9yIGJleW9uZCBgbWluSW5kZXhGb3JWaXNpYmxlYCB3aWxsIG5vdCBjaGFuZ2UgcG9zaXRpb24uIFRoaXMgaXNcbiAgICogdXNlZnVsIGZvciBsaXN0cyB0aGF0IGFyZSBsb2FkaW5nIGNvbnRlbnQgaW4gYm90aCBkaXJlY3Rpb25zLCBlLmcuIGEgY2hhdCB0aHJlYWQsIHdoZXJlIG5ld1xuICAgKiBtZXNzYWdlcyBjb21pbmcgaW4gbWlnaHQgb3RoZXJ3aXNlIGNhdXNlIHRoZSBzY3JvbGwgcG9zaXRpb24gdG8ganVtcC4gQSB2YWx1ZSBvZiAwIGlzIGNvbW1vbixcbiAgICogYnV0IG90aGVyIHZhbHVlcyBzdWNoIGFzIDEgY2FuIGJlIHVzZWQgdG8gc2tpcCBsb2FkaW5nIHNwaW5uZXJzIG9yIG90aGVyIGNvbnRlbnQgdGhhdCBzaG91bGRcbiAgICogbm90IG1haW50YWluIHBvc2l0aW9uLlxuICAgKlxuICAgKiBUaGUgb3B0aW9uYWwgYGF1dG9zY3JvbGxUb1RvcFRocmVzaG9sZGAgY2FuIGJlIHVzZWQgdG8gbWFrZSB0aGUgY29udGVudCBhdXRvbWF0aWNhbGx5IHNjcm9sbFxuICAgKiB0byB0aGUgdG9wIGFmdGVyIG1ha2luZyB0aGUgYWRqdXN0bWVudCBpZiB0aGUgdXNlciB3YXMgd2l0aGluIHRoZSB0aHJlc2hvbGQgb2YgdGhlIHRvcCBiZWZvcmVcbiAgICogdGhlIGFkanVzdG1lbnQgd2FzIG1hZGUuIFRoaXMgaXMgYWxzbyB1c2VmdWwgZm9yIGNoYXQtbGlrZSBhcHBsaWNhdGlvbnMgd2hlcmUgeW91IHdhbnQgdG8gc2VlXG4gICAqIG5ldyBtZXNzYWdlcyBzY3JvbGwgaW50byBwbGFjZSwgYnV0IG5vdCBpZiB0aGUgdXNlciBoYXMgc2Nyb2xsZWQgdXAgYSB3YXlzIGFuZCBpdCB3b3VsZCBiZVxuICAgKiBkaXNydXB0aXZlIHRvIHNjcm9sbCBhIGJ1bmNoLlxuICAgKlxuICAgKiBDYXZlYXQgMTogUmVvcmRlcmluZyBlbGVtZW50cyBpbiB0aGUgc2Nyb2xsdmlldyB3aXRoIHRoaXMgZW5hYmxlZCB3aWxsIHByb2JhYmx5IGNhdXNlXG4gICAqIGp1bXBpbmVzcyBhbmQgamFuay4gSXQgY2FuIGJlIGZpeGVkLCBidXQgdGhlcmUgYXJlIGN1cnJlbnRseSBubyBwbGFucyB0byBkbyBzby4gRm9yIG5vdyxcbiAgICogZG9uJ3QgcmUtb3JkZXIgdGhlIGNvbnRlbnQgb2YgYW55IFNjcm9sbFZpZXdzIG9yIExpc3RzIHRoYXQgdXNlIHRoaXMgZmVhdHVyZS5cbiAgICpcbiAgICogQ2F2ZWF0IDI6IFRoaXMgc2ltcGx5IHVzZXMgYGNvbnRlbnRPZmZzZXRgIGFuZCBgZnJhbWUub3JpZ2luYCBpbiBuYXRpdmUgY29kZSB0byBjb21wdXRlXG4gICAqIHZpc2liaWxpdHkuIE9jY2x1c2lvbiwgdHJhbnNmb3JtcywgYW5kIG90aGVyIGNvbXBsZXhpdHkgd29uJ3QgYmUgdGFrZW4gaW50byBhY2NvdW50IGFzIHRvXG4gICAqIHdoZXRoZXIgY29udGVudCBpcyBcInZpc2libGVcIiBvciBub3QuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbj86ID8kUmVhZE9ubHk8e3xcbiAgICBtaW5JbmRleEZvclZpc2libGU6IG51bWJlcixcbiAgICBhdXRvc2Nyb2xsVG9Ub3BUaHJlc2hvbGQ/OiA/bnVtYmVyLFxuICB8fT4sXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIHpvb20gc2NhbGUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDEuMC5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgbWF4aW11bVpvb21TY2FsZT86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBhbGxvd2VkIHpvb20gc2NhbGUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDEuMC5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgbWluaW11bVpvb21TY2FsZT86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIFNjcm9sbFZpZXcgYWxsb3dzIHVzZSBvZiBwaW5jaCBnZXN0dXJlcyB0byB6b29tIGluIGFuZCBvdXQuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHBpbmNoR2VzdHVyZUVuYWJsZWQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFRoaXMgY29udHJvbHMgaG93IG9mdGVuIHRoZSBzY3JvbGwgZXZlbnQgd2lsbCBiZSBmaXJlZCB3aGlsZSBzY3JvbGxpbmdcbiAgICogKGFzIGEgdGltZSBpbnRlcnZhbCBpbiBtcykuIEEgbG93ZXIgbnVtYmVyIHlpZWxkcyBiZXR0ZXIgYWNjdXJhY3kgZm9yIGNvZGVcbiAgICogdGhhdCBpcyB0cmFja2luZyB0aGUgc2Nyb2xsIHBvc2l0aW9uLCBidXQgY2FuIGxlYWQgdG8gc2Nyb2xsIHBlcmZvcm1hbmNlXG4gICAqIHByb2JsZW1zIGR1ZSB0byB0aGUgdm9sdW1lIG9mIGluZm9ybWF0aW9uIGJlaW5nIHNlbmQgb3ZlciB0aGUgYnJpZGdlLlxuICAgKiBZb3Ugd2lsbCBub3Qgbm90aWNlIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIHZhbHVlcyBzZXQgYmV0d2VlbiAxLTE2IGFzIHRoZVxuICAgKiBKUyBydW4gbG9vcCBpcyBzeW5jZWQgdG8gdGhlIHNjcmVlbiByZWZyZXNoIHJhdGUuIElmIHlvdSBkbyBub3QgbmVlZCBwcmVjaXNlXG4gICAqIHNjcm9sbCBwb3NpdGlvbiB0cmFja2luZywgc2V0IHRoaXMgdmFsdWUgaGlnaGVyIHRvIGxpbWl0IHRoZSBpbmZvcm1hdGlvblxuICAgKiBiZWluZyBzZW50IGFjcm9zcyB0aGUgYnJpZGdlLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB6ZXJvLCB3aGljaCByZXN1bHRzIGluXG4gICAqIHRoZSBzY3JvbGwgZXZlbnQgYmVpbmcgc2VudCBvbmx5IG9uY2UgZWFjaCB0aW1lIHRoZSB2aWV3IGlzIHNjcm9sbGVkLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzY3JvbGxFdmVudFRocm90dGxlPzogP251bWJlcixcbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgYnkgd2hpY2ggdGhlIHNjcm9sbCB2aWV3IGluZGljYXRvcnMgYXJlIGluc2V0IGZyb20gdGhlIGVkZ2VzXG4gICAqIG9mIHRoZSBzY3JvbGwgdmlldy4gVGhpcyBzaG91bGQgbm9ybWFsbHkgYmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlIGFzXG4gICAqIHRoZSBgY29udGVudEluc2V0YC4gRGVmYXVsdHMgdG8gYHswLCAwLCAwLCAwfWAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbEluZGljYXRvckluc2V0cz86ID9FZGdlSW5zZXRzUHJvcCxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IHNjcm9sbHMgdG8gdG9wIHdoZW4gdGhlIHN0YXR1cyBiYXIgaXMgdGFwcGVkLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzY3JvbGxzVG9Ub3A/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgc2hvd3MgYSBob3Jpem9udGFsIHNjcm9sbCBpbmRpY2F0b3IuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICBzaG93c0hvcml6b250YWxTY3JvbGxJbmRpY2F0b3I/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gYHNuYXBUb0ludGVydmFsYCBpcyBzZXQsIGBzbmFwVG9BbGlnbm1lbnRgIHdpbGwgZGVmaW5lIHRoZSByZWxhdGlvbnNoaXBcbiAgICogb2YgdGhlIHNuYXBwaW5nIHRvIHRoZSBzY3JvbGwgdmlldy5cbiAgICpcbiAgICogICAtIGAnc3RhcnQnYCAodGhlIGRlZmF1bHQpIHdpbGwgYWxpZ24gdGhlIHNuYXAgYXQgdGhlIGxlZnQgKGhvcml6b250YWwpIG9yIHRvcCAodmVydGljYWwpXG4gICAqICAgLSBgJ2NlbnRlcidgIHdpbGwgYWxpZ24gdGhlIHNuYXAgaW4gdGhlIGNlbnRlclxuICAgKiAgIC0gYCdlbmQnYCB3aWxsIGFsaWduIHRoZSBzbmFwIGF0IHRoZSByaWdodCAoaG9yaXpvbnRhbCkgb3IgYm90dG9tICh2ZXJ0aWNhbClcbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgc25hcFRvQWxpZ25tZW50PzogPygnc3RhcnQnIHwgJ2NlbnRlcicgfCAnZW5kJyksXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBzY2FsZSBvZiB0aGUgc2Nyb2xsIHZpZXcgY29udGVudC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMS4wLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB6b29tU2NhbGU/OiA/bnVtYmVyLFxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBzcGVjaWZpZXMgaG93IHRoZSBzYWZlIGFyZWEgaW5zZXRzIGFyZSB1c2VkIHRvIG1vZGlmeSB0aGVcbiAgICogY29udGVudCBhcmVhIG9mIHRoZSBzY3JvbGwgdmlldy4gVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSBpc1xuICAgKiBcIm5ldmVyXCIuIEF2YWlsYWJsZSBvbiBpT1MgMTEgYW5kIGxhdGVyLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBjb250ZW50SW5zZXRBZGp1c3RtZW50QmVoYXZpb3I/OiA/KFxuICAgIHwgJ2F1dG9tYXRpYydcbiAgICB8ICdzY3JvbGxhYmxlQXhlcydcbiAgICB8ICduZXZlcidcbiAgICB8ICdhbHdheXMnXG4gICksXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIFNjcm9sbFZpZXcgd2lsbCBlbWl0IHVwZGF0ZUNoaWxkRnJhbWVzIGRhdGEgaW4gc2Nyb2xsIGV2ZW50cyxcbiAgICogb3RoZXJ3aXNlIHdpbGwgbm90IGNvbXB1dGUgb3IgZW1pdCBjaGlsZCBmcmFtZSBkYXRhLiAgVGhpcyBvbmx5IGV4aXN0c1xuICAgKiB0byBzdXBwb3J0IGxlZ2FjeSBpc3N1ZXMsIGBvbkxheW91dGAgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCB0byByZXRyaWV2ZVxuICAgKiBmcmFtZSBkYXRhLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgREVQUkVDQVRFRF9zZW5kVXBkYXRlZENoaWxkRnJhbWVzPzogP2Jvb2xlYW4sXG58fT47XG5cbnR5cGUgQW5kcm9pZFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC8qKlxuICAgKiBFbmFibGVzIG5lc3RlZCBzY3JvbGxpbmcgZm9yIEFuZHJvaWQgQVBJIGxldmVsIDIxKy5cbiAgICogTmVzdGVkIHNjcm9sbGluZyBpcyBzdXBwb3J0ZWQgYnkgZGVmYXVsdCBvbiBpT1NcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIG5lc3RlZFNjcm9sbEVuYWJsZWQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFNvbWV0aW1lcyBhIHNjcm9sbHZpZXcgdGFrZXMgdXAgbW9yZSBzcGFjZSB0aGFuIGl0cyBjb250ZW50IGZpbGxzLiBXaGVuIHRoaXMgaXNcbiAgICogdGhlIGNhc2UsIHRoaXMgcHJvcCB3aWxsIGZpbGwgdGhlIHJlc3Qgb2YgdGhlIHNjcm9sbHZpZXcgd2l0aCBhIGNvbG9yIHRvIGF2b2lkIHNldHRpbmdcbiAgICogYSBiYWNrZ3JvdW5kIGFuZCBjcmVhdGluZyB1bm5lY2Vzc2FyeSBvdmVyZHJhdy4gVGhpcyBpcyBhbiBhZHZhbmNlZCBvcHRpbWl6YXRpb25cbiAgICogdGhhdCBpcyBub3QgbmVlZGVkIGluIHRoZSBnZW5lcmFsIGNhc2UuXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBlbmRGaWxsQ29sb3I/OiA/Q29sb3JWYWx1ZSxcbiAgLyoqXG4gICAqIFRhZyB1c2VkIHRvIGxvZyBzY3JvbGwgcGVyZm9ybWFuY2Ugb24gdGhpcyBzY3JvbGwgdmlldy4gV2lsbCBmb3JjZVxuICAgKiBtb21lbnR1bSBldmVudHMgdG8gYmUgdHVybmVkIG9uIChzZWUgc2VuZE1vbWVudHVtRXZlbnRzKS4gVGhpcyBkb2Vzbid0IGRvXG4gICAqIGFueXRoaW5nIG91dCBvZiB0aGUgYm94IGFuZCB5b3UgbmVlZCB0byBpbXBsZW1lbnQgYSBjdXN0b20gbmF0aXZlXG4gICAqIEZwc0xpc3RlbmVyIGZvciBpdCB0byBiZSB1c2VmdWwuXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBzY3JvbGxQZXJmVGFnPzogP3N0cmluZyxcbiAgLyoqXG4gICAqIFVzZWQgdG8gb3ZlcnJpZGUgZGVmYXVsdCB2YWx1ZSBvZiBvdmVyU2Nyb2xsIG1vZGUuXG4gICAqXG4gICAqIFBvc3NpYmxlIHZhbHVlczpcbiAgICpcbiAgICogIC0gYCdhdXRvJ2AgLSBEZWZhdWx0IHZhbHVlLCBhbGxvdyBhIHVzZXIgdG8gb3Zlci1zY3JvbGxcbiAgICogICAgdGhpcyB2aWV3IG9ubHkgaWYgdGhlIGNvbnRlbnQgaXMgbGFyZ2UgZW5vdWdoIHRvIG1lYW5pbmdmdWxseSBzY3JvbGwuXG4gICAqICAtIGAnYWx3YXlzJ2AgLSBBbHdheXMgYWxsb3cgYSB1c2VyIHRvIG92ZXItc2Nyb2xsIHRoaXMgdmlldy5cbiAgICogIC0gYCduZXZlcidgIC0gTmV2ZXIgYWxsb3cgYSB1c2VyIHRvIG92ZXItc2Nyb2xsIHRoaXMgdmlldy5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIG92ZXJTY3JvbGxNb2RlPzogPygnYXV0bycgfCAnYWx3YXlzJyB8ICduZXZlcicpLFxufH0+O1xuXG50eXBlIFZSUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgYW4gaW1hZ2UgY2FuIGJlIHVzZWQgZm9yIHRoZSBzY3JvbGwgYmFyIHRodW1iLiBUaGlzIHdpbGxcbiAgICogb3ZlcnJpZGUgdGhlIGNvbG9yLiBXaGlsZSB0aGUgaW1hZ2UgaXMgbG9hZGluZyBvciB0aGUgaW1hZ2UgZmFpbHMgdG9cbiAgICogbG9hZCB0aGUgY29sb3Igd2lsbCBiZSB1c2VkIGluc3RlYWQuIFVzZSBhbiBhbHBoYSBvZiAwIGluIHRoZSBjb2xvclxuICAgKiB0byBhdm9pZCBzZWVpbmcgaXQgd2hpbGUgdGhlIGltYWdlIGlzIGxvYWRpbmcuXG4gICAqXG4gICAqIC0gYHVyaWAgLSBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJlc291cmNlIGlkZW50aWZpZXIgZm9yIHRoZSBpbWFnZSwgd2hpY2hcbiAgICogc2hvdWxkIGJlIGVpdGhlciBhIGxvY2FsIGZpbGUgcGF0aCBvciB0aGUgbmFtZSBvZiBhIHN0YXRpYyBpbWFnZSByZXNvdXJjZVxuICAgKiAtIGBudW1iZXJgIC0gT3BhcXVlIHR5cGUgcmV0dXJuZWQgYnkgc29tZXRoaW5nIGxpa2VcbiAgICogYGltcG9ydCBJTUFHRSBmcm9tICcuL2ltYWdlLmpwZydgLlxuICAgKiBAcGxhdGZvcm0gdnJcbiAgICovXG4gIHNjcm9sbEJhclRodW1iSW1hZ2U/OiA/KCRSZWFkT25seTx7fHx9PiB8IG51bWJlciksIC8vIE9wYXF1ZSB0eXBlIHJldHVybmVkIGJ5IGltcG9ydCBJTUFHRSBmcm9tICcuL2ltYWdlLmpwZydcbnx9PjtcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxuICAuLi5Ub3VjaGFibGVQcm9wcyxcbiAgLi4uSU9TUHJvcHMsXG4gIC4uLkFuZHJvaWRQcm9wcyxcbiAgLi4uVlJQcm9wcyxcblxuICAvKipcbiAgICogVGhlc2Ugc3R5bGVzIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgc2Nyb2xsIHZpZXcgY29udGVudCBjb250YWluZXIgd2hpY2hcbiAgICogd3JhcHMgYWxsIG9mIHRoZSBjaGlsZCB2aWV3cy4gRXhhbXBsZTpcbiAgICpcbiAgICogYGBgXG4gICAqIHJldHVybiAoXG4gICAqICAgPFNjcm9sbFZpZXcgY29udGVudENvbnRhaW5lclN0eWxlPXtzdHlsZXMuY29udGVudENvbnRhaW5lcn0+XG4gICAqICAgPC9TY3JvbGxWaWV3PlxuICAgKiApO1xuICAgKiAuLi5cbiAgICogY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgKiAgIGNvbnRlbnRDb250YWluZXI6IHtcbiAgICogICAgIHBhZGRpbmdWZXJ0aWNhbDogMjBcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGNvbnRlbnRDb250YWluZXJTdHlsZT86ID9WaWV3U3R5bGVQcm9wLFxuICAvKipcbiAgICogQSBmbG9hdGluZy1wb2ludCBudW1iZXIgdGhhdCBkZXRlcm1pbmVzIGhvdyBxdWlja2x5IHRoZSBzY3JvbGwgdmlld1xuICAgKiBkZWNlbGVyYXRlcyBhZnRlciB0aGUgdXNlciBsaWZ0cyB0aGVpciBmaW5nZXIuIFlvdSBtYXkgYWxzbyB1c2Ugc3RyaW5nXG4gICAqIHNob3J0Y3V0cyBgXCJub3JtYWxcImAgYW5kIGBcImZhc3RcImAgd2hpY2ggbWF0Y2ggdGhlIHVuZGVybHlpbmcgaU9TIHNldHRpbmdzXG4gICAqIGZvciBgVUlTY3JvbGxWaWV3RGVjZWxlcmF0aW9uUmF0ZU5vcm1hbGAgYW5kXG4gICAqIGBVSVNjcm9sbFZpZXdEZWNlbGVyYXRpb25SYXRlRmFzdGAgcmVzcGVjdGl2ZWx5LlxuICAgKlxuICAgKiAgIC0gYCdub3JtYWwnYDogMC45OTggb24gaU9TLCAwLjk4NSBvbiBBbmRyb2lkICh0aGUgZGVmYXVsdClcbiAgICogICAtIGAnZmFzdCdgOiAwLjk5IG9uIGlPUywgMC45IG9uIEFuZHJvaWRcbiAgICovXG4gIGRlY2VsZXJhdGlvblJhdGU/OiA/KCdmYXN0JyB8ICdub3JtYWwnIHwgbnVtYmVyKSxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3J3MgY2hpbGRyZW4gYXJlIGFycmFuZ2VkIGhvcml6b250YWxseSBpbiBhIHJvd1xuICAgKiBpbnN0ZWFkIG9mIHZlcnRpY2FsbHkgaW4gYSBjb2x1bW4uIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKi9cbiAgaG9yaXpvbnRhbD86ID9ib29sZWFuLFxuICAvKipcbiAgICogSWYgc3RpY2t5IGhlYWRlcnMgc2hvdWxkIHN0aWNrIGF0IHRoZSBib3R0b20gaW5zdGVhZCBvZiB0aGUgdG9wIG9mIHRoZVxuICAgKiBTY3JvbGxWaWV3LiBUaGlzIGlzIHVzdWFsbHkgdXNlZCB3aXRoIGludmVydGVkIFNjcm9sbFZpZXdzLlxuICAgKi9cbiAgaW52ZXJ0U3RpY2t5SGVhZGVycz86ID9ib29sZWFuLFxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBrZXlib2FyZCBnZXRzIGRpc21pc3NlZCBpbiByZXNwb25zZSB0byBhIGRyYWcuXG4gICAqXG4gICAqICpDcm9zcyBwbGF0Zm9ybSpcbiAgICpcbiAgICogICAtIGAnbm9uZSdgICh0aGUgZGVmYXVsdCksIGRyYWdzIGRvIG5vdCBkaXNtaXNzIHRoZSBrZXlib2FyZC5cbiAgICogICAtIGAnb24tZHJhZydgLCB0aGUga2V5Ym9hcmQgaXMgZGlzbWlzc2VkIHdoZW4gYSBkcmFnIGJlZ2lucy5cbiAgICpcbiAgICogKmlPUyBPbmx5KlxuICAgKlxuICAgKiAgIC0gYCdpbnRlcmFjdGl2ZSdgLCB0aGUga2V5Ym9hcmQgaXMgZGlzbWlzc2VkIGludGVyYWN0aXZlbHkgd2l0aCB0aGUgZHJhZyBhbmQgbW92ZXMgaW5cbiAgICogICAgIHN5bmNocm9ueSB3aXRoIHRoZSB0b3VjaDsgZHJhZ2dpbmcgdXB3YXJkcyBjYW5jZWxzIHRoZSBkaXNtaXNzYWwuXG4gICAqICAgICBPbiBhbmRyb2lkIHRoaXMgaXMgbm90IHN1cHBvcnRlZCBhbmQgaXQgd2lsbCBoYXZlIHRoZSBzYW1lIGJlaGF2aW9yIGFzICdub25lJy5cbiAgICovXG4gIGtleWJvYXJkRGlzbWlzc01vZGU/OiA/KFxuICAgIHwgJ25vbmUnIC8vIGRlZmF1bHRcbiAgICB8ICdvbi1kcmFnJyAvLyBjcm9zcy1wbGF0Zm9ybVxuICAgIHwgJ2ludGVyYWN0aXZlJ1xuICApLCAvLyBpb3Mgb25seVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGVuIHRoZSBrZXlib2FyZCBzaG91bGQgc3RheSB2aXNpYmxlIGFmdGVyIGEgdGFwLlxuICAgKlxuICAgKiAgIC0gYCduZXZlcidgICh0aGUgZGVmYXVsdCksIHRhcHBpbmcgb3V0c2lkZSBvZiB0aGUgZm9jdXNlZCB0ZXh0IGlucHV0IHdoZW4gdGhlIGtleWJvYXJkXG4gICAqICAgICBpcyB1cCBkaXNtaXNzZXMgdGhlIGtleWJvYXJkLiBXaGVuIHRoaXMgaGFwcGVucywgY2hpbGRyZW4gd29uJ3QgcmVjZWl2ZSB0aGUgdGFwLlxuICAgKiAgIC0gYCdhbHdheXMnYCwgdGhlIGtleWJvYXJkIHdpbGwgbm90IGRpc21pc3MgYXV0b21hdGljYWxseSwgYW5kIHRoZSBzY3JvbGwgdmlldyB3aWxsIG5vdFxuICAgKiAgICAgY2F0Y2ggdGFwcywgYnV0IGNoaWxkcmVuIG9mIHRoZSBzY3JvbGwgdmlldyBjYW4gY2F0Y2ggdGFwcy5cbiAgICogICAtIGAnaGFuZGxlZCdgLCB0aGUga2V5Ym9hcmQgd2lsbCBub3QgZGlzbWlzcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIHRhcCB3YXMgaGFuZGxlZCBieVxuICAgKiAgICAgYSBjaGlsZHJlbiwgKG9yIGNhcHR1cmVkIGJ5IGFuIGFuY2VzdG9yKS5cbiAgICogICAtIGBmYWxzZWAsIGRlcHJlY2F0ZWQsIHVzZSAnbmV2ZXInIGluc3RlYWRcbiAgICogICAtIGB0cnVlYCwgZGVwcmVjYXRlZCwgdXNlICdhbHdheXMnIGluc3RlYWRcbiAgICovXG4gIC8vICRGbG93Rml4TWUoc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIElzc3VlcyBmb3VuZCB3aGVuIHR5cGluZyBTY3JvbGxWaWV3XG4gIGtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHM/OiA/KCdhbHdheXMnIHwgJ25ldmVyJyB8ICdoYW5kbGVkJyB8IGZhbHNlIHwgdHJ1ZSksXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgbW9tZW50dW0gc2Nyb2xsIHN0YXJ0cyAoc2Nyb2xsIHdoaWNoIG9jY3VycyBhcyB0aGUgU2Nyb2xsVmlldyBnbGlkZXMgdG8gYSBzdG9wKS5cbiAgICovXG4gIG9uTW9tZW50dW1TY3JvbGxCZWdpbj86ID9GdW5jdGlvbixcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBtb21lbnR1bSBzY3JvbGwgZW5kcyAoc2Nyb2xsIHdoaWNoIG9jY3VycyBhcyB0aGUgU2Nyb2xsVmlldyBnbGlkZXMgdG8gYSBzdG9wKS5cbiAgICovXG4gIG9uTW9tZW50dW1TY3JvbGxFbmQ/OiA/RnVuY3Rpb24sXG5cbiAgLyoqXG4gICAqIEZpcmVzIGF0IG1vc3Qgb25jZSBwZXIgZnJhbWUgZHVyaW5nIHNjcm9sbGluZy4gVGhlIGZyZXF1ZW5jeSBvZiB0aGVcbiAgICogZXZlbnRzIGNhbiBiZSBjb250cm9sbGVkIHVzaW5nIHRoZSBgc2Nyb2xsRXZlbnRUaHJvdHRsZWAgcHJvcC5cbiAgICovXG4gIG9uU2Nyb2xsPzogP0Z1bmN0aW9uLFxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgYmVnaW5zIHRvIGRyYWcgdGhlIHNjcm9sbCB2aWV3LlxuICAgKi9cbiAgb25TY3JvbGxCZWdpbkRyYWc/OiA/RnVuY3Rpb24sXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBzdG9wcyBkcmFnZ2luZyB0aGUgc2Nyb2xsIHZpZXcgYW5kIGl0IGVpdGhlciBzdG9wc1xuICAgKiBvciBiZWdpbnMgdG8gZ2xpZGUuXG4gICAqL1xuICBvblNjcm9sbEVuZERyYWc/OiA/RnVuY3Rpb24sXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBzY3JvbGxhYmxlIGNvbnRlbnQgdmlldyBvZiB0aGUgU2Nyb2xsVmlldyBjaGFuZ2VzLlxuICAgKlxuICAgKiBIYW5kbGVyIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgY29udGVudCB3aWR0aCBhbmQgY29udGVudCBoZWlnaHQgYXMgcGFyYW1ldGVyczpcbiAgICogYChjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQpYFxuICAgKlxuICAgKiBJdCdzIGltcGxlbWVudGVkIHVzaW5nIG9uTGF5b3V0IGhhbmRsZXIgYXR0YWNoZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVyXG4gICAqIHdoaWNoIHRoaXMgU2Nyb2xsVmlldyByZW5kZXJzLlxuICAgKi9cbiAgb25Db250ZW50U2l6ZUNoYW5nZT86ID9GdW5jdGlvbixcbiAgb25LZXlib2FyZERpZFNob3c/OiAoZXZlbnQ6IFByZXNzRXZlbnQpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBzY3JvbGwgdmlldyBzdG9wcyBvbiBtdWx0aXBsZXMgb2YgdGhlIHNjcm9sbCB2aWV3J3Mgc2l6ZVxuICAgKiB3aGVuIHNjcm9sbGluZy4gVGhpcyBjYW4gYmUgdXNlZCBmb3IgaG9yaXpvbnRhbCBwYWdpbmF0aW9uLiBUaGUgZGVmYXVsdFxuICAgKiB2YWx1ZSBpcyBmYWxzZS5cbiAgICpcbiAgICogTm90ZTogVmVydGljYWwgcGFnaW5hdGlvbiBpcyBub3Qgc3VwcG9ydGVkIG9uIEFuZHJvaWQuXG4gICAqL1xuICBwYWdpbmdFbmFibGVkPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIGZhbHNlLCB0aGUgdmlldyBjYW5ub3QgYmUgc2Nyb2xsZWQgdmlhIHRvdWNoIGludGVyYWN0aW9uLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIHZpZXcgY2FuIGFsd2F5cyBiZSBzY3JvbGxlZCBieSBjYWxsaW5nIGBzY3JvbGxUb2AuXG4gICAqL1xuICBzY3JvbGxFbmFibGVkPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHNob3dzIGEgdmVydGljYWwgc2Nyb2xsIGluZGljYXRvci5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGNoaWxkIGluZGljZXMgZGV0ZXJtaW5pbmcgd2hpY2ggY2hpbGRyZW4gZ2V0IGRvY2tlZCB0byB0aGVcbiAgICogdG9wIG9mIHRoZSBzY3JlZW4gd2hlbiBzY3JvbGxpbmcuIEZvciBleGFtcGxlLCBwYXNzaW5nXG4gICAqIGBzdGlja3lIZWFkZXJJbmRpY2VzPXtbMF19YCB3aWxsIGNhdXNlIHRoZSBmaXJzdCBjaGlsZCB0byBiZSBmaXhlZCB0byB0aGVcbiAgICogdG9wIG9mIHRoZSBzY3JvbGwgdmlldy4gVGhpcyBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkIGluIGNvbmp1bmN0aW9uXG4gICAqIHdpdGggYGhvcml6b250YWw9e3RydWV9YC5cbiAgICovXG4gIHN0aWNreUhlYWRlckluZGljZXM/OiA/JFJlYWRPbmx5QXJyYXk8bnVtYmVyPixcbiAgLyoqXG4gICAqIFdoZW4gc2V0LCBjYXVzZXMgdGhlIHNjcm9sbCB2aWV3IHRvIHN0b3AgYXQgbXVsdGlwbGVzIG9mIHRoZSB2YWx1ZSBvZlxuICAgKiBgc25hcFRvSW50ZXJ2YWxgLiBUaGlzIGNhbiBiZSB1c2VkIGZvciBwYWdpbmF0aW5nIHRocm91Z2ggY2hpbGRyZW5cbiAgICogdGhhdCBoYXZlIGxlbmd0aHMgc21hbGxlciB0aGFuIHRoZSBzY3JvbGwgdmlldy4gVHlwaWNhbGx5IHVzZWQgaW5cbiAgICogY29tYmluYXRpb24gd2l0aCBgc25hcFRvQWxpZ25tZW50YCBhbmQgYGRlY2VsZXJhdGlvblJhdGU9XCJmYXN0XCJgLlxuICAgKlxuICAgKiBPdmVycmlkZXMgbGVzcyBjb25maWd1cmFibGUgYHBhZ2luZ0VuYWJsZWRgIHByb3AuXG4gICAqL1xuICBzbmFwVG9JbnRlcnZhbD86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBXaGVuIHNldCwgY2F1c2VzIHRoZSBzY3JvbGwgdmlldyB0byBzdG9wIGF0IHRoZSBkZWZpbmVkIG9mZnNldHMuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgZm9yIHBhZ2luYXRpbmcgdGhyb3VnaCB2YXJpb3VzbHkgc2l6ZWQgY2hpbGRyZW5cbiAgICogdGhhdCBoYXZlIGxlbmd0aHMgc21hbGxlciB0aGFuIHRoZSBzY3JvbGwgdmlldy4gVHlwaWNhbGx5IHVzZWQgaW5cbiAgICogY29tYmluYXRpb24gd2l0aCBgZGVjZWxlcmF0aW9uUmF0ZT1cImZhc3RcImAuXG4gICAqXG4gICAqIE92ZXJyaWRlcyBsZXNzIGNvbmZpZ3VyYWJsZSBgcGFnaW5nRW5hYmxlZGAgYW5kIGBzbmFwVG9JbnRlcnZhbGAgcHJvcHMuXG4gICAqL1xuICBzbmFwVG9PZmZzZXRzPzogPyRSZWFkT25seUFycmF5PG51bWJlcj4sXG4gIC8qKlxuICAgKiBFeHBlcmltZW50YWw6IFdoZW4gdHJ1ZSwgb2Zmc2NyZWVuIGNoaWxkIHZpZXdzICh3aG9zZSBgb3ZlcmZsb3dgIHZhbHVlIGlzXG4gICAqIGBoaWRkZW5gKSBhcmUgcmVtb3ZlZCBmcm9tIHRoZWlyIG5hdGl2ZSBiYWNraW5nIHN1cGVydmlldyB3aGVuIG9mZnNjcmVlbi5cbiAgICogVGhpcyBjYW4gaW1wcm92ZSBzY3JvbGxpbmcgcGVyZm9ybWFuY2Ugb24gbG9uZyBsaXN0cy4gVGhlIGRlZmF1bHQgdmFsdWUgaXNcbiAgICogdHJ1ZS5cbiAgICovXG4gIHJlbW92ZUNsaXBwZWRTdWJ2aWV3cz86ID9ib29sZWFuLFxuICAvKipcbiAgICogQSBSZWZyZXNoQ29udHJvbCBjb21wb25lbnQsIHVzZWQgdG8gcHJvdmlkZSBwdWxsLXRvLXJlZnJlc2hcbiAgICogZnVuY3Rpb25hbGl0eSBmb3IgdGhlIFNjcm9sbFZpZXcuIE9ubHkgd29ya3MgZm9yIHZlcnRpY2FsIFNjcm9sbFZpZXdzXG4gICAqIChgaG9yaXpvbnRhbGAgcHJvcCBtdXN0IGJlIGBmYWxzZWApLlxuICAgKlxuICAgKiBTZWUgW1JlZnJlc2hDb250cm9sXShkb2NzL3JlZnJlc2hjb250cm9sLmh0bWwpLlxuICAgKi9cbiAgcmVmcmVzaENvbnRyb2w/OiA/UmVhY3QuRWxlbWVudDxhbnk+LFxuICBzdHlsZT86ID9WaWV3U3R5bGVQcm9wLFxuICBjaGlsZHJlbj86IFJlYWN0Lk5vZGUsXG58fT47XG5cbi8qKlxuICogQ29tcG9uZW50IHRoYXQgd3JhcHMgcGxhdGZvcm0gU2Nyb2xsVmlldyB3aGlsZSBwcm92aWRpbmdcbiAqIGludGVncmF0aW9uIHdpdGggdG91Y2ggbG9ja2luZyBcInJlc3BvbmRlclwiIHN5c3RlbS5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBTY3JvbGxWaWV3cyBtdXN0IGhhdmUgYSBib3VuZGVkIGhlaWdodCBpbiBvcmRlciB0byB3b3JrLFxuICogc2luY2UgdGhleSBjb250YWluIHVuYm91bmRlZC1oZWlnaHQgY2hpbGRyZW4gaW50byBhIGJvdW5kZWQgY29udGFpbmVyICh2aWFcbiAqIGEgc2Nyb2xsIGludGVyYWN0aW9uKS4gSW4gb3JkZXIgdG8gYm91bmQgdGhlIGhlaWdodCBvZiBhIFNjcm9sbFZpZXcsIGVpdGhlclxuICogc2V0IHRoZSBoZWlnaHQgb2YgdGhlIHZpZXcgZGlyZWN0bHkgKGRpc2NvdXJhZ2VkKSBvciBtYWtlIHN1cmUgYWxsIHBhcmVudFxuICogdmlld3MgaGF2ZSBib3VuZGVkIGhlaWdodC4gRm9yZ2V0dGluZyB0byB0cmFuc2ZlciBge2ZsZXg6IDF9YCBkb3duIHRoZVxuICogdmlldyBzdGFjayBjYW4gbGVhZCB0byBlcnJvcnMgaGVyZSwgd2hpY2ggdGhlIGVsZW1lbnQgaW5zcGVjdG9yIG1ha2VzXG4gKiBlYXN5IHRvIGRlYnVnLlxuICpcbiAqIERvZXNuJ3QgeWV0IHN1cHBvcnQgb3RoZXIgY29udGFpbmVkIHJlc3BvbmRlcnMgZnJvbSBibG9ja2luZyB0aGlzIHNjcm9sbFxuICogdmlldyBmcm9tIGJlY29taW5nIHRoZSByZXNwb25kZXIuXG4gKlxuICpcbiAqIGA8U2Nyb2xsVmlldz5gIHZzIFtgPEZsYXRMaXN0PmBdKC9yZWFjdC1uYXRpdmUvZG9jcy9mbGF0bGlzdC5odG1sKSAtIHdoaWNoIG9uZSB0byB1c2U/XG4gKlxuICogYFNjcm9sbFZpZXdgIHNpbXBseSByZW5kZXJzIGFsbCBpdHMgcmVhY3QgY2hpbGQgY29tcG9uZW50cyBhdCBvbmNlLiBUaGF0XG4gKiBtYWtlcyBpdCB2ZXJ5IGVhc3kgdG8gdW5kZXJzdGFuZCBhbmQgdXNlLlxuICpcbiAqIE9uIHRoZSBvdGhlciBoYW5kLCB0aGlzIGhhcyBhIHBlcmZvcm1hbmNlIGRvd25zaWRlLiBJbWFnaW5lIHlvdSBoYXZlIGEgdmVyeVxuICogbG9uZyBsaXN0IG9mIGl0ZW1zIHlvdSB3YW50IHRvIGRpc3BsYXksIG1heWJlIHNldmVyYWwgc2NyZWVucyB3b3J0aCBvZlxuICogY29udGVudC4gQ3JlYXRpbmcgSlMgY29tcG9uZW50cyBhbmQgbmF0aXZlIHZpZXdzIGZvciBldmVyeXRoaW5nIGFsbCBhdCBvbmNlLFxuICogbXVjaCBvZiB3aGljaCBtYXkgbm90IGV2ZW4gYmUgc2hvd24sIHdpbGwgY29udHJpYnV0ZSB0byBzbG93IHJlbmRlcmluZyBhbmRcbiAqIGluY3JlYXNlZCBtZW1vcnkgdXNhZ2UuXG4gKlxuICogVGhpcyBpcyB3aGVyZSBgRmxhdExpc3RgIGNvbWVzIGludG8gcGxheS4gYEZsYXRMaXN0YCByZW5kZXJzIGl0ZW1zIGxhemlseSxcbiAqIGp1c3Qgd2hlbiB0aGV5IGFyZSBhYm91dCB0byBhcHBlYXIsIGFuZCByZW1vdmVzIGl0ZW1zIHRoYXQgc2Nyb2xsIHdheSBvZmZcbiAqIHNjcmVlbiB0byBzYXZlIG1lbW9yeSBhbmQgcHJvY2Vzc2luZyB0aW1lLlxuICpcbiAqIGBGbGF0TGlzdGAgaXMgYWxzbyBoYW5keSBpZiB5b3Ugd2FudCB0byByZW5kZXIgc2VwYXJhdG9ycyBiZXR3ZWVuIHlvdXIgaXRlbXMsXG4gKiBtdWx0aXBsZSBjb2x1bW5zLCBpbmZpbml0ZSBzY3JvbGwgbG9hZGluZywgb3IgYW55IG51bWJlciBvZiBvdGhlciBmZWF0dXJlcyBpdFxuICogc3VwcG9ydHMgb3V0IG9mIHRoZSBib3guXG4gKi9cbmNvbnN0IFNjcm9sbFZpZXcgPSBjcmVhdGVSZWFjdENsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdTY3JvbGxWaWV3JyxcbiAgbWl4aW5zOiBbU2Nyb2xsUmVzcG9uZGVyLk1peGluXSxcblxuICBfc2Nyb2xsQW5pbWF0ZWRWYWx1ZTogKG5ldyBBbmltYXRlZEltcGxlbWVudGF0aW9uLlZhbHVlKFxuICAgIDAsXG4gICk6IEFuaW1hdGVkSW1wbGVtZW50YXRpb24uVmFsdWUpLFxuICBfc2Nyb2xsQW5pbWF0ZWRWYWx1ZUF0dGFjaG1lbnQ6IChudWxsOiA/e2RldGFjaDogKCkgPT4gdm9pZH0pLFxuICBfc3RpY2t5SGVhZGVyUmVmczogKG5ldyBNYXAoKTogTWFwPG51bWJlciwgU2Nyb2xsVmlld1N0aWNreUhlYWRlcj4pLFxuICBfaGVhZGVyTGF5b3V0WXM6IChuZXcgTWFwKCk6IE1hcDxzdHJpbmcsIG51bWJlcj4pLFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLnNjcm9sbFJlc3BvbmRlck1peGluR2V0SW5pdGlhbFN0YXRlKCksXG4gICAgICBsYXlvdXRIZWlnaHQ6IG51bGwsXG4gICAgfTtcbiAgfSxcblxuICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlID0gbmV3IEFuaW1hdGVkSW1wbGVtZW50YXRpb24uVmFsdWUoXG4gICAgICB0aGlzLnByb3BzLmNvbnRlbnRPZmZzZXQgPyB0aGlzLnByb3BzLmNvbnRlbnRPZmZzZXQueSA6IDAsXG4gICAgKTtcbiAgICB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlLnNldE9mZnNldChcbiAgICAgIHRoaXMucHJvcHMuY29udGVudEluc2V0ID8gdGhpcy5wcm9wcy5jb250ZW50SW5zZXQudG9wIDogMCxcbiAgICApO1xuICAgIHRoaXMuX3N0aWNreUhlYWRlclJlZnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5faGVhZGVyTGF5b3V0WXMgPSBuZXcgTWFwKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3VwZGF0ZUFuaW1hdGVkTm9kZUF0dGFjaG1lbnQoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3VwZGF0ZUFuaW1hdGVkTm9kZUF0dGFjaG1lbnQoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWVBdHRhY2htZW50KSB7XG4gICAgICB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudC5kZXRhY2goKTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uKHByb3BzOiBPYmplY3QpIHtcbiAgICB0aGlzLl9zY3JvbGxWaWV3UmVmICYmIHRoaXMuX3Njcm9sbFZpZXdSZWYuc2V0TmF0aXZlUHJvcHMocHJvcHMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSB1bmRlcmx5aW5nIHNjcm9sbCByZXNwb25kZXIsIHdoaWNoIHN1cHBvcnRzXG4gICAqIG9wZXJhdGlvbnMgbGlrZSBgc2Nyb2xsVG9gLiBBbGwgU2Nyb2xsVmlldy1saWtlIGNvbXBvbmVudHMgc2hvdWxkXG4gICAqIGltcGxlbWVudCB0aGlzIG1ldGhvZCBzbyB0aGF0IHRoZXkgY2FuIGJlIGNvbXBvc2VkIHdoaWxlIHByb3ZpZGluZyBhY2Nlc3NcbiAgICogdG8gdGhlIHVuZGVybHlpbmcgc2Nyb2xsIHJlc3BvbmRlcidzIG1ldGhvZHMuXG4gICAqL1xuICBnZXRTY3JvbGxSZXNwb25kZXI6IGZ1bmN0aW9uKCk6IFNjcm9sbFZpZXcge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGdldFNjcm9sbGFibGVOb2RlOiBmdW5jdGlvbigpOiBhbnkge1xuICAgIHJldHVybiBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9zY3JvbGxWaWV3UmVmKTtcbiAgfSxcblxuICBnZXRJbm5lclZpZXdOb2RlOiBmdW5jdGlvbigpOiBhbnkge1xuICAgIHJldHVybiBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9pbm5lclZpZXdSZWYpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRvIGEgZ2l2ZW4geCwgeSBvZmZzZXQsIGVpdGhlciBpbW1lZGlhdGVseSBvciB3aXRoIGEgc21vb3RoIGFuaW1hdGlvbi5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogYHNjcm9sbFRvKHt4OiAwLCB5OiAwLCBhbmltYXRlZDogdHJ1ZX0pYFxuICAgKlxuICAgKiBOb3RlOiBUaGUgd2VpcmQgZnVuY3Rpb24gc2lnbmF0dXJlIGlzIGR1ZSB0byB0aGUgZmFjdCB0aGF0LCBmb3IgaGlzdG9yaWNhbCByZWFzb25zLFxuICAgKiB0aGUgZnVuY3Rpb24gYWxzbyBhY2NlcHRzIHNlcGFyYXRlIGFyZ3VtZW50cyBhcyBhbiBhbHRlcm5hdGl2ZSB0byB0aGUgb3B0aW9ucyBvYmplY3QuXG4gICAqIFRoaXMgaXMgZGVwcmVjYXRlZCBkdWUgdG8gYW1iaWd1aXR5ICh5IGJlZm9yZSB4KSwgYW5kIFNIT1VMRCBOT1QgQkUgVVNFRC5cbiAgICovXG4gIHNjcm9sbFRvOiBmdW5jdGlvbihcbiAgICB5PzogbnVtYmVyIHwge3g/OiBudW1iZXIsIHk/OiBudW1iZXIsIGFuaW1hdGVkPzogYm9vbGVhbn0sXG4gICAgeD86IG51bWJlcixcbiAgICBhbmltYXRlZD86IGJvb2xlYW4sXG4gICkge1xuICAgIGlmICh0eXBlb2YgeSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ2BzY3JvbGxUbyh5LCB4LCBhbmltYXRlZClgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgc2Nyb2xsVG8oe3g6IDUsIHk6IDUsICcgK1xuICAgICAgICAgICdhbmltYXRlZDogdHJ1ZX0pYCBpbnN0ZWFkLicsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAoe3gsIHksIGFuaW1hdGVkfSA9IHkgfHwge30pO1xuICAgIH1cbiAgICB0aGlzLmdldFNjcm9sbFJlc3BvbmRlcigpLnNjcm9sbFJlc3BvbmRlclNjcm9sbFRvKHtcbiAgICAgIHg6IHggfHwgMCxcbiAgICAgIHk6IHkgfHwgMCxcbiAgICAgIGFuaW1hdGVkOiBhbmltYXRlZCAhPT0gZmFsc2UsXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgYSB2ZXJ0aWNhbCBTY3JvbGxWaWV3IHNjcm9sbHMgdG8gdGhlIGJvdHRvbS5cbiAgICogSWYgdGhpcyBpcyBhIGhvcml6b250YWwgU2Nyb2xsVmlldyBzY3JvbGxzIHRvIHRoZSByaWdodC5cbiAgICpcbiAgICogVXNlIGBzY3JvbGxUb0VuZCh7YW5pbWF0ZWQ6IHRydWV9KWAgZm9yIHNtb290aCBhbmltYXRlZCBzY3JvbGxpbmcsXG4gICAqIGBzY3JvbGxUb0VuZCh7YW5pbWF0ZWQ6IGZhbHNlfSlgIGZvciBpbW1lZGlhdGUgc2Nyb2xsaW5nLlxuICAgKiBJZiBubyBvcHRpb25zIGFyZSBwYXNzZWQsIGBhbmltYXRlZGAgZGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICovXG4gIHNjcm9sbFRvRW5kOiBmdW5jdGlvbihvcHRpb25zPzoge2FuaW1hdGVkPzogYm9vbGVhbn0pIHtcbiAgICAvLyBEZWZhdWx0IHRvIHRydWVcbiAgICBjb25zdCBhbmltYXRlZCA9IChvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZWQpICE9PSBmYWxzZTtcbiAgICB0aGlzLmdldFNjcm9sbFJlc3BvbmRlcigpLnNjcm9sbFJlc3BvbmRlclNjcm9sbFRvRW5kKHtcbiAgICAgIGFuaW1hdGVkOiBhbmltYXRlZCxcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogRGVwcmVjYXRlZCwgdXNlIGBzY3JvbGxUb2AgaW5zdGVhZC5cbiAgICovXG4gIHNjcm9sbFdpdGhvdXRBbmltYXRpb25UbzogZnVuY3Rpb24oeTogbnVtYmVyID0gMCwgeDogbnVtYmVyID0gMCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdgc2Nyb2xsV2l0aG91dEFuaW1hdGlvblRvYCBpcyBkZXByZWNhdGVkLiBVc2UgYHNjcm9sbFRvYCBpbnN0ZWFkJyxcbiAgICApO1xuICAgIHRoaXMuc2Nyb2xsVG8oe3gsIHksIGFuaW1hdGVkOiBmYWxzZX0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgc2Nyb2xsIGluZGljYXRvcnMgbW9tZW50YXJpbHkuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGZsYXNoU2Nyb2xsSW5kaWNhdG9yczogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRTY3JvbGxSZXNwb25kZXIoKS5zY3JvbGxSZXNwb25kZXJGbGFzaFNjcm9sbEluZGljYXRvcnMoKTtcbiAgfSxcblxuICBfZ2V0S2V5Rm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBjaGlsZEFycmF5KSB7XG4gICAgLy8gJEZsb3dGaXhNZSBJbnZhbGlkIHByb3AgdXNhZ2VcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkQXJyYXlbaW5kZXhdO1xuICAgIHJldHVybiBjaGlsZCAmJiBjaGlsZC5rZXk7XG4gIH0sXG5cbiAgX3VwZGF0ZUFuaW1hdGVkTm9kZUF0dGFjaG1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudCkge1xuICAgICAgdGhpcy5fc2Nyb2xsQW5pbWF0ZWRWYWx1ZUF0dGFjaG1lbnQuZGV0YWNoKCk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMuc3RpY2t5SGVhZGVySW5kaWNlcyAmJlxuICAgICAgdGhpcy5wcm9wcy5zdGlja3lIZWFkZXJJbmRpY2VzLmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIHRoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWVBdHRhY2htZW50ID0gQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5hdHRhY2hOYXRpdmVFdmVudChcbiAgICAgICAgdGhpcy5fc2Nyb2xsVmlld1JlZixcbiAgICAgICAgJ29uU2Nyb2xsJyxcbiAgICAgICAgW3tuYXRpdmVFdmVudDoge2NvbnRlbnRPZmZzZXQ6IHt5OiB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlfX19XSxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIF9zZXRTdGlja3lIZWFkZXJSZWY6IGZ1bmN0aW9uKGtleSwgcmVmKSB7XG4gICAgaWYgKHJlZikge1xuICAgICAgdGhpcy5fc3RpY2t5SGVhZGVyUmVmcy5zZXQoa2V5LCByZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zdGlja3lIZWFkZXJSZWZzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfSxcblxuICBfb25TdGlja3lIZWFkZXJMYXlvdXQ6IGZ1bmN0aW9uKGluZGV4LCBldmVudCwga2V5KSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnN0aWNreUhlYWRlckluZGljZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2hpbGRBcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGtleSAhPT0gdGhpcy5fZ2V0S2V5Rm9ySW5kZXgoaW5kZXgsIGNoaWxkQXJyYXkpKSB7XG4gICAgICAvLyBpZ25vcmUgc3RhbGUgbGF5b3V0IHVwZGF0ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGxheW91dFkgPSBldmVudC5uYXRpdmVFdmVudC5sYXlvdXQueTtcbiAgICB0aGlzLl9oZWFkZXJMYXlvdXRZcy5zZXQoa2V5LCBsYXlvdXRZKTtcblxuICAgIGNvbnN0IGluZGV4T2ZJbmRleCA9IHRoaXMucHJvcHMuc3RpY2t5SGVhZGVySW5kaWNlcy5pbmRleE9mKGluZGV4KTtcbiAgICBjb25zdCBwcmV2aW91c0hlYWRlckluZGV4ID0gdGhpcy5wcm9wcy5zdGlja3lIZWFkZXJJbmRpY2VzW1xuICAgICAgaW5kZXhPZkluZGV4IC0gMVxuICAgIF07XG4gICAgaWYgKHByZXZpb3VzSGVhZGVySW5kZXggIT0gbnVsbCkge1xuICAgICAgY29uc3QgcHJldmlvdXNIZWFkZXIgPSB0aGlzLl9zdGlja3lIZWFkZXJSZWZzLmdldChcbiAgICAgICAgdGhpcy5fZ2V0S2V5Rm9ySW5kZXgocHJldmlvdXNIZWFkZXJJbmRleCwgY2hpbGRBcnJheSksXG4gICAgICApO1xuICAgICAgcHJldmlvdXNIZWFkZXIgJiYgcHJldmlvdXNIZWFkZXIuc2V0TmV4dEhlYWRlclkobGF5b3V0WSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVTY3JvbGw6IGZ1bmN0aW9uKGU6IE9iamVjdCkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMucHJvcHMub25TY3JvbGwgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5zY3JvbGxFdmVudFRocm90dGxlID09IG51bGwgJiZcbiAgICAgICAgUGxhdGZvcm0uT1MgPT09ICdpb3MnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgJ1lvdSBzcGVjaWZpZWQgYG9uU2Nyb2xsYCBvbiBhIDxTY3JvbGxWaWV3PiBidXQgbm90ICcgK1xuICAgICAgICAgICAgJ2BzY3JvbGxFdmVudFRocm90dGxlYC4gWW91IHdpbGwgb25seSByZWNlaXZlIG9uZSBldmVudC4gJyArXG4gICAgICAgICAgICAnVXNpbmcgYDE2YCB5b3UgZ2V0IGFsbCB0aGUgZXZlbnRzIGJ1dCBiZSBhd2FyZSB0aGF0IGl0IG1heSAnICtcbiAgICAgICAgICAgIFwiY2F1c2UgZnJhbWUgZHJvcHMsIHVzZSBhIGJpZ2dlciBudW1iZXIgaWYgeW91IGRvbid0IG5lZWQgYXMgXCIgK1xuICAgICAgICAgICAgJ211Y2ggcHJlY2lzaW9uLicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMucHJvcHMua2V5Ym9hcmREaXNtaXNzTW9kZSA9PT0gJ29uLWRyYWcnICYmXG4gICAgICAgIHRoaXMuc3RhdGUuaXNUb3VjaGluZ1xuICAgICAgKSB7XG4gICAgICAgIGRpc21pc3NLZXlib2FyZCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbChlKTtcbiAgfSxcblxuICBfaGFuZGxlTGF5b3V0OiBmdW5jdGlvbihlOiBPYmplY3QpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pbnZlcnRTdGlja3lIZWFkZXJzKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtsYXlvdXRIZWlnaHQ6IGUubmF0aXZlRXZlbnQubGF5b3V0LmhlaWdodH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5vbkxheW91dCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkxheW91dChlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUNvbnRlbnRPbkxheW91dDogZnVuY3Rpb24oZTogT2JqZWN0KSB7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gZS5uYXRpdmVFdmVudC5sYXlvdXQ7XG4gICAgdGhpcy5wcm9wcy5vbkNvbnRlbnRTaXplQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ29udGVudFNpemVDaGFuZ2Uod2lkdGgsIGhlaWdodCk7XG4gIH0sXG5cbiAgX3Njcm9sbFZpZXdSZWY6IChudWxsOiA/U2Nyb2xsVmlldyksXG4gIF9zZXRTY3JvbGxWaWV3UmVmOiBmdW5jdGlvbihyZWY6ID9TY3JvbGxWaWV3KSB7XG4gICAgdGhpcy5fc2Nyb2xsVmlld1JlZiA9IHJlZjtcbiAgfSxcblxuICBfaW5uZXJWaWV3UmVmOiAobnVsbDogP05hdGl2ZU1ldGhvZHNNaXhpblR5cGUpLFxuICBfc2V0SW5uZXJWaWV3UmVmOiBmdW5jdGlvbihyZWY6ID9OYXRpdmVNZXRob2RzTWl4aW5UeXBlKSB7XG4gICAgdGhpcy5faW5uZXJWaWV3UmVmID0gcmVmO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgbGV0IFNjcm9sbFZpZXdDbGFzcztcbiAgICBsZXQgU2Nyb2xsQ29udGVudENvbnRhaW5lclZpZXdDbGFzcztcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaG9yaXpvbnRhbCkge1xuICAgICAgICBTY3JvbGxWaWV3Q2xhc3MgPSBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXc7XG4gICAgICAgIFNjcm9sbENvbnRlbnRDb250YWluZXJWaWV3Q2xhc3MgPSBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU2Nyb2xsVmlld0NsYXNzID0gQW5kcm9pZFNjcm9sbFZpZXc7XG4gICAgICAgIFNjcm9sbENvbnRlbnRDb250YWluZXJWaWV3Q2xhc3MgPSBWaWV3O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBTY3JvbGxWaWV3Q2xhc3MgPSBSQ1RTY3JvbGxWaWV3O1xuICAgICAgU2Nyb2xsQ29udGVudENvbnRhaW5lclZpZXdDbGFzcyA9IFJDVFNjcm9sbENvbnRlbnRWaWV3O1xuICAgIH1cblxuICAgIGludmFyaWFudChcbiAgICAgIFNjcm9sbFZpZXdDbGFzcyAhPT0gdW5kZWZpbmVkLFxuICAgICAgJ1Njcm9sbFZpZXdDbGFzcyBtdXN0IG5vdCBiZSB1bmRlZmluZWQnLFxuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBTY3JvbGxDb250ZW50Q29udGFpbmVyVmlld0NsYXNzICE9PSB1bmRlZmluZWQsXG4gICAgICAnU2Nyb2xsQ29udGVudENvbnRhaW5lclZpZXdDbGFzcyBtdXN0IG5vdCBiZSB1bmRlZmluZWQnLFxuICAgICk7XG5cbiAgICBjb25zdCBjb250ZW50Q29udGFpbmVyU3R5bGUgPSBbXG4gICAgICB0aGlzLnByb3BzLmhvcml6b250YWwgJiYgc3R5bGVzLmNvbnRlbnRDb250YWluZXJIb3Jpem9udGFsLFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50Q29udGFpbmVyU3R5bGUsXG4gICAgXTtcbiAgICBpZiAoX19ERVZfXyAmJiB0aGlzLnByb3BzLnN0eWxlKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IGZsYXR0ZW5TdHlsZSh0aGlzLnByb3BzLnN0eWxlKTtcbiAgICAgIGNvbnN0IGNoaWxkTGF5b3V0UHJvcHMgPSBbJ2FsaWduSXRlbXMnLCAnanVzdGlmeUNvbnRlbnQnXS5maWx0ZXIoXG4gICAgICAgIHByb3AgPT4gc3R5bGUgJiYgc3R5bGVbcHJvcF0gIT09IHVuZGVmaW5lZCxcbiAgICAgICk7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGNoaWxkTGF5b3V0UHJvcHMubGVuZ3RoID09PSAwLFxuICAgICAgICAnU2Nyb2xsVmlldyBjaGlsZCBsYXlvdXQgKCcgK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGNoaWxkTGF5b3V0UHJvcHMpICtcbiAgICAgICAgICAnKSBtdXN0IGJlIGFwcGxpZWQgdGhyb3VnaCB0aGUgY29udGVudENvbnRhaW5lclN0eWxlIHByb3AuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRTaXplQ2hhbmdlUHJvcHMgPSB7fTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNvbnRlbnRTaXplQ2hhbmdlKSB7XG4gICAgICBjb250ZW50U2l6ZUNoYW5nZVByb3BzID0ge1xuICAgICAgICBvbkxheW91dDogdGhpcy5faGFuZGxlQ29udGVudE9uTGF5b3V0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7c3RpY2t5SGVhZGVySW5kaWNlc30gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGhhc1N0aWNreUhlYWRlcnMgPVxuICAgICAgc3RpY2t5SGVhZGVySW5kaWNlcyAmJiBzdGlja3lIZWFkZXJJbmRpY2VzLmxlbmd0aCA+IDA7XG4gICAgY29uc3QgY2hpbGRBcnJheSA9XG4gICAgICBoYXNTdGlja3lIZWFkZXJzICYmIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBoYXNTdGlja3lIZWFkZXJzXG4gICAgICA/IC8vICRGbG93Rml4TWUgSW52YWxpZCBwcm9wIHVzYWdlXG4gICAgICAgIGNoaWxkQXJyYXkubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBpbmRleE9mSW5kZXggPSBjaGlsZCA/IHN0aWNreUhlYWRlckluZGljZXMuaW5kZXhPZihpbmRleCkgOiAtMTtcbiAgICAgICAgICBpZiAoaW5kZXhPZkluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGNoaWxkLmtleTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHN0aWNreUhlYWRlckluZGljZXNbaW5kZXhPZkluZGV4ICsgMV07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8U2Nyb2xsVmlld1N0aWNreUhlYWRlclxuICAgICAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgICAgIHJlZj17cmVmID0+IHRoaXMuX3NldFN0aWNreUhlYWRlclJlZihrZXksIHJlZil9XG4gICAgICAgICAgICAgICAgbmV4dEhlYWRlckxheW91dFk9e3RoaXMuX2hlYWRlckxheW91dFlzLmdldChcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2dldEtleUZvckluZGV4KG5leHRJbmRleCwgY2hpbGRBcnJheSksXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICBvbkxheW91dD17ZXZlbnQgPT5cbiAgICAgICAgICAgICAgICAgIHRoaXMuX29uU3RpY2t5SGVhZGVyTGF5b3V0KGluZGV4LCBldmVudCwga2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY3JvbGxBbmltYXRlZFZhbHVlPXt0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlfVxuICAgICAgICAgICAgICAgIGludmVydGVkPXt0aGlzLnByb3BzLmludmVydFN0aWNreUhlYWRlcnN9XG4gICAgICAgICAgICAgICAgc2Nyb2xsVmlld0hlaWdodD17dGhpcy5zdGF0ZS5sYXlvdXRIZWlnaHR9PlxuICAgICAgICAgICAgICAgIHtjaGlsZH1cbiAgICAgICAgICAgICAgPC9TY3JvbGxWaWV3U3RpY2t5SGVhZGVyPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICBjb25zdCBjb250ZW50Q29udGFpbmVyID0gKFxuICAgICAgPFNjcm9sbENvbnRlbnRDb250YWluZXJWaWV3Q2xhc3NcbiAgICAgICAgey4uLmNvbnRlbnRTaXplQ2hhbmdlUHJvcHN9XG4gICAgICAgIC8vICRGbG93Rml4TWUgSW52YWxpZCBwcm9wIHVzYWdlXG4gICAgICAgIHJlZj17dGhpcy5fc2V0SW5uZXJWaWV3UmVmfVxuICAgICAgICBzdHlsZT17Y29udGVudENvbnRhaW5lclN0eWxlfVxuICAgICAgICByZW1vdmVDbGlwcGVkU3Vidmlld3M9e1xuICAgICAgICAgIC8vIFN1YnZpZXcgY2xpcHBpbmcgY2F1c2VzIGlzc3VlcyB3aXRoIHN0aWNreSBoZWFkZXJzIG9uIEFuZHJvaWQgYW5kXG4gICAgICAgICAgLy8gd291bGQgYmUgaGFyZCB0byBmaXggcHJvcGVybHkgaW4gYSBwZXJmb3JtYW50IHdheS5cbiAgICAgICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnICYmIGhhc1N0aWNreUhlYWRlcnNcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogdGhpcy5wcm9wcy5yZW1vdmVDbGlwcGVkU3Vidmlld3NcbiAgICAgICAgfVxuICAgICAgICBjb2xsYXBzYWJsZT17ZmFsc2V9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1Njcm9sbENvbnRlbnRDb250YWluZXJWaWV3Q2xhc3M+XG4gICAgKTtcblxuICAgIGNvbnN0IGFsd2F5c0JvdW5jZUhvcml6b250YWwgPVxuICAgICAgdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VIb3Jpem9udGFsICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLnByb3BzLmFsd2F5c0JvdW5jZUhvcml6b250YWxcbiAgICAgICAgOiB0aGlzLnByb3BzLmhvcml6b250YWw7XG5cbiAgICBjb25zdCBhbHdheXNCb3VuY2VWZXJ0aWNhbCA9XG4gICAgICB0aGlzLnByb3BzLmFsd2F5c0JvdW5jZVZlcnRpY2FsICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLnByb3BzLmFsd2F5c0JvdW5jZVZlcnRpY2FsXG4gICAgICAgIDogIXRoaXMucHJvcHMuaG9yaXpvbnRhbDtcblxuICAgIGNvbnN0IERFUFJFQ0FURURfc2VuZFVwZGF0ZWRDaGlsZEZyYW1lcyA9ICEhdGhpcy5wcm9wc1xuICAgICAgLkRFUFJFQ0FURURfc2VuZFVwZGF0ZWRDaGlsZEZyYW1lcztcblxuICAgIGNvbnN0IGJhc2VTdHlsZSA9IHRoaXMucHJvcHMuaG9yaXpvbnRhbFxuICAgICAgPyBzdHlsZXMuYmFzZUhvcml6b250YWxcbiAgICAgIDogc3R5bGVzLmJhc2VWZXJ0aWNhbDtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICBhbHdheXNCb3VuY2VIb3Jpem9udGFsLFxuICAgICAgYWx3YXlzQm91bmNlVmVydGljYWwsXG4gICAgICBzdHlsZTogKFtiYXNlU3R5bGUsIHRoaXMucHJvcHMuc3R5bGVdOiA/QXJyYXk8YW55PiksXG4gICAgICAvLyBPdmVycmlkZSB0aGUgb25Db250ZW50U2l6ZUNoYW5nZSBmcm9tIHByb3BzLCBzaW5jZSB0aGlzIGV2ZW50IGNhblxuICAgICAgLy8gYnViYmxlIHVwIGZyb20gVGV4dElucHV0c1xuICAgICAgb25Db250ZW50U2l6ZUNoYW5nZTogbnVsbCxcbiAgICAgIG9uTGF5b3V0OiB0aGlzLl9oYW5kbGVMYXlvdXQsXG4gICAgICBvbk1vbWVudHVtU2Nyb2xsQmVnaW46IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbixcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxFbmQ6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxFbmQsXG4gICAgICBvblJlc3BvbmRlckdyYW50OiB0aGlzLnNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlckdyYW50LFxuICAgICAgb25SZXNwb25kZXJSZWplY3Q6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVqZWN0LFxuICAgICAgb25SZXNwb25kZXJSZWxlYXNlOiB0aGlzLnNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlclJlbGVhc2UsXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBvblJlc3BvbmRlclRlcm1pbmF0ZTogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVUZXJtaW5hdGUsXG4gICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogdGhpc1xuICAgICAgICAuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVGVybWluYXRpb25SZXF1ZXN0LFxuICAgICAgb25TY3JvbGw6IHRoaXMuX2hhbmRsZVNjcm9sbCxcbiAgICAgIG9uU2Nyb2xsQmVnaW5EcmFnOiB0aGlzLnNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEJlZ2luRHJhZyxcbiAgICAgIG9uU2Nyb2xsRW5kRHJhZzogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxFbmREcmFnLFxuICAgICAgb25TY3JvbGxTaG91bGRTZXRSZXNwb25kZXI6IHRoaXNcbiAgICAgICAgLnNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbFNob3VsZFNldFJlc3BvbmRlcixcbiAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IHRoaXNcbiAgICAgICAgLnNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyLFxuICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IHRoaXNcbiAgICAgICAgLnNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSxcbiAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZTogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaE1vdmUsXG4gICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hTdGFydCxcbiAgICAgIG9uVG91Y2hDYW5jZWw6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hDYW5jZWwsXG4gICAgICBzY3JvbGxCYXJUaHVtYkltYWdlOiByZXNvbHZlQXNzZXRTb3VyY2UodGhpcy5wcm9wcy5zY3JvbGxCYXJUaHVtYkltYWdlKSxcbiAgICAgIHNjcm9sbEV2ZW50VGhyb3R0bGU6IGhhc1N0aWNreUhlYWRlcnNcbiAgICAgICAgPyAxXG4gICAgICAgIDogdGhpcy5wcm9wcy5zY3JvbGxFdmVudFRocm90dGxlLFxuICAgICAgc2VuZE1vbWVudHVtRXZlbnRzOlxuICAgICAgICB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxCZWdpbiB8fCB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxFbmRcbiAgICAgICAgICA/IHRydWVcbiAgICAgICAgICA6IGZhbHNlLFxuICAgICAgREVQUkVDQVRFRF9zZW5kVXBkYXRlZENoaWxkRnJhbWVzLFxuICAgICAgLy8gcGFnaW5nRW5hYmxlZCBpcyBvdmVycmlkZGVuIGJ5IHNuYXBUb0ludGVydmFsIC8gc25hcFRvT2Zmc2V0c1xuICAgICAgcGFnaW5nRW5hYmxlZDogUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgLy8gb24gaU9TLCBwYWdpbmdFbmFibGVkIG11c3QgYmUgc2V0IHRvIGZhbHNlIHRvIGhhdmUgc25hcFRvSW50ZXJ2YWwgLyBzbmFwVG9PZmZzZXRzIHdvcmtcbiAgICAgICAgaW9zOlxuICAgICAgICAgIHRoaXMucHJvcHMucGFnaW5nRW5hYmxlZCAmJlxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvSW50ZXJ2YWwgPT0gbnVsbCAmJlxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvT2Zmc2V0cyA9PSBudWxsLFxuICAgICAgICAvLyBvbiBBbmRyb2lkLCBwYWdpbmdFbmFibGVkIG11c3QgYmUgc2V0IHRvIHRydWUgdG8gaGF2ZSBzbmFwVG9JbnRlcnZhbCAvIHNuYXBUb09mZnNldHMgd29ya1xuICAgICAgICBhbmRyb2lkOlxuICAgICAgICAgIHRoaXMucHJvcHMucGFnaW5nRW5hYmxlZCB8fFxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvSW50ZXJ2YWwgIT0gbnVsbCB8fFxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvT2Zmc2V0cyAhPSBudWxsLFxuICAgICAgfSksXG4gICAgfTtcblxuICAgIGNvbnN0IHtkZWNlbGVyYXRpb25SYXRlfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGRlY2VsZXJhdGlvblJhdGUgIT0gbnVsbCkge1xuICAgICAgcHJvcHMuZGVjZWxlcmF0aW9uUmF0ZSA9IHByb2Nlc3NEZWNlbGVyYXRpb25SYXRlKGRlY2VsZXJhdGlvblJhdGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlZnJlc2hDb250cm9sID0gdGhpcy5wcm9wcy5yZWZyZXNoQ29udHJvbDtcblxuICAgIGlmIChyZWZyZXNoQ29udHJvbCkge1xuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgICAvLyBPbiBpT1MgdGhlIFJlZnJlc2hDb250cm9sIGlzIGEgY2hpbGQgb2YgdGhlIFNjcm9sbFZpZXcuXG4gICAgICAgIC8vIHR2T1MgbGFja3MgbmF0aXZlIHN1cHBvcnQgZm9yIFJlZnJlc2hDb250cm9sLCBzbyBkb24ndCBpbmNsdWRlIGl0IGluIHRoYXQgY2FzZVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxTY3JvbGxWaWV3Q2xhc3Mgey4uLnByb3BzfSByZWY9e3RoaXMuX3NldFNjcm9sbFZpZXdSZWZ9PlxuICAgICAgICAgICAge1BsYXRmb3JtLmlzVFYgPyBudWxsIDogcmVmcmVzaENvbnRyb2x9XG4gICAgICAgICAgICB7Y29udGVudENvbnRhaW5lcn1cbiAgICAgICAgICA8L1Njcm9sbFZpZXdDbGFzcz5cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgICAvLyBPbiBBbmRyb2lkIHdyYXAgdGhlIFNjcm9sbFZpZXcgd2l0aCBhIEFuZHJvaWRTd2lwZVJlZnJlc2hMYXlvdXQuXG4gICAgICAgIC8vIFNpbmNlIHRoZSBTY3JvbGxWaWV3IGlzIHdyYXBwZWQgYWRkIHRoZSBzdHlsZSBwcm9wcyB0byB0aGVcbiAgICAgICAgLy8gQW5kcm9pZFN3aXBlUmVmcmVzaExheW91dCBhbmQgdXNlIGZsZXg6IDEgZm9yIHRoZSBTY3JvbGxWaWV3LlxuICAgICAgICAvLyBOb3RlOiB3ZSBzaG91bGQgb25seSBhcHBseSBwcm9wcy5zdHlsZSBvbiB0aGUgd3JhcHBlclxuICAgICAgICAvLyBob3dldmVyLCB0aGUgU2Nyb2xsVmlldyBzdGlsbCBuZWVkcyB0aGUgYmFzZVN0eWxlIHRvIGJlIHNjcm9sbGFibGVcblxuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KFxuICAgICAgICAgIHJlZnJlc2hDb250cm9sLFxuICAgICAgICAgIHtzdHlsZTogcHJvcHMuc3R5bGV9LFxuICAgICAgICAgIDxTY3JvbGxWaWV3Q2xhc3NcbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIHN0eWxlPXtiYXNlU3R5bGV9XG4gICAgICAgICAgICByZWY9e3RoaXMuX3NldFNjcm9sbFZpZXdSZWZ9PlxuICAgICAgICAgICAge2NvbnRlbnRDb250YWluZXJ9XG4gICAgICAgICAgPC9TY3JvbGxWaWV3Q2xhc3M+LFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPFNjcm9sbFZpZXdDbGFzcyB7Li4ucHJvcHN9IHJlZj17dGhpcy5fc2V0U2Nyb2xsVmlld1JlZn0+XG4gICAgICAgIHtjb250ZW50Q29udGFpbmVyfVxuICAgICAgPC9TY3JvbGxWaWV3Q2xhc3M+XG4gICAgKTtcbiAgfSxcbn0pO1xuXG5jb25zdCBUeXBlZFNjcm9sbFZpZXcgPSAoKFNjcm9sbFZpZXc6IGFueSk6IENsYXNzPFxuICBJbnRlcm5hbFNjcm9sbFZpZXdUeXBlPFByb3BzPixcbj4pO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJhc2VWZXJ0aWNhbDoge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIGZsZXhTaHJpbms6IDEsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxuICB9LFxuICBiYXNlSG9yaXpvbnRhbDoge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIGZsZXhTaHJpbms6IDEsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxuICB9LFxuICBjb250ZW50Q29udGFpbmVySG9yaXpvbnRhbDoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVHlwZWRTY3JvbGxWaWV3O1xuIl19