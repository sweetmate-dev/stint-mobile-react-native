{"version":3,"sources":["Text.js"],"names":["React","require","ReactNativeViewAttributes","TextAncestor","TextPropTypes","Touchable","UIManager","createReactNativeComponentClass","nullthrows","processColor","PRESS_RECT_OFFSET","top","left","right","bottom","viewConfig","validAttributes","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","uiViewClassName","TouchableText","state","Mixin","touchableGetInitialState","createResponderHandlers","_createResponseHandlers","bind","responseHandlers","props","isTouchable","__DEV__","TOUCH_TARGET_DEBUG","onPress","style","color","hasTextAncestor","forwardedRef","onStartShouldSetResponder","shouldSetResponder","_attachTouchHandlers","onResponderGrant","event","dispatchID","touchableHandleResponderGrant","call","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","touchableHandleResponderTerminationRequest","touchableGetPressRectOffset","key","touchableHandleActivePressIn","suppressHighlighting","setState","touchableHandleActivePressOut","touchableHandlePress","touchableHandleLongPress","onLongPress","pressRetentionOffset","nextProps","prevState","Component","defaultProps","accessible","RCTText","RCTVirtualText","Text","TextToExport","forwardRef","propTypes","module","exports"],"mappings":"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","file":"Text.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst React = require('React');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst TextAncestor = require('TextAncestor');\nconst TextPropTypes = require('TextPropTypes');\nconst Touchable = require('Touchable');\nconst UIManager = require('UIManager');\n\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst nullthrows = require('fbjs/lib/nullthrows');\nconst processColor = require('processColor');\n\nimport type {PressEvent} from 'CoreEventTypes';\nimport type {NativeComponent} from 'ReactNative';\nimport type {PressRetentionOffset, TextProps} from 'TextProps';\n\ntype ResponseHandlers = $ReadOnly<{|\n  onStartShouldSetResponder: () => boolean,\n  onResponderGrant: (event: SyntheticEvent<>, dispatchID: string) => void,\n  onResponderMove: (event: SyntheticEvent<>) => void,\n  onResponderRelease: (event: SyntheticEvent<>) => void,\n  onResponderTerminate: (event: SyntheticEvent<>) => void,\n  onResponderTerminationRequest: () => boolean,\n|}>;\n\ntype Props = $ReadOnly<{\n  ...TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n}>;\n\ntype State = {|\n  touchable: {|\n    touchState: ?string,\n    responderID: ?number,\n  |},\n  isHighlighted: boolean,\n  createResponderHandlers: () => ResponseHandlers,\n  responseHandlers: ?ResponseHandlers,\n|};\n\nconst PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nconst viewConfig = {\n  validAttributes: {\n    ...ReactNativeViewAttributes.UIView,\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n  },\n  uiViewClassName: 'RCTText',\n};\n\n/**\n * A React component for displaying text.\n *\n * See https://facebook.github.io/react-native/docs/text.html\n */\nclass TouchableText extends React.Component<Props, State> {\n  static defaultProps = {\n    accessible: true,\n    allowFontScaling: true,\n    ellipsizeMode: 'tail',\n  };\n\n  touchableGetPressRectOffset: ?() => PressRetentionOffset;\n  touchableHandleActivePressIn: ?() => void;\n  touchableHandleActivePressOut: ?() => void;\n  touchableHandleLongPress: ?(event: PressEvent) => void;\n  touchableHandlePress: ?(event: PressEvent) => void;\n  touchableHandleResponderGrant: ?(\n    event: SyntheticEvent<>,\n    dispatchID: string,\n  ) => void;\n  touchableHandleResponderMove: ?(event: SyntheticEvent<>) => void;\n  touchableHandleResponderRelease: ?(event: SyntheticEvent<>) => void;\n  touchableHandleResponderTerminate: ?(event: SyntheticEvent<>) => void;\n  touchableHandleResponderTerminationRequest: ?() => boolean;\n\n  state = {\n    ...Touchable.Mixin.touchableGetInitialState(),\n    isHighlighted: false,\n    createResponderHandlers: this._createResponseHandlers.bind(this),\n    responseHandlers: null,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State): ?State {\n    return prevState.responseHandlers == null && isTouchable(nextProps)\n      ? {\n          ...prevState,\n          responseHandlers: prevState.createResponderHandlers(),\n        }\n      : null;\n  }\n\n  static viewConfig = viewConfig;\n\n  render(): React.Node {\n    let props = this.props;\n    if (isTouchable(props)) {\n      props = {\n        ...props,\n        ...this.state.responseHandlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (props.selectionColor != null) {\n      props = {\n        ...props,\n        selectionColor: processColor(props.selectionColor),\n      };\n    }\n    if (__DEV__) {\n      if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {\n        props = {\n          ...props,\n          style: [props.style, {color: 'magenta'}],\n        };\n      }\n    }\n    return (\n      <TextAncestor.Consumer>\n        {hasTextAncestor =>\n          hasTextAncestor ? (\n            <RCTVirtualText {...props} ref={props.forwardedRef} />\n          ) : (\n            <TextAncestor.Provider value={true}>\n              <RCTText {...props} ref={props.forwardedRef} />\n            </TextAncestor.Provider>\n          )\n        }\n      </TextAncestor.Consumer>\n    );\n  }\n\n  _createResponseHandlers(): ResponseHandlers {\n    return {\n      onStartShouldSetResponder: (): boolean => {\n        const {onStartShouldSetResponder} = this.props;\n        const shouldSetResponder =\n          (onStartShouldSetResponder == null\n            ? false\n            : onStartShouldSetResponder()) || isTouchable(this.props);\n\n        if (shouldSetResponder) {\n          this._attachTouchHandlers();\n        }\n        return shouldSetResponder;\n      },\n      onResponderGrant: (event: SyntheticEvent<>, dispatchID: string): void => {\n        nullthrows(this.touchableHandleResponderGrant)(event, dispatchID);\n        if (this.props.onResponderGrant != null) {\n          this.props.onResponderGrant.call(this, event, dispatchID);\n        }\n      },\n      onResponderMove: (event: SyntheticEvent<>): void => {\n        nullthrows(this.touchableHandleResponderMove)(event);\n        if (this.props.onResponderMove != null) {\n          this.props.onResponderMove.call(this, event);\n        }\n      },\n      onResponderRelease: (event: SyntheticEvent<>): void => {\n        nullthrows(this.touchableHandleResponderRelease)(event);\n        if (this.props.onResponderRelease != null) {\n          this.props.onResponderRelease.call(this, event);\n        }\n      },\n      onResponderTerminate: (event: SyntheticEvent<>): void => {\n        nullthrows(this.touchableHandleResponderTerminate)(event);\n        if (this.props.onResponderTerminate != null) {\n          this.props.onResponderTerminate.call(this, event);\n        }\n      },\n      onResponderTerminationRequest: (): boolean => {\n        const {onResponderTerminationRequest} = this.props;\n        if (!nullthrows(this.touchableHandleResponderTerminationRequest)()) {\n          return false;\n        }\n        if (onResponderTerminationRequest == null) {\n          return true;\n        }\n        return onResponderTerminationRequest();\n      },\n    };\n  }\n\n  /**\n   * Lazily attaches Touchable.Mixin handlers.\n   */\n  _attachTouchHandlers(): void {\n    if (this.touchableGetPressRectOffset != null) {\n      return;\n    }\n    for (const key in Touchable.Mixin) {\n      if (typeof Touchable.Mixin[key] === 'function') {\n        (this: any)[key] = Touchable.Mixin[key].bind(this);\n      }\n    }\n    this.touchableHandleActivePressIn = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: true});\n      }\n    };\n    this.touchableHandleActivePressOut = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: false});\n      }\n    };\n    this.touchableHandlePress = (event: PressEvent): void => {\n      if (this.props.onPress != null) {\n        this.props.onPress(event);\n      }\n    };\n    this.touchableHandleLongPress = (event: PressEvent): void => {\n      if (this.props.onLongPress != null) {\n        this.props.onLongPress(event);\n      }\n    };\n    this.touchableGetPressRectOffset = (): PressRetentionOffset =>\n      this.props.pressRetentionOffset == null\n        ? PRESS_RECT_OFFSET\n        : this.props.pressRetentionOffset;\n  }\n}\n\nconst isTouchable = (props: Props): boolean =>\n  props.onPress != null ||\n  props.onLongPress != null ||\n  props.onStartShouldSetResponder != null;\n\nconst RCTText = createReactNativeComponentClass(\n  viewConfig.uiViewClassName,\n  () => viewConfig,\n);\n\nconst RCTVirtualText =\n  UIManager.RCTVirtualText == null\n    ? RCTText\n    : createReactNativeComponentClass('RCTVirtualText', () => ({\n        validAttributes: {\n          ...ReactNativeViewAttributes.UIView,\n          isHighlighted: true,\n        },\n        uiViewClassName: 'RCTVirtualText',\n      }));\n\nconst Text = (\n  props: TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n) => {\n  return <TouchableText {...props} forwardedRef={forwardedRef} />;\n};\n// $FlowFixMe - TODO T29156721 `React.forwardRef` is not defined in Flow, yet.\nconst TextToExport = React.forwardRef(Text);\n\n// TODO: Deprecate this.\nTextToExport.propTypes = TextPropTypes;\n\nmodule.exports = (TextToExport: Class<NativeComponent<TextProps>>);\n"]}