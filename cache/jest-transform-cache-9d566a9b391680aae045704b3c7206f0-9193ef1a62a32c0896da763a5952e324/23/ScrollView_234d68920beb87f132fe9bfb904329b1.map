{"version":3,"sources":["ScrollView.js"],"names":["AnimatedImplementation","require","Platform","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","View","InternalScrollViewType","createReactClass","dismissKeyboard","flattenStyle","invariant","processDecelerationRate","requireNativeComponent","warning","resolveAssetSource","AndroidScrollView","AndroidHorizontalScrollContentView","AndroidHorizontalScrollView","RCTScrollView","RCTScrollContentView","OS","ScrollView","displayName","mixins","Mixin","_scrollAnimatedValue","Value","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","getInitialState","scrollResponderMixinGetInitialState","layoutHeight","UNSAFE_componentWillMount","props","contentOffset","y","setOffset","contentInset","top","componentDidMount","_updateAnimatedNodeAttachment","componentDidUpdate","componentWillUnmount","detach","setNativeProps","_scrollViewRef","getScrollResponder","getScrollableNode","findNodeHandle","getInnerViewNode","_innerViewRef","scrollTo","x","animated","console","warn","scrollResponderScrollTo","scrollToEnd","options","scrollResponderScrollToEnd","scrollWithoutAnimationTo","flashScrollIndicators","scrollResponderFlashScrollIndicators","_getKeyForIndex","index","childArray","child","key","stickyHeaderIndices","length","attachNativeEvent","nativeEvent","_setStickyHeaderRef","ref","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","layout","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","get","setNextHeaderY","_handleScroll","e","__DEV__","onScroll","scrollEventThrottle","log","keyboardDismissMode","state","isTouching","scrollResponderHandleScroll","_handleLayout","invertStickyHeaders","setState","height","onLayout","_handleContentOnLayout","width","onContentSizeChange","_setScrollViewRef","_setInnerViewRef","render","ScrollViewClass","ScrollContentContainerViewClass","horizontal","undefined","contentContainerStyle","styles","contentContainerHorizontal","style","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","hasStickyHeaders","map","nextIndex","contentContainer","removeClippedSubviews","alwaysBounceHorizontal","alwaysBounceVertical","DEPRECATED_sendUpdatedChildFrames","baseStyle","baseHorizontal","baseVertical","onMomentumScrollBegin","scrollResponderHandleMomentumScrollBegin","onMomentumScrollEnd","scrollResponderHandleMomentumScrollEnd","onResponderGrant","scrollResponderHandleResponderGrant","onResponderReject","scrollResponderHandleResponderReject","onResponderRelease","scrollResponderHandleResponderRelease","onResponderTerminate","scrollResponderHandleTerminate","onResponderTerminationRequest","scrollResponderHandleTerminationRequest","onScrollBeginDrag","scrollResponderHandleScrollBeginDrag","onScrollEndDrag","scrollResponderHandleScrollEndDrag","onScrollShouldSetResponder","scrollResponderHandleScrollShouldSetResponder","onStartShouldSetResponder","scrollResponderHandleStartShouldSetResponder","onStartShouldSetResponderCapture","scrollResponderHandleStartShouldSetResponderCapture","onTouchEnd","scrollResponderHandleTouchEnd","onTouchMove","scrollResponderHandleTouchMove","onTouchStart","scrollResponderHandleTouchStart","onTouchCancel","scrollResponderHandleTouchCancel","scrollBarThumbImage","sendMomentumEvents","pagingEnabled","select","ios","snapToInterval","snapToOffsets","android","decelerationRate","refreshControl","isTV","cloneElement","TypedScrollView","create","flexGrow","flexShrink","flexDirection","overflow","module","exports"],"mappings":"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","file":"ScrollView.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst AnimatedImplementation = require('AnimatedImplementation');\nconst Platform = require('Platform');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst ScrollResponder = require('ScrollResponder');\nconst ScrollViewStickyHeader = require('ScrollViewStickyHeader');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\nconst InternalScrollViewType = require('InternalScrollViewType');\n\nconst createReactClass = require('create-react-class');\nconst dismissKeyboard = require('dismissKeyboard');\nconst flattenStyle = require('flattenStyle');\nconst invariant = require('fbjs/lib/invariant');\nconst processDecelerationRate = require('processDecelerationRate');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\nconst resolveAssetSource = require('resolveAssetSource');\n\nimport type {PressEvent} from 'CoreEventTypes';\nimport type {EdgeInsetsProp} from 'EdgeInsetsPropType';\nimport type {NativeMethodsMixinType} from 'ReactNativeTypes';\nimport type {ViewStyleProp} from 'StyleSheet';\nimport type {ViewProps} from 'ViewPropTypes';\nimport type {PointProp} from 'PointPropType';\n\nimport type {ColorValue} from 'StyleSheetTypes';\n\nlet AndroidScrollView;\nlet AndroidHorizontalScrollContentView;\nlet AndroidHorizontalScrollView;\nlet RCTScrollView;\nlet RCTScrollContentView;\n\nif (Platform.OS === 'android') {\n  AndroidScrollView = requireNativeComponent('RCTScrollView');\n  AndroidHorizontalScrollView = requireNativeComponent(\n    'AndroidHorizontalScrollView',\n  );\n  AndroidHorizontalScrollContentView = requireNativeComponent(\n    'AndroidHorizontalScrollContentView',\n  );\n} else if (Platform.OS === 'ios') {\n  RCTScrollView = requireNativeComponent('RCTScrollView');\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');\n} else {\n  RCTScrollView = requireNativeComponent('RCTScrollView');\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');\n}\n\ntype TouchableProps = $ReadOnly<{|\n  onTouchStart?: (event: PressEvent) => void,\n  onTouchMove?: (event: PressEvent) => void,\n  onTouchEnd?: (event: PressEvent) => void,\n  onTouchCancel?: (event: PressEvent) => void,\n  onTouchEndCapture?: (event: PressEvent) => void,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Controls whether iOS should automatically adjust the content inset\n   * for scroll views that are placed behind a navigation bar or\n   * tab bar/ toolbar. The default value is true.\n   * @platform ios\n   */\n  automaticallyAdjustContentInsets?: ?boolean,\n  /**\n   * The amount by which the scroll view content is inset from the edges\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n   * @platform ios\n   */\n  contentInset?: ?EdgeInsetsProp,\n  /**\n   * Used to manually set the starting scroll offset.\n   * The default value is `{x: 0, y: 0}`.\n   * @platform ios\n   */\n  contentOffset?: ?PointProp,\n  /**\n   * When true, the scroll view bounces when it reaches the end of the\n   * content if the content is larger then the scroll view along the axis of\n   * the scroll direction. When false, it disables all bouncing even if\n   * the `alwaysBounce*` props are true. The default value is true.\n   * @platform ios\n   */\n  bounces?: ?boolean,\n  /**\n   * When true, gestures can drive zoom past min/max and the zoom will animate\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\n   * the limits.\n   * @platform ios\n   */\n  bouncesZoom?: ?boolean,\n  /**\n   * When true, the scroll view bounces horizontally when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is true when `horizontal={true}` and false otherwise.\n   * @platform ios\n   */\n  alwaysBounceHorizontal?: ?boolean,\n  /**\n   * When true, the scroll view bounces vertically when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is false when `horizontal={true}` and true otherwise.\n   * @platform ios\n   */\n  alwaysBounceVertical?: ?boolean,\n  /**\n   * When true, the scroll view automatically centers the content when the\n   * content is smaller than the scroll view bounds; when the content is\n   * larger than the scroll view, this property has no effect. The default\n   * value is false.\n   * @platform ios\n   */\n  centerContent?: ?boolean,\n  /**\n   * The style of the scroll indicators.\n   *\n   *   - `'default'` (the default), same as `black`.\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n   *\n   * @platform ios\n   */\n  indicatorStyle?: ?('default' | 'black' | 'white'),\n  /**\n   * When true, the ScrollView will try to lock to only vertical or horizontal\n   * scrolling while dragging.  The default value is false.\n   * @platform ios\n   */\n  directionalLockEnabled?: ?boolean,\n  /**\n   * When false, once tracking starts, won't try to drag if the touch moves.\n   * The default value is true.\n   * @platform ios\n   */\n  canCancelContentTouches?: ?boolean,\n  /**\n   * When set, the scroll view will adjust the scroll position so that the first child that is\n   * currently visible and at or beyond `minIndexForVisible` will not change position. This is\n   * useful for lists that are loading content in both directions, e.g. a chat thread, where new\n   * messages coming in might otherwise cause the scroll position to jump. A value of 0 is common,\n   * but other values such as 1 can be used to skip loading spinners or other content that should\n   * not maintain position.\n   *\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n   * to the top after making the adjustment if the user was within the threshold of the top before\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n   * disruptive to scroll a bunch.\n   *\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\n   *\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n   * whether content is \"visible\" or not.\n   *\n   * @platform ios\n   */\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\n    minIndexForVisible: number,\n    autoscrollToTopThreshold?: ?number,\n  |}>,\n  /**\n   * The maximum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  maximumZoomScale?: ?number,\n  /**\n   * The minimum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  minimumZoomScale?: ?number,\n  /**\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\n   * The default value is true.\n   * @platform ios\n   */\n  pinchGestureEnabled?: ?boolean,\n  /**\n   * This controls how often the scroll event will be fired while scrolling\n   * (as a time interval in ms). A lower number yields better accuracy for code\n   * that is tracking the scroll position, but can lead to scroll performance\n   * problems due to the volume of information being send over the bridge.\n   * You will not notice a difference between values set between 1-16 as the\n   * JS run loop is synced to the screen refresh rate. If you do not need precise\n   * scroll position tracking, set this value higher to limit the information\n   * being sent across the bridge. The default value is zero, which results in\n   * the scroll event being sent only once each time the view is scrolled.\n   * @platform ios\n   */\n  scrollEventThrottle?: ?number,\n  /**\n   * The amount by which the scroll view indicators are inset from the edges\n   * of the scroll view. This should normally be set to the same value as\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n   * @platform ios\n   */\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view scrolls to top when the status bar is tapped.\n   * The default value is true.\n   * @platform ios\n   */\n  scrollsToTop?: ?boolean,\n  /**\n   * When true, shows a horizontal scroll indicator.\n   * The default value is true.\n   */\n  showsHorizontalScrollIndicator?: ?boolean,\n  /**\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n   * of the snapping to the scroll view.\n   *\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n   *   - `'center'` will align the snap in the center\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n   *\n   * @platform ios\n   */\n  snapToAlignment?: ?('start' | 'center' | 'end'),\n  /**\n   * The current scale of the scroll view content. The default value is 1.0.\n   * @platform ios\n   */\n  zoomScale?: ?number,\n  /**\n   * This property specifies how the safe area insets are used to modify the\n   * content area of the scroll view. The default value of this property is\n   * \"never\". Available on iOS 11 and later.\n   * @platform ios\n   */\n  contentInsetAdjustmentBehavior?: ?(\n    | 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n  ),\n  /**\n   * When true, ScrollView will emit updateChildFrames data in scroll events,\n   * otherwise will not compute or emit child frame data.  This only exists\n   * to support legacy issues, `onLayout` should be used instead to retrieve\n   * frame data.\n   * The default value is false.\n   * @platform ios\n   */\n  DEPRECATED_sendUpdatedChildFrames?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Enables nested scrolling for Android API level 21+.\n   * Nested scrolling is supported by default on iOS\n   * @platform android\n   */\n  nestedScrollEnabled?: ?boolean,\n  /**\n   * Sometimes a scrollview takes up more space than its content fills. When this is\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n   * a background and creating unnecessary overdraw. This is an advanced optimization\n   * that is not needed in the general case.\n   * @platform android\n   */\n  endFillColor?: ?ColorValue,\n  /**\n   * Tag used to log scroll performance on this scroll view. Will force\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n   * anything out of the box and you need to implement a custom native\n   * FpsListener for it to be useful.\n   * @platform android\n   */\n  scrollPerfTag?: ?string,\n  /**\n   * Used to override default value of overScroll mode.\n   *\n   * Possible values:\n   *\n   *  - `'auto'` - Default value, allow a user to over-scroll\n   *    this view only if the content is large enough to meaningfully scroll.\n   *  - `'always'` - Always allow a user to over-scroll this view.\n   *  - `'never'` - Never allow a user to over-scroll this view.\n   *\n   * @platform android\n   */\n  overScrollMode?: ?('auto' | 'always' | 'never'),\n|}>;\n\ntype VRProps = $ReadOnly<{|\n  /**\n   * Optionally an image can be used for the scroll bar thumb. This will\n   * override the color. While the image is loading or the image fails to\n   * load the color will be used instead. Use an alpha of 0 in the color\n   * to avoid seeing it while the image is loading.\n   *\n   * - `uri` - a string representing the resource identifier for the image, which\n   * should be either a local file path or the name of a static image resource\n   * - `number` - Opaque type returned by something like\n   * `import IMAGE from './image.jpg'`.\n   * @platform vr\n   */\n  scrollBarThumbImage?: ?($ReadOnly<{||}> | number), // Opaque type returned by import IMAGE from './image.jpg'\n|}>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n  ...TouchableProps,\n  ...IOSProps,\n  ...AndroidProps,\n  ...VRProps,\n\n  /**\n   * These styles will be applied to the scroll view content container which\n   * wraps all of the child views. Example:\n   *\n   * ```\n   * return (\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\n   *   </ScrollView>\n   * );\n   * ...\n   * const styles = StyleSheet.create({\n   *   contentContainer: {\n   *     paddingVertical: 20\n   *   }\n   * });\n   * ```\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n  /**\n   * A floating-point number that determines how quickly the scroll view\n   * decelerates after the user lifts their finger. You may also use string\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n   * for `UIScrollViewDecelerationRateNormal` and\n   * `UIScrollViewDecelerationRateFast` respectively.\n   *\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\n   */\n  decelerationRate?: ?('fast' | 'normal' | number),\n  /**\n   * When true, the scroll view's children are arranged horizontally in a row\n   * instead of vertically in a column. The default value is false.\n   */\n  horizontal?: ?boolean,\n  /**\n   * If sticky headers should stick at the bottom instead of the top of the\n   * ScrollView. This is usually used with inverted ScrollViews.\n   */\n  invertStickyHeaders?: ?boolean,\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *\n   * *Cross platform*\n   *\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n   *\n   * *iOS Only*\n   *\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\n   *     On android this is not supported and it will have the same behavior as 'none'.\n   */\n  keyboardDismissMode?: ?(\n    | 'none' // default\n    | 'on-drag' // cross-platform\n    | 'interactive'\n  ), // ios only\n  /**\n   * Determines when the keyboard should stay visible after a tap.\n   *\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n   *     catch taps, but children of the scroll view can catch taps.\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n   *     a children, (or captured by an ancestor).\n   *   - `false`, deprecated, use 'never' instead\n   *   - `true`, deprecated, use 'always' instead\n   */\n  // $FlowFixMe(site=react_native_fb) Issues found when typing ScrollView\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | false | true),\n  /**\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollBegin?: ?Function,\n  /**\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollEnd?: ?Function,\n\n  /**\n   * Fires at most once per frame during scrolling. The frequency of the\n   * events can be controlled using the `scrollEventThrottle` prop.\n   */\n  onScroll?: ?Function,\n  /**\n   * Called when the user begins to drag the scroll view.\n   */\n  onScrollBeginDrag?: ?Function,\n  /**\n   * Called when the user stops dragging the scroll view and it either stops\n   * or begins to glide.\n   */\n  onScrollEndDrag?: ?Function,\n  /**\n   * Called when scrollable content view of the ScrollView changes.\n   *\n   * Handler function is passed the content width and content height as parameters:\n   * `(contentWidth, contentHeight)`\n   *\n   * It's implemented using onLayout handler attached to the content container\n   * which this ScrollView renders.\n   */\n  onContentSizeChange?: ?Function,\n  onKeyboardDidShow?: (event: PressEvent) => void,\n  /**\n   * When true, the scroll view stops on multiples of the scroll view's size\n   * when scrolling. This can be used for horizontal pagination. The default\n   * value is false.\n   *\n   * Note: Vertical pagination is not supported on Android.\n   */\n  pagingEnabled?: ?boolean,\n  /**\n   * When false, the view cannot be scrolled via touch interaction.\n   * The default value is true.\n   *\n   * Note that the view can always be scrolled by calling `scrollTo`.\n   */\n  scrollEnabled?: ?boolean,\n  /**\n   * When true, shows a vertical scroll indicator.\n   * The default value is true.\n   */\n  showsVerticalScrollIndicator?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * When set, causes the scroll view to stop at multiples of the value of\n   * `snapToInterval`. This can be used for paginating through children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` prop.\n   */\n  snapToInterval?: ?number,\n  /**\n   * When set, causes the scroll view to stop at the defined offsets.\n   * This can be used for paginating through variously sized children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n   */\n  snapToOffsets?: ?$ReadOnlyArray<number>,\n  /**\n   * Experimental: When true, offscreen child views (whose `overflow` value is\n   * `hidden`) are removed from their native backing superview when offscreen.\n   * This can improve scrolling performance on long lists. The default value is\n   * true.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * A RefreshControl component, used to provide pull-to-refresh\n   * functionality for the ScrollView. Only works for vertical ScrollViews\n   * (`horizontal` prop must be `false`).\n   *\n   * See [RefreshControl](docs/refreshcontrol.html).\n   */\n  refreshControl?: ?React.Element<any>,\n  style?: ?ViewStyleProp,\n  children?: React.Node,\n|}>;\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](/react-native/docs/flatlist.html) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\nconst ScrollView = createReactClass({\n  displayName: 'ScrollView',\n  mixins: [ScrollResponder.Mixin],\n\n  _scrollAnimatedValue: (new AnimatedImplementation.Value(\n    0,\n  ): AnimatedImplementation.Value),\n  _scrollAnimatedValueAttachment: (null: ?{detach: () => void}),\n  _stickyHeaderRefs: (new Map(): Map<number, ScrollViewStickyHeader>),\n  _headerLayoutYs: (new Map(): Map<string, number>),\n  getInitialState: function() {\n    return {\n      ...this.scrollResponderMixinGetInitialState(),\n      layoutHeight: null,\n    };\n  },\n\n  UNSAFE_componentWillMount: function() {\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\n      this.props.contentOffset ? this.props.contentOffset.y : 0,\n    );\n    this._scrollAnimatedValue.setOffset(\n      this.props.contentInset ? this.props.contentInset.top : 0,\n    );\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n  },\n\n  componentDidMount: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentDidUpdate: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentWillUnmount: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);\n  },\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: function(): ScrollView {\n    return this;\n  },\n\n  getScrollableNode: function(): any {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  },\n\n  getInnerViewNode: function(): any {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: function(\n    y?: number | {x?: number, y?: number, animated?: boolean},\n    x?: number,\n    animated?: boolean,\n  ) {\n    if (typeof y === 'number') {\n      console.warn(\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n          'animated: true})` instead.',\n      );\n    } else {\n      ({x, y, animated} = y || {});\n    }\n    this.getScrollResponder().scrollResponderScrollTo({\n      x: x || 0,\n      y: y || 0,\n      animated: animated !== false,\n    });\n  },\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: function(options?: {animated?: boolean}) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    this.getScrollResponder().scrollResponderScrollToEnd({\n      animated: animated,\n    });\n  },\n\n  /**\n   * Deprecated, use `scrollTo` instead.\n   */\n  scrollWithoutAnimationTo: function(y: number = 0, x: number = 0) {\n    console.warn(\n      '`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead',\n    );\n    this.scrollTo({x, y, animated: false});\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function() {\n    this.getScrollResponder().scrollResponderFlashScrollIndicators();\n  },\n\n  _getKeyForIndex: function(index, childArray) {\n    // $FlowFixMe Invalid prop usage\n    const child = childArray[index];\n    return child && child.key;\n  },\n\n  _updateAnimatedNodeAttachment: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (\n      this.props.stickyHeaderIndices &&\n      this.props.stickyHeaderIndices.length > 0\n    ) {\n      this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(\n        this._scrollViewRef,\n        'onScroll',\n        [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\n      );\n    }\n  },\n\n  _setStickyHeaderRef: function(key, ref) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  },\n\n  _onStickyHeaderLayout: function(index, event, key) {\n    if (!this.props.stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = this.props.stickyHeaderIndices[\n      indexOfIndex - 1\n    ];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray),\n      );\n      previousHeader && previousHeader.setNextHeaderY(layoutY);\n    }\n  },\n\n  _handleScroll: function(e: Object) {\n    if (__DEV__) {\n      if (\n        this.props.onScroll &&\n        this.props.scrollEventThrottle == null &&\n        Platform.OS === 'ios'\n      ) {\n        console.log(\n          'You specified `onScroll` on a <ScrollView> but not ' +\n            '`scrollEventThrottle`. You will only receive one event. ' +\n            'Using `16` you get all the events but be aware that it may ' +\n            \"cause frame drops, use a bigger number if you don't need as \" +\n            'much precision.',\n        );\n      }\n    }\n    if (Platform.OS === 'android') {\n      if (\n        this.props.keyboardDismissMode === 'on-drag' &&\n        this.state.isTouching\n      ) {\n        dismissKeyboard();\n      }\n    }\n    this.scrollResponderHandleScroll(e);\n  },\n\n  _handleLayout: function(e: Object) {\n    if (this.props.invertStickyHeaders) {\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  },\n\n  _handleContentOnLayout: function(e: Object) {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  },\n\n  _scrollViewRef: (null: ?ScrollView),\n  _setScrollViewRef: function(ref: ?ScrollView) {\n    this._scrollViewRef = ref;\n  },\n\n  _innerViewRef: (null: ?NativeMethodsMixinType),\n  _setInnerViewRef: function(ref: ?NativeMethodsMixinType) {\n    this._innerViewRef = ref;\n  },\n\n  render: function() {\n    let ScrollViewClass;\n    let ScrollContentContainerViewClass;\n    if (Platform.OS === 'android') {\n      if (this.props.horizontal) {\n        ScrollViewClass = AndroidHorizontalScrollView;\n        ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;\n      } else {\n        ScrollViewClass = AndroidScrollView;\n        ScrollContentContainerViewClass = View;\n      }\n    } else {\n      ScrollViewClass = RCTScrollView;\n      ScrollContentContainerViewClass = RCTScrollContentView;\n    }\n\n    invariant(\n      ScrollViewClass !== undefined,\n      'ScrollViewClass must not be undefined',\n    );\n\n    invariant(\n      ScrollContentContainerViewClass !== undefined,\n      'ScrollContentContainerViewClass must not be undefined',\n    );\n\n    const contentContainerStyle = [\n      this.props.horizontal && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    if (__DEV__ && this.props.style) {\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\n        prop => style && style[prop] !== undefined,\n      );\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' +\n          JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.',\n      );\n    }\n\n    let contentSizeChangeProps = {};\n    if (this.props.onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout,\n      };\n    }\n\n    const {stickyHeaderIndices} = this.props;\n    const hasStickyHeaders =\n      stickyHeaderIndices && stickyHeaderIndices.length > 0;\n    const childArray =\n      hasStickyHeaders && React.Children.toArray(this.props.children);\n    const children = hasStickyHeaders\n      ? // $FlowFixMe Invalid prop usage\n        childArray.map((child, index) => {\n          const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n          if (indexOfIndex > -1) {\n            const key = child.key;\n            const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n            return (\n              <ScrollViewStickyHeader\n                key={key}\n                ref={ref => this._setStickyHeaderRef(key, ref)}\n                nextHeaderLayoutY={this._headerLayoutYs.get(\n                  this._getKeyForIndex(nextIndex, childArray),\n                )}\n                onLayout={event =>\n                  this._onStickyHeaderLayout(index, event, key)\n                }\n                scrollAnimatedValue={this._scrollAnimatedValue}\n                inverted={this.props.invertStickyHeaders}\n                scrollViewHeight={this.state.layoutHeight}>\n                {child}\n              </ScrollViewStickyHeader>\n            );\n          } else {\n            return child;\n          }\n        })\n      : this.props.children;\n    const contentContainer = (\n      <ScrollContentContainerViewClass\n        {...contentSizeChangeProps}\n        // $FlowFixMe Invalid prop usage\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders\n            ? false\n            : this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </ScrollContentContainerViewClass>\n    );\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined\n        ? this.props.alwaysBounceHorizontal\n        : this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined\n        ? this.props.alwaysBounceVertical\n        : !this.props.horizontal;\n\n    const DEPRECATED_sendUpdatedChildFrames = !!this.props\n      .DEPRECATED_sendUpdatedChildFrames;\n\n    const baseStyle = this.props.horizontal\n      ? styles.baseHorizontal\n      : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: ([baseStyle, this.props.style]: ?Array<any>),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\n      onResponderGrant: this.scrollResponderHandleResponderGrant,\n      onResponderReject: this.scrollResponderHandleResponderReject,\n      onResponderRelease: this.scrollResponderHandleResponderRelease,\n      // $FlowFixMe\n      onResponderTerminate: this.scrollResponderHandleTerminate,\n      onResponderTerminationRequest: this\n        .scrollResponderHandleTerminationRequest,\n      onScroll: this._handleScroll,\n      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\n      onScrollShouldSetResponder: this\n        .scrollResponderHandleScrollShouldSetResponder,\n      onStartShouldSetResponder: this\n        .scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this\n        .scrollResponderHandleStartShouldSetResponderCapture,\n      onTouchEnd: this.scrollResponderHandleTouchEnd,\n      onTouchMove: this.scrollResponderHandleTouchMove,\n      onTouchStart: this.scrollResponderHandleTouchStart,\n      onTouchCancel: this.scrollResponderHandleTouchCancel,\n      scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),\n      scrollEventThrottle: hasStickyHeaders\n        ? 1\n        : this.props.scrollEventThrottle,\n      sendMomentumEvents:\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\n          ? true\n          : false,\n      DEPRECATED_sendUpdatedChildFrames,\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\n      pagingEnabled: Platform.select({\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\n        ios:\n          this.props.pagingEnabled &&\n          this.props.snapToInterval == null &&\n          this.props.snapToOffsets == null,\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\n        android:\n          this.props.pagingEnabled ||\n          this.props.snapToInterval != null ||\n          this.props.snapToOffsets != null,\n      }),\n    };\n\n    const {decelerationRate} = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        // tvOS lacks native support for RefreshControl, so don't include it in that case\n        return (\n          <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n            {Platform.isTV ? null : refreshControl}\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should only apply props.style on the wrapper\n        // however, the ScrollView still needs the baseStyle to be scrollable\n\n        return React.cloneElement(\n          refreshControl,\n          {style: props.style},\n          <ScrollViewClass\n            {...props}\n            style={baseStyle}\n            ref={this._setScrollViewRef}>\n            {contentContainer}\n          </ScrollViewClass>,\n        );\n      }\n    }\n    return (\n      <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n        {contentContainer}\n      </ScrollViewClass>\n    );\n  },\n});\n\nconst TypedScrollView = ((ScrollView: any): Class<\n  InternalScrollViewType<Props>,\n>);\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nmodule.exports = TypedScrollView;\n"]}