377b449176dbf5eb0c38a6e9b86245e4










'use strict';




var deepDiffer = function deepDiffer(
one,
two)

{var maxDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  if (maxDepth === 0) {
    return true;
  }
  if (one === two) {

    return false;
  }
  if (typeof one === 'function' && typeof two === 'function') {

    return false;
  }
  if (typeof one !== 'object' || one === null) {

    return one !== two;
  }
  if (typeof two !== 'object' || two === null) {


    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {

    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii], maxDepth - 1)) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key], maxDepth - 1)) {
        return true;
      }
    }
    for (var twoKey in two) {


      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }
  return false;
};

module.exports = deepDiffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBEaWZmZXIuanMiXSwibmFtZXMiOlsiZGVlcERpZmZlciIsIm9uZSIsInR3byIsIm1heERlcHRoIiwiY29uc3RydWN0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJsZW4iLCJsZW5ndGgiLCJpaSIsImtleSIsInR3b0tleSIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFVQTs7Ozs7QUFLQSxJQUFNQSxhQUFhLFNBQWJBLFVBQWE7QUFDakJDLEdBRGlCO0FBRWpCQyxHQUZpQjs7QUFJUixLQURUQyxRQUNTLHVFQURVLENBQUMsQ0FDWDtBQUNULE1BQUlBLGFBQWEsQ0FBakIsRUFBb0I7QUFDbEIsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxNQUFJRixRQUFRQyxHQUFaLEVBQWlCOztBQUVmLFdBQU8sS0FBUDtBQUNEO0FBQ0QsTUFBSSxPQUFPRCxHQUFQLEtBQWUsVUFBZixJQUE2QixPQUFPQyxHQUFQLEtBQWUsVUFBaEQsRUFBNEQ7O0FBRTFELFdBQU8sS0FBUDtBQUNEO0FBQ0QsTUFBSSxPQUFPRCxHQUFQLEtBQWUsUUFBZixJQUEyQkEsUUFBUSxJQUF2QyxFQUE2Qzs7QUFFM0MsV0FBT0EsUUFBUUMsR0FBZjtBQUNEO0FBQ0QsTUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQkEsUUFBUSxJQUF2QyxFQUE2Qzs7O0FBRzNDLFdBQU8sSUFBUDtBQUNEO0FBQ0QsTUFBSUQsSUFBSUcsV0FBSixLQUFvQkYsSUFBSUUsV0FBNUIsRUFBeUM7QUFDdkMsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxNQUFJQyxNQUFNQyxPQUFOLENBQWNMLEdBQWQsQ0FBSixFQUF3Qjs7QUFFdEIsUUFBTU0sTUFBTU4sSUFBSU8sTUFBaEI7QUFDQSxRQUFJTixJQUFJTSxNQUFKLEtBQWVELEdBQW5CLEVBQXdCO0FBQ3RCLGFBQU8sSUFBUDtBQUNEO0FBQ0QsU0FBSyxJQUFJRSxLQUFLLENBQWQsRUFBaUJBLEtBQUtGLEdBQXRCLEVBQTJCRSxJQUEzQixFQUFpQztBQUMvQixVQUFJVCxXQUFXQyxJQUFJUSxFQUFKLENBQVgsRUFBb0JQLElBQUlPLEVBQUosQ0FBcEIsRUFBNkJOLFdBQVcsQ0FBeEMsQ0FBSixFQUFnRDtBQUM5QyxlQUFPLElBQVA7QUFDRDtBQUNGO0FBQ0YsR0FYRCxNQVdPO0FBQ0wsU0FBSyxJQUFNTyxHQUFYLElBQWtCVCxHQUFsQixFQUF1QjtBQUNyQixVQUFJRCxXQUFXQyxJQUFJUyxHQUFKLENBQVgsRUFBcUJSLElBQUlRLEdBQUosQ0FBckIsRUFBK0JQLFdBQVcsQ0FBMUMsQ0FBSixFQUFrRDtBQUNoRCxlQUFPLElBQVA7QUFDRDtBQUNGO0FBQ0QsU0FBSyxJQUFNUSxNQUFYLElBQXFCVCxHQUFyQixFQUEwQjs7O0FBR3hCLFVBQUlELElBQUlVLE1BQUosTUFBZ0JDLFNBQWhCLElBQTZCVixJQUFJUyxNQUFKLE1BQWdCQyxTQUFqRCxFQUE0RDtBQUMxRCxlQUFPLElBQVA7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxTQUFPLEtBQVA7QUFDRCxDQXRERDs7QUF3REFDLE9BQU9DLE9BQVAsR0FBaUJkLFVBQWpCIiwiZmlsZSI6ImRlZXBEaWZmZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKlxuICogQHJldHVybnMge2Jvb2x9IHRydWUgaWYgZGlmZmVyZW50LCBmYWxzZSBpZiBlcXVhbFxuICovXG5jb25zdCBkZWVwRGlmZmVyID0gZnVuY3Rpb24oXG4gIG9uZTogYW55LFxuICB0d286IGFueSxcbiAgbWF4RGVwdGg6IG51bWJlciA9IC0xLFxuKTogYm9vbGVhbiB7XG4gIGlmIChtYXhEZXB0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChvbmUgPT09IHR3bykge1xuICAgIC8vIFNob3J0IGNpcmN1aXQgb24gaWRlbnRpY2FsIG9iamVjdCByZWZlcmVuY2VzIGluc3RlYWQgb2YgdHJhdmVyc2luZyB0aGVtLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIG9uZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHdvID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gV2UgY29uc2lkZXIgYWxsIGZ1bmN0aW9ucyBlcXVhbFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIG9uZSAhPT0gJ29iamVjdCcgfHwgb25lID09PSBudWxsKSB7XG4gICAgLy8gUHJpbWl0aXZlcyBjYW4gYmUgZGlyZWN0bHkgY29tcGFyZWRcbiAgICByZXR1cm4gb25lICE9PSB0d287XG4gIH1cbiAgaWYgKHR5cGVvZiB0d28gIT09ICdvYmplY3QnIHx8IHR3byA9PT0gbnVsbCkge1xuICAgIC8vIFdlIGtub3cgdGhleSBhcmUgZGlmZmVyZW50IGJlY2F1c2UgdGhlIHByZXZpb3VzIGNhc2Ugd291bGQgaGF2ZSB0cmlnZ2VyZWRcbiAgICAvLyBvdGhlcndpc2UuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9uZS5jb25zdHJ1Y3RvciAhPT0gdHdvLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob25lKSkge1xuICAgIC8vIFdlIGtub3cgdHdvIGlzIGFsc28gYW4gYXJyYXkgYmVjYXVzZSB0aGUgY29uc3RydWN0b3JzIGFyZSBlcXVhbFxuICAgIGNvbnN0IGxlbiA9IG9uZS5sZW5ndGg7XG4gICAgaWYgKHR3by5sZW5ndGggIT09IGxlbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgIGlmIChkZWVwRGlmZmVyKG9uZVtpaV0sIHR3b1tpaV0sIG1heERlcHRoIC0gMSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9uZSkge1xuICAgICAgaWYgKGRlZXBEaWZmZXIob25lW2tleV0sIHR3b1trZXldLCBtYXhEZXB0aCAtIDEpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR3b0tleSBpbiB0d28pIHtcbiAgICAgIC8vIFRoZSBvbmx5IGNhc2Ugd2UgaGF2ZW4ndCBjaGVja2VkIHlldCBpcyBrZXlzIHRoYXQgYXJlIGluIHR3byBidXQgYXJlbid0XG4gICAgICAvLyBpbiBvbmUsIHdoaWNoIG1lYW5zIHRoZXkgYXJlIGRpZmZlcmVudC5cbiAgICAgIGlmIChvbmVbdHdvS2V5XSA9PT0gdW5kZWZpbmVkICYmIHR3b1t0d29LZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcERpZmZlcjtcbiJdfQ==