{"version":3,"sources":["Systrace.js"],"names":["invariant","require","TRACE_TAG_REACT_APPS","TRACE_TAG_JS_VM_CALLS","_enabled","_asyncCookie","_markStack","_markStackIndex","_canInstallReactHook","REACT_MARKER","userTimingPolyfill","__DEV__","mark","markName","systraceLabel","indexOfId","lastIndexOf","cutoffIndex","length","slice","Systrace","beginEvent","measure","measureName","startMark","endMark","topMark","endEvent","clearMarks","clearMeasures","installReactHook","global","performance","setEnabled","enabled","nativeTraceBeginLegacy","nativeTraceEndLegacy","undefined","isEnabled","profileName","args","nativeTraceBeginSection","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","module","exports"],"mappings":"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","file":"Systrace.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise\nconst TRACE_TAG_JS_VM_CALLS = 1 << 27; // eslint-disable-line no-bitwise\n\nlet _enabled = false;\nlet _asyncCookie = 0;\nconst _markStack = [];\nlet _markStackIndex = -1;\nlet _canInstallReactHook = false;\n\n// Implements a subset of User Timing API necessary for React measurements.\n// https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\nconst REACT_MARKER = '\\u269B';\nconst userTimingPolyfill = __DEV__\n  ? {\n      mark(markName: string) {\n        if (_enabled) {\n          _markStackIndex++;\n          _markStack[_markStackIndex] = markName;\n          let systraceLabel = markName;\n          // Since perf measurements are a shared namespace in User Timing API,\n          // we prefix all React results with a React emoji.\n          if (markName[0] === REACT_MARKER) {\n            // This is coming from React.\n            // Removing component IDs keeps trace colors stable.\n            const indexOfId = markName.lastIndexOf(' (#');\n            const cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;\n            // Also cut off the emoji because it breaks Systrace\n            systraceLabel = markName.slice(2, cutoffIndex);\n          }\n          Systrace.beginEvent(systraceLabel);\n        }\n      },\n      measure(measureName: string, startMark: ?string, endMark: ?string) {\n        if (_enabled) {\n          invariant(\n            typeof measureName === 'string' &&\n              typeof startMark === 'string' &&\n              typeof endMark === 'undefined',\n            'Only performance.measure(string, string) overload is supported.',\n          );\n          const topMark = _markStack[_markStackIndex];\n          invariant(\n            startMark === topMark,\n            'There was a mismatching performance.measure() call. ' +\n              'Expected \"%s\" but got \"%s.\"',\n            topMark,\n            startMark,\n          );\n          _markStackIndex--;\n          // We can't use more descriptive measureName because Systrace doesn't\n          // let us edit labels post factum.\n          Systrace.endEvent();\n        }\n      },\n      clearMarks(markName: string) {\n        if (_enabled) {\n          if (_markStackIndex === -1) {\n            return;\n          }\n          if (markName === _markStack[_markStackIndex]) {\n            // React uses this for \"cancelling\" started measurements.\n            // Systrace doesn't support deleting measurements, so we just stop them.\n            if (userTimingPolyfill != null) {\n              userTimingPolyfill.measure(markName, markName);\n            }\n          }\n        }\n      },\n      clearMeasures() {\n        // React calls this to avoid memory leaks in browsers, but we don't keep\n        // measurements anyway.\n      },\n    }\n  : null;\n\nconst Systrace = {\n  installReactHook() {\n    if (_enabled) {\n      if (__DEV__) {\n        global.performance = userTimingPolyfill;\n      }\n    }\n    _canInstallReactHook = true;\n  },\n\n  setEnabled(enabled: boolean) {\n    if (_enabled !== enabled) {\n      if (__DEV__) {\n        if (enabled) {\n          global.nativeTraceBeginLegacy &&\n            global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);\n        } else {\n          global.nativeTraceEndLegacy &&\n            global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);\n        }\n        if (_canInstallReactHook) {\n          if (enabled && global.performance === undefined) {\n            global.performance = userTimingPolyfill;\n          }\n        }\n      }\n      _enabled = enabled;\n    }\n  },\n\n  isEnabled(): boolean {\n    return _enabled;\n  },\n\n  /**\n   * beginEvent/endEvent for starting and then ending a profile within the same call stack frame\n   **/\n  beginEvent(profileName?: any, args?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);\n    }\n  },\n\n  endEvent() {\n    if (_enabled) {\n      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);\n    }\n  },\n\n  /**\n   * beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either\n   * occur on another thread or out of the current stack frame, eg await\n   * the returned cookie variable should be used as input into the endAsyncEvent call to end the profile\n   **/\n  beginAsyncEvent(profileName?: any): any {\n    const cookie = _asyncCookie;\n    if (_enabled) {\n      _asyncCookie++;\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceBeginAsyncSection(\n        TRACE_TAG_REACT_APPS,\n        profileName,\n        cookie,\n      );\n    }\n    return cookie;\n  },\n\n  endAsyncEvent(profileName?: any, cookie?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceEndAsyncSection(\n        TRACE_TAG_REACT_APPS,\n        profileName,\n        cookie,\n      );\n    }\n  },\n\n  /**\n   * counterEvent registers the value to the profileName on the systrace timeline\n   **/\n  counterEvent(profileName?: any, value?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceCounter &&\n        global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);\n    }\n  },\n};\n\nif (__DEV__) {\n  // This is needed, because require callis in polyfills are not processed as\n  // other files. Therefore, calls to `require('moduleId')` are not replaced\n  // with numeric IDs\n  // TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)\n  (require: any).Systrace = Systrace;\n}\n\nmodule.exports = Systrace;\n"]}