{"version":3,"sources":["processColor.js"],"names":["Platform","require","normalizeColor","processColor","color","undefined","int32Color","OS","module","exports"],"mappings":";;;;;;;;;;AAUA;;AAEA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;AAEA,IAAMC,iBAAiBD,QAAQ,gBAAR,CAAvB;;;AAGA,SAASE,YAAT,CAAsBC,KAAtB,EAA2D;AACzD,MAAIA,UAAUC,SAAV,IAAuBD,UAAU,IAArC,EAA2C;AACzC,WAAOA,KAAP;AACD;;AAED,MAAIE,aAAaJ,eAAeE,KAAf,CAAjB;AACA,MAAIE,eAAe,IAAf,IAAuBA,eAAeD,SAA1C,EAAqD;AACnD,WAAOA,SAAP;AACD;;;AAGDC,eAAa,CAAEA,cAAc,EAAf,GAAsBA,eAAe,CAAtC,MAA8C,CAA3D;;AAEA,MAAIN,SAASO,EAAT,KAAgB,SAApB,EAA+B;;;;;AAK7BD,iBAAaA,aAAa,GAA1B;AACD;AACD,SAAOA,UAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBN,YAAjB","file":"processColor.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Platform = require('Platform');\n\nconst normalizeColor = require('normalizeColor');\n\n/* eslint no-bitwise: 0 */\nfunction processColor(color?: ?(string | number)): ?number {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let int32Color = normalizeColor(color);\n  if (int32Color === null || int32Color === undefined) {\n    return undefined;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  int32Color = ((int32Color << 24) | (int32Color >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    int32Color = int32Color | 0x0;\n  }\n  return int32Color;\n}\n\nmodule.exports = processColor;\n"]}