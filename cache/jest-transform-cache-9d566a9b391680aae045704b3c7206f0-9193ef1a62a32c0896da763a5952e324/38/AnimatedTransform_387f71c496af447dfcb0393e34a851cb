013812ed8aaddd62e159b38dc5c371b4









'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if ("value" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var AnimatedNode = require('./AnimatedNode');
var AnimatedWithChildren = require('./AnimatedWithChildren');
var NativeAnimatedHelper = require('../NativeAnimatedHelper');var

AnimatedTransform = function (_AnimatedWithChildren) {_inherits(AnimatedTransform, _AnimatedWithChildren);


  function AnimatedTransform(transforms) {_classCallCheck(this, AnimatedTransform);var _this = _possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

    _this._transforms = transforms;return _this;
  }_createClass(AnimatedTransform, [{ key: '__makeNative', value: function __makeNative()

    {
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      });
      _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__makeNative', this).call(this);
    } }, { key: '__getValue', value: function __getValue()

    {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    } }, { key: '__getAnimatedValue', value: function __getAnimatedValue()

    {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            result[key] = value.__getAnimatedValue();
          } else {

            result[key] = value;
          }
        }
        return result;
      });
    } }, { key: '__attach', value: function __attach()

    {var _this2 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            value.__addChild(_this2);
          }
        }
      });
    } }, { key: '__detach', value: function __detach()

    {var _this3 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            value.__removeChild(_this3);
          }
        }
      });
      _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__detach', this).call(this);
    } }, { key: '__getNativeConfig', value: function __getNativeConfig()

    {
      var transConfigs = [];

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag() });

          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: value });

          }
        }
      });

      NativeAnimatedHelper.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs };

    } }]);return AnimatedTransform;}(AnimatedWithChildren);


module.exports = AnimatedTransform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkVHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbIkFuaW1hdGVkTm9kZSIsInJlcXVpcmUiLCJBbmltYXRlZFdpdGhDaGlsZHJlbiIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwiQW5pbWF0ZWRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1zIiwiX3RyYW5zZm9ybXMiLCJmb3JFYWNoIiwia2V5IiwidHJhbnNmb3JtIiwidmFsdWUiLCJfX21ha2VOYXRpdmUiLCJtYXAiLCJyZXN1bHQiLCJfX2dldFZhbHVlIiwiX19nZXRBbmltYXRlZFZhbHVlIiwiX19hZGRDaGlsZCIsIl9fcmVtb3ZlQ2hpbGQiLCJ0cmFuc0NvbmZpZ3MiLCJwdXNoIiwidHlwZSIsInByb3BlcnR5Iiwibm9kZVRhZyIsIl9fZ2V0TmF0aXZlVGFnIiwidmFsaWRhdGVUcmFuc2Zvcm0iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFTQSxhOztBQUVBLElBQU1BLGVBQWVDLFFBQVEsZ0JBQVIsQ0FBckI7QUFDQSxJQUFNQyx1QkFBdUJELFFBQVEsd0JBQVIsQ0FBN0I7QUFDQSxJQUFNRSx1QkFBdUJGLFFBQVEseUJBQVIsQ0FBN0IsQzs7QUFFTUcsaUI7OztBQUdKLDZCQUFZQyxVQUFaLEVBQWdEOztBQUU5QyxVQUFLQyxXQUFMLEdBQW1CRCxVQUFuQixDQUY4QztBQUcvQyxHOztBQUVjO0FBQ2IsV0FBS0MsV0FBTCxDQUFpQkMsT0FBakIsQ0FBeUIscUJBQWE7QUFDcEMsYUFBSyxJQUFNQyxHQUFYLElBQWtCQyxTQUFsQixFQUE2QjtBQUMzQixjQUFNQyxRQUFRRCxVQUFVRCxHQUFWLENBQWQ7QUFDQSxjQUFJRSxpQkFBaUJWLFlBQXJCLEVBQW1DO0FBQ2pDVSxrQkFBTUMsWUFBTjtBQUNEO0FBQ0Y7QUFDRixPQVBEO0FBUUE7QUFDRCxLOztBQUVvQztBQUNuQyxhQUFPLEtBQUtMLFdBQUwsQ0FBaUJNLEdBQWpCLENBQXFCLHFCQUFhO0FBQ3ZDLFlBQU1DLFNBQVMsRUFBZjtBQUNBLGFBQUssSUFBTUwsR0FBWCxJQUFrQkMsU0FBbEIsRUFBNkI7QUFDM0IsY0FBTUMsUUFBUUQsVUFBVUQsR0FBVixDQUFkO0FBQ0EsY0FBSUUsaUJBQWlCVixZQUFyQixFQUFtQztBQUNqQ2EsbUJBQU9MLEdBQVAsSUFBY0UsTUFBTUksVUFBTixFQUFkO0FBQ0QsV0FGRCxNQUVPO0FBQ0xELG1CQUFPTCxHQUFQLElBQWNFLEtBQWQ7QUFDRDtBQUNGO0FBQ0QsZUFBT0csTUFBUDtBQUNELE9BWE0sQ0FBUDtBQVlELEs7O0FBRTRDO0FBQzNDLGFBQU8sS0FBS1AsV0FBTCxDQUFpQk0sR0FBakIsQ0FBcUIscUJBQWE7QUFDdkMsWUFBTUMsU0FBUyxFQUFmO0FBQ0EsYUFBSyxJQUFNTCxHQUFYLElBQWtCQyxTQUFsQixFQUE2QjtBQUMzQixjQUFNQyxRQUFRRCxVQUFVRCxHQUFWLENBQWQ7QUFDQSxjQUFJRSxpQkFBaUJWLFlBQXJCLEVBQW1DO0FBQ2pDYSxtQkFBT0wsR0FBUCxJQUFjRSxNQUFNSyxrQkFBTixFQUFkO0FBQ0QsV0FGRCxNQUVPOztBQUVMRixtQkFBT0wsR0FBUCxJQUFjRSxLQUFkO0FBQ0Q7QUFDRjtBQUNELGVBQU9HLE1BQVA7QUFDRCxPQVpNLENBQVA7QUFhRCxLOztBQUVnQjtBQUNmLFdBQUtQLFdBQUwsQ0FBaUJDLE9BQWpCLENBQXlCLHFCQUFhO0FBQ3BDLGFBQUssSUFBTUMsR0FBWCxJQUFrQkMsU0FBbEIsRUFBNkI7QUFDM0IsY0FBTUMsUUFBUUQsVUFBVUQsR0FBVixDQUFkO0FBQ0EsY0FBSUUsaUJBQWlCVixZQUFyQixFQUFtQztBQUNqQ1Usa0JBQU1NLFVBQU4sQ0FBaUIsTUFBakI7QUFDRDtBQUNGO0FBQ0YsT0FQRDtBQVFELEs7O0FBRWdCO0FBQ2YsV0FBS1YsV0FBTCxDQUFpQkMsT0FBakIsQ0FBeUIscUJBQWE7QUFDcEMsYUFBSyxJQUFNQyxHQUFYLElBQWtCQyxTQUFsQixFQUE2QjtBQUMzQixjQUFNQyxRQUFRRCxVQUFVRCxHQUFWLENBQWQ7QUFDQSxjQUFJRSxpQkFBaUJWLFlBQXJCLEVBQW1DO0FBQ2pDVSxrQkFBTU8sYUFBTixDQUFvQixNQUFwQjtBQUNEO0FBQ0Y7QUFDRixPQVBEO0FBUUE7QUFDRCxLOztBQUV3QjtBQUN2QixVQUFNQyxlQUFlLEVBQXJCOztBQUVBLFdBQUtaLFdBQUwsQ0FBaUJDLE9BQWpCLENBQXlCLHFCQUFhO0FBQ3BDLGFBQUssSUFBTUMsR0FBWCxJQUFrQkMsU0FBbEIsRUFBNkI7QUFDM0IsY0FBTUMsUUFBUUQsVUFBVUQsR0FBVixDQUFkO0FBQ0EsY0FBSUUsaUJBQWlCVixZQUFyQixFQUFtQztBQUNqQ2tCLHlCQUFhQyxJQUFiLENBQWtCO0FBQ2hCQyxvQkFBTSxVQURVO0FBRWhCQyx3QkFBVWIsR0FGTTtBQUdoQmMsdUJBQVNaLE1BQU1hLGNBQU4sRUFITyxFQUFsQjs7QUFLRCxXQU5ELE1BTU87QUFDTEwseUJBQWFDLElBQWIsQ0FBa0I7QUFDaEJDLG9CQUFNLFFBRFU7QUFFaEJDLHdCQUFVYixHQUZNO0FBR2hCRSwwQkFIZ0IsRUFBbEI7O0FBS0Q7QUFDRjtBQUNGLE9BakJEOztBQW1CQVAsMkJBQXFCcUIsaUJBQXJCLENBQXVDTixZQUF2QztBQUNBLGFBQU87QUFDTEUsY0FBTSxXQUREO0FBRUxmLG9CQUFZYSxZQUZQLEVBQVA7O0FBSUQsSyxnQ0FyRzZCaEIsb0I7OztBQXdHaEN1QixPQUFPQyxPQUFQLEdBQWlCdEIsaUJBQWpCIiwiZmlsZSI6IkFuaW1hdGVkVHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkTm9kZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWROb2RlJyk7XG5jb25zdCBBbmltYXRlZFdpdGhDaGlsZHJlbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRXaXRoQ2hpbGRyZW4nKTtcbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuY2xhc3MgQW5pbWF0ZWRUcmFuc2Zvcm0gZXh0ZW5kcyBBbmltYXRlZFdpdGhDaGlsZHJlbiB7XG4gIF90cmFuc2Zvcm1zOiAkUmVhZE9ubHlBcnJheTxPYmplY3Q+O1xuXG4gIGNvbnN0cnVjdG9yKHRyYW5zZm9ybXM6ICRSZWFkT25seUFycmF5PE9iamVjdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3RyYW5zZm9ybXMgPSB0cmFuc2Zvcm1zO1xuICB9XG5cbiAgX19tYWtlTmF0aXZlKCkge1xuICAgIHRoaXMuX3RyYW5zZm9ybXMuZm9yRWFjaCh0cmFuc2Zvcm0gPT4ge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICAgIHZhbHVlLl9fbWFrZU5hdGl2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3VwZXIuX19tYWtlTmF0aXZlKCk7XG4gIH1cblxuICBfX2dldFZhbHVlKCk6ICRSZWFkT25seUFycmF5PE9iamVjdD4ge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2Zvcm1zLm1hcCh0cmFuc2Zvcm0gPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0cmFuc2Zvcm0pIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0cmFuc2Zvcm1ba2V5XTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQW5pbWF0ZWROb2RlKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZS5fX2dldFZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIF9fZ2V0QW5pbWF0ZWRWYWx1ZSgpOiAkUmVhZE9ubHlBcnJheTxPYmplY3Q+IHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3Jtcy5tYXAodHJhbnNmb3JtID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWUuX19nZXRBbmltYXRlZFZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQWxsIHRyYW5zZm9ybSBjb21wb25lbnRzIG5lZWRlZCB0byByZWNvbXBvc2UgbWF0cml4XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIF9fYXR0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX3RyYW5zZm9ybXMuZm9yRWFjaCh0cmFuc2Zvcm0gPT4ge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICAgIHZhbHVlLl9fYWRkQ2hpbGQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9fZGV0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX3RyYW5zZm9ybXMuZm9yRWFjaCh0cmFuc2Zvcm0gPT4ge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICAgIHZhbHVlLl9fcmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdXBlci5fX2RldGFjaCgpO1xuICB9XG5cbiAgX19nZXROYXRpdmVDb25maWcoKTogYW55IHtcbiAgICBjb25zdCB0cmFuc0NvbmZpZ3MgPSBbXTtcblxuICAgIHRoaXMuX3RyYW5zZm9ybXMuZm9yRWFjaCh0cmFuc2Zvcm0gPT4ge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICAgIHRyYW5zQ29uZmlncy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdhbmltYXRlZCcsXG4gICAgICAgICAgICBwcm9wZXJ0eToga2V5LFxuICAgICAgICAgICAgbm9kZVRhZzogdmFsdWUuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFuc0NvbmZpZ3MucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAnc3RhdGljJyxcbiAgICAgICAgICAgIHByb3BlcnR5OiBrZXksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIudmFsaWRhdGVUcmFuc2Zvcm0odHJhbnNDb25maWdzKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3RyYW5zZm9ybScsXG4gICAgICB0cmFuc2Zvcm1zOiB0cmFuc0NvbmZpZ3MsXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGVkVHJhbnNmb3JtO1xuIl19