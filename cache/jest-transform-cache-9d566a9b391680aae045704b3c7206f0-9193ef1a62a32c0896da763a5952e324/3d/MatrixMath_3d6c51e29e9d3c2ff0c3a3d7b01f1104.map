{"version":3,"sources":["MatrixMath.js"],"names":["invariant","require","MatrixMath","createIdentityMatrix","createCopy","m","createOrthographic","left","right","bottom","top","near","far","a","b","c","tx","ty","tz","createFrustum","r_width","r_height","r_depth","x","y","A","B","C","D","createPerspective","fovInRadians","aspect","h","Math","tan","createTranslate2d","mat","reuseTranslate2dCommand","matrixCommand","reuseTranslate3dCommand","z","createScale","factor","reuseScaleCommand","reuseScale3dCommand","reusePerspectiveCommand","p","reuseScaleXCommand","reuseScaleYCommand","reuseScaleZCommand","reuseRotateXCommand","radians","cos","sin","reuseRotateYCommand","amount","reuseRotateZCommand","createRotateZ","reuseSkewXCommand","reuseSkewYCommand","multiplyInto","out","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","determinant","matrix","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","inverse","det","transpose","multiplyVectorByMatrix","v","vx","vy","vz","vw","v3Length","sqrt","v3Normalize","vector","im","v3Dot","v3Combine","aScale","bScale","v3Cross","quaternionToDegreesXYZ","q","row","qx","qy","qz","qw","qw2","qx2","qy2","qz2","test","unit","conv","PI","atan2","roundTo3Places","asin","n","arr","toString","split","round","decomposeMatrix","transformMatrix","length","perspective","quaternion","scale","skew","translation","perspectiveMatrix","i","push","j","value","rightHandSide","inversePerspectiveMatrix","transposedInversePerspectiveMatrix","pdum3","max","rotationDegrees","rotate","rotateX","rotateY","scaleX","scaleY","translateX","translateY","module","exports"],"mappings":"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","file":"MatrixMath.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n */\n\n/* eslint-disable space-infix-ops */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Memory conservative (mutative) matrix math utilities. Uses \"command\"\n * matrices, which are reusable.\n */\nconst MatrixMath = {\n  createIdentityMatrix: function() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  },\n\n  createCopy: function(m) {\n    return [\n      m[0],\n      m[1],\n      m[2],\n      m[3],\n      m[4],\n      m[5],\n      m[6],\n      m[7],\n      m[8],\n      m[9],\n      m[10],\n      m[11],\n      m[12],\n      m[13],\n      m[14],\n      m[15],\n    ];\n  },\n\n  createOrthographic: function(left, right, bottom, top, near, far) {\n    const a = 2 / (right - left);\n    const b = 2 / (top - bottom);\n    const c = -2 / (far - near);\n\n    const tx = -(right + left) / (right - left);\n    const ty = -(top + bottom) / (top - bottom);\n    const tz = -(far + near) / (far - near);\n\n    return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];\n  },\n\n  createFrustum: function(left, right, bottom, top, near, far) {\n    const r_width = 1 / (right - left);\n    const r_height = 1 / (top - bottom);\n    const r_depth = 1 / (near - far);\n    const x = 2 * (near * r_width);\n    const y = 2 * (near * r_height);\n    const A = (right + left) * r_width;\n    const B = (top + bottom) * r_height;\n    const C = (far + near) * r_depth;\n    const D = 2 * (far * near * r_depth);\n    return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];\n  },\n\n  /**\n   * This create a perspective projection towards negative z\n   * Clipping the z range of [-near, -far]\n   *\n   * @param fovInRadians - field of view in randians\n   */\n  createPerspective: function(fovInRadians, aspect, near, far) {\n    const h = 1 / Math.tan(fovInRadians / 2);\n    const r_depth = 1 / (near - far);\n    const C = (far + near) * r_depth;\n    const D = 2 * (far * near * r_depth);\n    return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];\n  },\n\n  createTranslate2d: function(x, y) {\n    const mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseTranslate2dCommand(mat, x, y);\n    return mat;\n  },\n\n  reuseTranslate2dCommand: function(matrixCommand, x, y) {\n    matrixCommand[12] = x;\n    matrixCommand[13] = y;\n  },\n\n  reuseTranslate3dCommand: function(matrixCommand, x, y, z) {\n    matrixCommand[12] = x;\n    matrixCommand[13] = y;\n    matrixCommand[14] = z;\n  },\n\n  createScale: function(factor) {\n    const mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseScaleCommand(mat, factor);\n    return mat;\n  },\n\n  reuseScaleCommand: function(matrixCommand, factor) {\n    matrixCommand[0] = factor;\n    matrixCommand[5] = factor;\n  },\n\n  reuseScale3dCommand: function(matrixCommand, x, y, z) {\n    matrixCommand[0] = x;\n    matrixCommand[5] = y;\n    matrixCommand[10] = z;\n  },\n\n  reusePerspectiveCommand: function(matrixCommand, p) {\n    matrixCommand[11] = -1 / p;\n  },\n\n  reuseScaleXCommand(matrixCommand, factor) {\n    matrixCommand[0] = factor;\n  },\n\n  reuseScaleYCommand(matrixCommand, factor) {\n    matrixCommand[5] = factor;\n  },\n\n  reuseScaleZCommand(matrixCommand, factor) {\n    matrixCommand[10] = factor;\n  },\n\n  reuseRotateXCommand: function(matrixCommand, radians) {\n    matrixCommand[5] = Math.cos(radians);\n    matrixCommand[6] = Math.sin(radians);\n    matrixCommand[9] = -Math.sin(radians);\n    matrixCommand[10] = Math.cos(radians);\n  },\n\n  reuseRotateYCommand: function(matrixCommand, amount) {\n    matrixCommand[0] = Math.cos(amount);\n    matrixCommand[2] = -Math.sin(amount);\n    matrixCommand[8] = Math.sin(amount);\n    matrixCommand[10] = Math.cos(amount);\n  },\n\n  // http://www.w3.org/TR/css3-transforms/#recomposing-to-a-2d-matrix\n  reuseRotateZCommand: function(matrixCommand, radians) {\n    matrixCommand[0] = Math.cos(radians);\n    matrixCommand[1] = Math.sin(radians);\n    matrixCommand[4] = -Math.sin(radians);\n    matrixCommand[5] = Math.cos(radians);\n  },\n\n  createRotateZ: function(radians) {\n    const mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateZCommand(mat, radians);\n    return mat;\n  },\n\n  reuseSkewXCommand: function(matrixCommand, radians) {\n    matrixCommand[4] = Math.tan(radians);\n  },\n\n  reuseSkewYCommand: function(matrixCommand, radians) {\n    matrixCommand[1] = Math.tan(radians);\n  },\n\n  multiplyInto: function(out, a, b) {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    let b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  },\n\n  determinant(matrix: Array<number>): number {\n    const [\n      m00,\n      m01,\n      m02,\n      m03,\n      m10,\n      m11,\n      m12,\n      m13,\n      m20,\n      m21,\n      m22,\n      m23,\n      m30,\n      m31,\n      m32,\n      m33,\n    ] = matrix;\n    return (\n      m03 * m12 * m21 * m30 -\n      m02 * m13 * m21 * m30 -\n      m03 * m11 * m22 * m30 +\n      m01 * m13 * m22 * m30 +\n      m02 * m11 * m23 * m30 -\n      m01 * m12 * m23 * m30 -\n      m03 * m12 * m20 * m31 +\n      m02 * m13 * m20 * m31 +\n      m03 * m10 * m22 * m31 -\n      m00 * m13 * m22 * m31 -\n      m02 * m10 * m23 * m31 +\n      m00 * m12 * m23 * m31 +\n      m03 * m11 * m20 * m32 -\n      m01 * m13 * m20 * m32 -\n      m03 * m10 * m21 * m32 +\n      m00 * m13 * m21 * m32 +\n      m01 * m10 * m23 * m32 -\n      m00 * m11 * m23 * m32 -\n      m02 * m11 * m20 * m33 +\n      m01 * m12 * m20 * m33 +\n      m02 * m10 * m21 * m33 -\n      m00 * m12 * m21 * m33 -\n      m01 * m10 * m22 * m33 +\n      m00 * m11 * m22 * m33\n    );\n  },\n\n  /**\n   * Inverse of a matrix. Multiplying by the inverse is used in matrix math\n   * instead of division.\n   *\n   * Formula from:\n   * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n   */\n  inverse(matrix: Array<number>): Array<number> {\n    const det = MatrixMath.determinant(matrix);\n    if (!det) {\n      return matrix;\n    }\n    const [\n      m00,\n      m01,\n      m02,\n      m03,\n      m10,\n      m11,\n      m12,\n      m13,\n      m20,\n      m21,\n      m22,\n      m23,\n      m30,\n      m31,\n      m32,\n      m33,\n    ] = matrix;\n    return [\n      (m12 * m23 * m31 -\n        m13 * m22 * m31 +\n        m13 * m21 * m32 -\n        m11 * m23 * m32 -\n        m12 * m21 * m33 +\n        m11 * m22 * m33) /\n        det,\n      (m03 * m22 * m31 -\n        m02 * m23 * m31 -\n        m03 * m21 * m32 +\n        m01 * m23 * m32 +\n        m02 * m21 * m33 -\n        m01 * m22 * m33) /\n        det,\n      (m02 * m13 * m31 -\n        m03 * m12 * m31 +\n        m03 * m11 * m32 -\n        m01 * m13 * m32 -\n        m02 * m11 * m33 +\n        m01 * m12 * m33) /\n        det,\n      (m03 * m12 * m21 -\n        m02 * m13 * m21 -\n        m03 * m11 * m22 +\n        m01 * m13 * m22 +\n        m02 * m11 * m23 -\n        m01 * m12 * m23) /\n        det,\n      (m13 * m22 * m30 -\n        m12 * m23 * m30 -\n        m13 * m20 * m32 +\n        m10 * m23 * m32 +\n        m12 * m20 * m33 -\n        m10 * m22 * m33) /\n        det,\n      (m02 * m23 * m30 -\n        m03 * m22 * m30 +\n        m03 * m20 * m32 -\n        m00 * m23 * m32 -\n        m02 * m20 * m33 +\n        m00 * m22 * m33) /\n        det,\n      (m03 * m12 * m30 -\n        m02 * m13 * m30 -\n        m03 * m10 * m32 +\n        m00 * m13 * m32 +\n        m02 * m10 * m33 -\n        m00 * m12 * m33) /\n        det,\n      (m02 * m13 * m20 -\n        m03 * m12 * m20 +\n        m03 * m10 * m22 -\n        m00 * m13 * m22 -\n        m02 * m10 * m23 +\n        m00 * m12 * m23) /\n        det,\n      (m11 * m23 * m30 -\n        m13 * m21 * m30 +\n        m13 * m20 * m31 -\n        m10 * m23 * m31 -\n        m11 * m20 * m33 +\n        m10 * m21 * m33) /\n        det,\n      (m03 * m21 * m30 -\n        m01 * m23 * m30 -\n        m03 * m20 * m31 +\n        m00 * m23 * m31 +\n        m01 * m20 * m33 -\n        m00 * m21 * m33) /\n        det,\n      (m01 * m13 * m30 -\n        m03 * m11 * m30 +\n        m03 * m10 * m31 -\n        m00 * m13 * m31 -\n        m01 * m10 * m33 +\n        m00 * m11 * m33) /\n        det,\n      (m03 * m11 * m20 -\n        m01 * m13 * m20 -\n        m03 * m10 * m21 +\n        m00 * m13 * m21 +\n        m01 * m10 * m23 -\n        m00 * m11 * m23) /\n        det,\n      (m12 * m21 * m30 -\n        m11 * m22 * m30 -\n        m12 * m20 * m31 +\n        m10 * m22 * m31 +\n        m11 * m20 * m32 -\n        m10 * m21 * m32) /\n        det,\n      (m01 * m22 * m30 -\n        m02 * m21 * m30 +\n        m02 * m20 * m31 -\n        m00 * m22 * m31 -\n        m01 * m20 * m32 +\n        m00 * m21 * m32) /\n        det,\n      (m02 * m11 * m30 -\n        m01 * m12 * m30 -\n        m02 * m10 * m31 +\n        m00 * m12 * m31 +\n        m01 * m10 * m32 -\n        m00 * m11 * m32) /\n        det,\n      (m01 * m12 * m20 -\n        m02 * m11 * m20 +\n        m02 * m10 * m21 -\n        m00 * m12 * m21 -\n        m01 * m10 * m22 +\n        m00 * m11 * m22) /\n        det,\n    ];\n  },\n\n  /**\n   * Turns columns into rows and rows into columns.\n   */\n  transpose(m: Array<number>): Array<number> {\n    return [\n      m[0],\n      m[4],\n      m[8],\n      m[12],\n      m[1],\n      m[5],\n      m[9],\n      m[13],\n      m[2],\n      m[6],\n      m[10],\n      m[14],\n      m[3],\n      m[7],\n      m[11],\n      m[15],\n    ];\n  },\n\n  /**\n   * Based on: http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c\n   */\n  multiplyVectorByMatrix(v: Array<number>, m: Array<number>): Array<number> {\n    const [vx, vy, vz, vw] = v;\n    return [\n      vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12],\n      vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13],\n      vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14],\n      vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15],\n    ];\n  },\n\n  /**\n   * From: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n   */\n  v3Length(a: Array<number>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);\n  },\n\n  /**\n   * Based on: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n   */\n  v3Normalize(vector: Array<number>, v3Length: number): Array<number> {\n    const im = 1 / (v3Length || MatrixMath.v3Length(vector));\n    return [vector[0] * im, vector[1] * im, vector[2] * im];\n  },\n\n  /**\n   * The dot product of a and b, two 3-element vectors.\n   * From: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n   */\n  v3Dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  },\n\n  /**\n   * From:\n   * http://www.opensource.apple.com/source/WebCore/WebCore-514/platform/graphics/transforms/TransformationMatrix.cpp\n   */\n  v3Combine(\n    a: Array<number>,\n    b: Array<number>,\n    aScale: number,\n    bScale: number,\n  ): Array<number> {\n    return [\n      aScale * a[0] + bScale * b[0],\n      aScale * a[1] + bScale * b[1],\n      aScale * a[2] + bScale * b[2],\n    ];\n  },\n\n  /**\n   * From:\n   * http://www.opensource.apple.com/source/WebCore/WebCore-514/platform/graphics/transforms/TransformationMatrix.cpp\n   */\n  v3Cross(a: Array<number>, b: Array<number>): Array<number> {\n    return [\n      a[1] * b[2] - a[2] * b[1],\n      a[2] * b[0] - a[0] * b[2],\n      a[0] * b[1] - a[1] * b[0],\n    ];\n  },\n\n  /**\n   * Based on:\n   * http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/\n   * and:\n   * http://quat.zachbennett.com/\n   *\n   * Note that this rounds degrees to the thousandth of a degree, due to\n   * floating point errors in the creation of the quaternion.\n   *\n   * Also note that this expects the qw value to be last, not first.\n   *\n   * Also, when researching this, remember that:\n   * yaw   === heading            === z-axis\n   * pitch === elevation/attitude === y-axis\n   * roll  === bank               === x-axis\n   */\n  quaternionToDegreesXYZ(q: Array<number>, matrix, row): Array<number> {\n    const [qx, qy, qz, qw] = q;\n    const qw2 = qw * qw;\n    const qx2 = qx * qx;\n    const qy2 = qy * qy;\n    const qz2 = qz * qz;\n    const test = qx * qy + qz * qw;\n    const unit = qw2 + qx2 + qy2 + qz2;\n    const conv = 180 / Math.PI;\n\n    if (test > 0.49999 * unit) {\n      return [0, 2 * Math.atan2(qx, qw) * conv, 90];\n    }\n    if (test < -0.49999 * unit) {\n      return [0, -2 * Math.atan2(qx, qw) * conv, -90];\n    }\n\n    return [\n      MatrixMath.roundTo3Places(\n        Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv,\n      ),\n      MatrixMath.roundTo3Places(\n        Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv,\n      ),\n      MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv),\n    ];\n  },\n\n  /**\n   * Based on:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n   */\n  roundTo3Places(n: number): number {\n    const arr = n.toString().split('e');\n    return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;\n  },\n\n  /**\n   * Decompose a matrix into separate transform values, for use on platforms\n   * where applying a precomposed matrix is not possible, and transforms are\n   * applied in an inflexible ordering (e.g. Android).\n   *\n   * Implementation based on\n   * http://www.w3.org/TR/css3-transforms/#decomposing-a-2d-matrix\n   * http://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n   * which was based on\n   * http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c\n   */\n  decomposeMatrix(transformMatrix: Array<number>): ?Object {\n    invariant(\n      transformMatrix.length === 16,\n      'Matrix decomposition needs a list of 3d matrix values, received %s',\n      transformMatrix,\n    );\n\n    // output values\n    var perspective = [];\n    const quaternion = [];\n    const scale = [];\n    const skew = [];\n    const translation = [];\n\n    // create normalized, 2d array matrix\n    // and normalized 1d array perspectiveMatrix with redefined 4th column\n    if (!transformMatrix[15]) {\n      return;\n    }\n    const matrix = [];\n    const perspectiveMatrix = [];\n    for (var i = 0; i < 4; i++) {\n      matrix.push([]);\n      for (let j = 0; j < 4; j++) {\n        const value = transformMatrix[i * 4 + j] / transformMatrix[15];\n        matrix[i].push(value);\n        perspectiveMatrix.push(j === 3 ? 0 : value);\n      }\n    }\n    perspectiveMatrix[15] = 1;\n\n    // test for singularity of upper 3x3 part of the perspective matrix\n    if (!MatrixMath.determinant(perspectiveMatrix)) {\n      return;\n    }\n\n    // isolate perspective\n    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {\n      // rightHandSide is the right hand side of the equation.\n      // rightHandSide is a vector, or point in 3d space relative to the origin.\n      const rightHandSide = [\n        matrix[0][3],\n        matrix[1][3],\n        matrix[2][3],\n        matrix[3][3],\n      ];\n\n      // Solve the equation by inverting perspectiveMatrix and multiplying\n      // rightHandSide by the inverse.\n      const inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);\n      const transposedInversePerspectiveMatrix = MatrixMath.transpose(\n        inversePerspectiveMatrix,\n      );\n      var perspective = MatrixMath.multiplyVectorByMatrix(\n        rightHandSide,\n        transposedInversePerspectiveMatrix,\n      );\n    } else {\n      // no perspective\n      perspective[0] = perspective[1] = perspective[2] = 0;\n      perspective[3] = 1;\n    }\n\n    // translation is simple\n    for (var i = 0; i < 3; i++) {\n      translation[i] = matrix[3][i];\n    }\n\n    // Now get scale and shear.\n    // 'row' is a 3 element array of 3 component vectors\n    const row = [];\n    for (i = 0; i < 3; i++) {\n      row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];\n    }\n\n    // Compute X scale factor and normalize first row.\n    scale[0] = MatrixMath.v3Length(row[0]);\n    row[0] = MatrixMath.v3Normalize(row[0], scale[0]);\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = MatrixMath.v3Dot(row[0], row[1]);\n    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = MatrixMath.v3Dot(row[0], row[1]);\n    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);\n\n    // Now, compute Y scale and normalize 2nd row.\n    scale[1] = MatrixMath.v3Length(row[1]);\n    row[1] = MatrixMath.v3Normalize(row[1], scale[1]);\n    skew[0] /= scale[1];\n\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    skew[1] = MatrixMath.v3Dot(row[0], row[2]);\n    row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);\n    skew[2] = MatrixMath.v3Dot(row[1], row[2]);\n    row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);\n\n    // Next, get Z scale and normalize 3rd row.\n    scale[2] = MatrixMath.v3Length(row[2]);\n    row[2] = MatrixMath.v3Normalize(row[2], scale[2]);\n    skew[1] /= scale[2];\n    skew[2] /= scale[2];\n\n    // At this point, the matrix (in rows) is orthonormal.\n    // Check for a coordinate system flip.  If the determinant\n    // is -1, then negate the matrix and the scaling factors.\n    const pdum3 = MatrixMath.v3Cross(row[1], row[2]);\n    if (MatrixMath.v3Dot(row[0], pdum3) < 0) {\n      for (i = 0; i < 3; i++) {\n        scale[i] *= -1;\n        row[i][0] *= -1;\n        row[i][1] *= -1;\n        row[i][2] *= -1;\n      }\n    }\n\n    // Now, get the rotations out\n    quaternion[0] =\n      0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));\n    quaternion[1] =\n      0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));\n    quaternion[2] =\n      0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));\n    quaternion[3] =\n      0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));\n\n    if (row[2][1] > row[1][2]) {\n      quaternion[0] = -quaternion[0];\n    }\n    if (row[0][2] > row[2][0]) {\n      quaternion[1] = -quaternion[1];\n    }\n    if (row[1][0] > row[0][1]) {\n      quaternion[2] = -quaternion[2];\n    }\n\n    // correct for occasional, weird Euler synonyms for 2d rotation\n    let rotationDegrees;\n    if (\n      quaternion[0] < 0.001 &&\n      quaternion[0] >= 0 &&\n      quaternion[1] < 0.001 &&\n      quaternion[1] >= 0\n    ) {\n      // this is a 2d rotation on the z-axis\n      rotationDegrees = [\n        0,\n        0,\n        MatrixMath.roundTo3Places(\n          (Math.atan2(row[0][1], row[0][0]) * 180) / Math.PI,\n        ),\n      ];\n    } else {\n      rotationDegrees = MatrixMath.quaternionToDegreesXYZ(\n        quaternion,\n        matrix,\n        row,\n      );\n    }\n\n    // expose both base data and convenience names\n    return {\n      rotationDegrees,\n      perspective,\n      quaternion,\n      scale,\n      skew,\n      translation,\n\n      rotate: rotationDegrees[2],\n      rotateX: rotationDegrees[0],\n      rotateY: rotationDegrees[1],\n      scaleX: scale[0],\n      scaleY: scale[1],\n      translateX: translation[0],\n      translateY: translation[1],\n    };\n  },\n};\n\nmodule.exports = MatrixMath;\n"]}