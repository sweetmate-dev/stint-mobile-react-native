{"version":3,"sources":["AnimatedInterpolation.js"],"names":["AnimatedNode","require","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","int32Color","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","rounded","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","__makeNative","parentValue","__getValue","__addChild","__removeChild","test","degrees","parseFloat","radians","PI","__DEV__","validateInterpolation","__transformDataType","type","__createInterpolation","module","exports"],"mappings":"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","file":"AnimatedInterpolation.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n/* eslint no-bitwise: 0 */\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst invariant = require('fbjs/lib/invariant');\nconst normalizeColor = require('normalizeColor');\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType = {\n  inputRange: Array<number>,\n  /* $FlowFixMe(>=0.38.0 site=react_native_fb,react_native_oss) - Flow error\n   * detected during the deployment of v0.38.0. To see the error, remove this\n   * comment and run flow\n   */\n  outputRange: Array<number> | Array<string>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n};\n\nconst linear = t => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(\n  config: InterpolationConfigType,\n): (input: number) => number | string {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  const outputRange: Array<number> = (config.outputRange: any);\n  checkInfiniteRange('outputRange', outputRange);\n\n  const inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    );\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let int32Color = normalizeColor(input);\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n\n  const r = (int32Color & 0xff000000) >>> 24;\n  const g = (int32Color & 0x00ff0000) >>> 16;\n  const b = (int32Color & 0x0000ff00) >>> 8;\n  const a = (int32Color & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[0-9\\.-]+/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      const val = +interpolations[i++](input);\n      const rounded =\n        shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      return String(rounded);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: Array<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: Array<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: Array<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      arr[i] >= arr[i - 1],\n      /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n       * one or both of the operands may be something that doesn't cleanly\n       * convert to a string, like undefined, null, and object, etc. If you really\n       * mean this implicit string conversion, you can do something like\n       * String(myThing)\n       */\n      'inputRange must be monotonically non-decreasing ' + arr,\n    );\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: Array<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly convert\n     * to a string, like undefined, null, and object, etc. If you really mean\n     * this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType;\n  _interpolation: (input: number) => number | string;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n    super.__makeNative();\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: Array<any>) {\n    // Change the string array type to number array\n    // So we can reuse the same logic in iOS and Android platform\n    /* $FlowFixMe(>=0.70.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.70 was deployed. To see the error delete this\n     * comment and run Flow. */\n    return range.map(function(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n      if (/deg$/.test(value)) {\n        const degrees = parseFloat(value) || 0;\n        const radians = (degrees * Math.PI) / 180.0;\n        return radians;\n      } else {\n        // Assume radians\n        return parseFloat(value) || 0;\n      }\n    });\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n\nmodule.exports = AnimatedInterpolation;\n"]}