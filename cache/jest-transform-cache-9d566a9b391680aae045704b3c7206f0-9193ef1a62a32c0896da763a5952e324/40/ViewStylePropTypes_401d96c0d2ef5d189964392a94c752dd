d3d5c3d09fdc43ed9359a061784f7809










'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var ColorPropType = require('ColorPropType');
var LayoutPropTypes = require('LayoutPropTypes');
var ReactPropTypes = require('prop-types');
var ShadowPropTypesIOS = require('ShadowPropTypesIOS');
var TransformPropTypes = require('TransformPropTypes');




var ViewStylePropTypes = _extends({},
LayoutPropTypes,
ShadowPropTypesIOS,
TransformPropTypes, {
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderTopColor: ColorPropType,
  borderRightColor: ColorPropType,
  borderBottomColor: ColorPropType,
  borderLeftColor: ColorPropType,
  borderStartColor: ColorPropType,
  borderEndColor: ColorPropType,
  borderRadius: ReactPropTypes.number,
  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderTopStartRadius: ReactPropTypes.number,
  borderTopEndRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number,
  borderBottomStartRadius: ReactPropTypes.number,
  borderBottomEndRadius: ReactPropTypes.number,
  borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
  borderWidth: ReactPropTypes.number,
  borderTopWidth: ReactPropTypes.number,
  borderRightWidth: ReactPropTypes.number,
  borderBottomWidth: ReactPropTypes.number,
  borderLeftWidth: ReactPropTypes.number,
  opacity: ReactPropTypes.number,







  elevation: ReactPropTypes.number });


module.exports = ViewStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXdTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIkxheW91dFByb3BUeXBlcyIsIlJlYWN0UHJvcFR5cGVzIiwiU2hhZG93UHJvcFR5cGVzSU9TIiwiVHJhbnNmb3JtUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiYmFja2ZhY2VWaXNpYmlsaXR5Iiwib25lT2YiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyU3RhcnRDb2xvciIsImJvcmRlckVuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwibnVtYmVyIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyVG9wU3RhcnRSYWRpdXMiLCJib3JkZXJUb3BFbmRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21TdGFydFJhZGl1cyIsImJvcmRlckJvdHRvbUVuZFJhZGl1cyIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm9wYWNpdHkiLCJlbGV2YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUEsYTs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsZUFBUixDQUF0QjtBQUNBLElBQU1DLGtCQUFrQkQsUUFBUSxpQkFBUixDQUF4QjtBQUNBLElBQU1FLGlCQUFpQkYsUUFBUSxZQUFSLENBQXZCO0FBQ0EsSUFBTUcscUJBQXFCSCxRQUFRLG9CQUFSLENBQTNCO0FBQ0EsSUFBTUkscUJBQXFCSixRQUFRLG9CQUFSLENBQTNCOzs7OztBQUtBLElBQU1LO0FBQ0RKLGVBREM7QUFFREUsa0JBRkM7QUFHREMsa0JBSEM7QUFJSkUsc0JBQW9CSixlQUFlSyxLQUFmLENBQXFCLENBQUMsU0FBRCxFQUFZLFFBQVosQ0FBckIsQ0FKaEI7QUFLSkMsbUJBQWlCVCxhQUxiO0FBTUpVLGVBQWFWLGFBTlQ7QUFPSlcsa0JBQWdCWCxhQVBaO0FBUUpZLG9CQUFrQlosYUFSZDtBQVNKYSxxQkFBbUJiLGFBVGY7QUFVSmMsbUJBQWlCZCxhQVZiO0FBV0plLG9CQUFrQmYsYUFYZDtBQVlKZ0Isa0JBQWdCaEIsYUFaWjtBQWFKaUIsZ0JBQWNkLGVBQWVlLE1BYnpCO0FBY0pDLHVCQUFxQmhCLGVBQWVlLE1BZGhDO0FBZUpFLHdCQUFzQmpCLGVBQWVlLE1BZmpDO0FBZ0JKRyx3QkFBc0JsQixlQUFlZSxNQWhCakM7QUFpQkpJLHNCQUFvQm5CLGVBQWVlLE1BakIvQjtBQWtCSkssMEJBQXdCcEIsZUFBZWUsTUFsQm5DO0FBbUJKTSwyQkFBeUJyQixlQUFlZSxNQW5CcEM7QUFvQkpPLDJCQUF5QnRCLGVBQWVlLE1BcEJwQztBQXFCSlEseUJBQXVCdkIsZUFBZWUsTUFyQmxDO0FBc0JKUyxlQUFheEIsZUFBZUssS0FBZixDQUFxQixDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLFFBQXBCLENBQXJCLENBdEJUO0FBdUJKb0IsZUFBYXpCLGVBQWVlLE1BdkJ4QjtBQXdCSlcsa0JBQWdCMUIsZUFBZWUsTUF4QjNCO0FBeUJKWSxvQkFBa0IzQixlQUFlZSxNQXpCN0I7QUEwQkphLHFCQUFtQjVCLGVBQWVlLE1BMUI5QjtBQTJCSmMsbUJBQWlCN0IsZUFBZWUsTUEzQjVCO0FBNEJKZSxXQUFTOUIsZUFBZWUsTUE1QnBCOzs7Ozs7OztBQW9DSmdCLGFBQVcvQixlQUFlZSxNQXBDdEIsR0FBTjs7O0FBdUNBaUIsT0FBT0MsT0FBUCxHQUFpQjlCLGtCQUFqQiIsImZpbGUiOiJWaWV3U3R5bGVQcm9wVHlwZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb2xvclByb3BUeXBlID0gcmVxdWlyZSgnQ29sb3JQcm9wVHlwZScpO1xuY29uc3QgTGF5b3V0UHJvcFR5cGVzID0gcmVxdWlyZSgnTGF5b3V0UHJvcFR5cGVzJyk7XG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbmNvbnN0IFNoYWRvd1Byb3BUeXBlc0lPUyA9IHJlcXVpcmUoJ1NoYWRvd1Byb3BUeXBlc0lPUycpO1xuY29uc3QgVHJhbnNmb3JtUHJvcFR5cGVzID0gcmVxdWlyZSgnVHJhbnNmb3JtUHJvcFR5cGVzJyk7XG5cbi8qKlxuICogV2FybmluZzogU29tZSBvZiB0aGVzZSBwcm9wZXJ0aWVzIG1heSBub3QgYmUgc3VwcG9ydGVkIGluIGFsbCByZWxlYXNlcy5cbiAqL1xuY29uc3QgVmlld1N0eWxlUHJvcFR5cGVzID0ge1xuICAuLi5MYXlvdXRQcm9wVHlwZXMsXG4gIC4uLlNoYWRvd1Byb3BUeXBlc0lPUyxcbiAgLi4uVHJhbnNmb3JtUHJvcFR5cGVzLFxuICBiYWNrZmFjZVZpc2liaWxpdHk6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsndmlzaWJsZScsICdoaWRkZW4nXSksXG4gIGJhY2tncm91bmRDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyQ29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIGJvcmRlclRvcENvbG9yOiBDb2xvclByb3BUeXBlLFxuICBib3JkZXJSaWdodENvbG9yOiBDb2xvclByb3BUeXBlLFxuICBib3JkZXJCb3R0b21Db2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyTGVmdENvbG9yOiBDb2xvclByb3BUeXBlLFxuICBib3JkZXJTdGFydENvbG9yOiBDb2xvclByb3BUeXBlLFxuICBib3JkZXJFbmRDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyUmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclRvcExlZnRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyVG9wU3RhcnRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyVG9wRW5kUmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyQm90dG9tU3RhcnRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyQm90dG9tRW5kUmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclN0eWxlOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ3NvbGlkJywgJ2RvdHRlZCcsICdkYXNoZWQnXSksXG4gIGJvcmRlcldpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclRvcFdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclJpZ2h0V2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyQm90dG9tV2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyTGVmdFdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIG9wYWNpdHk6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIChBbmRyb2lkLW9ubHkpIFNldHMgdGhlIGVsZXZhdGlvbiBvZiBhIHZpZXcsIHVzaW5nIEFuZHJvaWQncyB1bmRlcmx5aW5nXG4gICAqIFtlbGV2YXRpb24gQVBJXShodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS90cmFpbmluZy9tYXRlcmlhbC9zaGFkb3dzLWNsaXBwaW5nLmh0bWwjRWxldmF0aW9uKS5cbiAgICogVGhpcyBhZGRzIGEgZHJvcCBzaGFkb3cgdG8gdGhlIGl0ZW0gYW5kIGFmZmVjdHMgei1vcmRlciBmb3Igb3ZlcmxhcHBpbmcgdmlld3MuXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIEFuZHJvaWQgNS4wKywgaGFzIG5vIGVmZmVjdCBvbiBlYXJsaWVyIHZlcnNpb25zLlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgZWxldmF0aW9uOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdTdHlsZVByb3BUeXBlcztcbiJdfQ==