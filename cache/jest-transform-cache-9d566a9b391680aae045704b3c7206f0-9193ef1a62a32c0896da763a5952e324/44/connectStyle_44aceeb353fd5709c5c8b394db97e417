54fec3fc6afe44ead01fabb85fe0b03b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));
var _ = _interopRequireWildcard(require("lodash"));
var _normalizeStyle = _interopRequireDefault(require("./StyleNormalizer/normalizeStyle"));
var _reactNative = require("react-native");

var _Theme = _interopRequireWildcard(require("./Theme"));
var _resolveComponentStyle = require("./resolveComponentStyle");var _jsxFileName = "/Users/johnamuesi/Documents/PRODUCTION/REACTNATIVE/STINT/stint/node_modules/native-base-shoutem-theme/src/connectStyle.js";function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }newObj.default = obj;return newObj;
  }
}function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}function _iterableToArray(iter) {
  if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  }
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
  }
}function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
}function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }return _assertThisInitialized(self);
}function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };return _getPrototypeOf(o);
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);
}function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;return o;
  };return _setPrototypeOf(o, p);
}function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return self;
}

var themeCache = {};

function throwConnectStyleError(errorMessage, componentDisplayName) {
  throw Error(errorMessage + " - when connecting " + componentDisplayName + " component to style.");
}

function getTheme(context) {

  return context.theme || _Theme.default.getDefaultTheme();
}

function isStyleVariant(propertyName) {
  return (/^\./.test(propertyName)
  );
}

function isChildStyle(propertyName) {
  return (/(^[^\.].*\.)|^\*$/.test(propertyName)
  );
}

function getConcreteStyle(style) {
  return _.pickBy(style, function (value, key) {
    return !isStyleVariant(key) && !isChildStyle(key);
  });
}var _default = function _default(componentStyleName) {
  var componentStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var mapPropsToStyleNames = arguments.length > 2 ? arguments[2] : undefined;var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  function getComponentDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }

  return function wrapWithStyledComponent(WrappedComponent) {
    var componentDisplayName = getComponentDisplayName(WrappedComponent);

    if (!_.isPlainObject(componentStyle)) {
      throwConnectStyleError("Component style must be plain object", componentDisplayName);
    }

    if (!_.isString(componentStyleName)) {
      throwConnectStyleError("Component Style Name must be string", componentDisplayName);
    }var StyledComponent = function (_React$Component) {
      _inherits(StyledComponent, _React$Component);

      function StyledComponent(props, context) {
        var _this;_classCallCheck(this, StyledComponent);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(StyledComponent).call(this, props, context));

        var styleNames = _this.getStyleNames(props);
        var style = props.style;

        var finalStyle = _this.getFinalStyle(props, context, style, styleNames);

        _this.setWrappedInstance = _this.setWrappedInstance.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.resolveConnectedComponentStyle = _this.resolveConnectedComponentStyle.bind(_assertThisInitialized(_assertThisInitialized(_this)));

        _this.state = {
          style: finalStyle,

          addedProps: _this.resolveAddedProps(),
          styleNames: styleNames };return _this;
      }_createClass(StyledComponent, [{ key: "getFinalStyle", value: function getFinalStyle(props, context, style, styleNames) {
          var resolvedStyle = {};
          if (context.parentPath) {
            resolvedStyle = this.getOrSetStylesInCache(context, props, styleNames, _toConsumableArray(context.parentPath).concat([componentStyleName], _toConsumableArray(styleNames)));
          } else {
            resolvedStyle = this.resolveStyle(context, props, styleNames);
            themeCache[componentStyleName] = resolvedStyle;
          }

          var concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));

          if (_.isArray(style)) {
            return [concreteStyle].concat(_toConsumableArray(style));
          }

          if (typeof style == "number" || typeof style == "object") {
            return [concreteStyle, style];
          }

          return concreteStyle;
        } }, { key: "getStyleNames", value: function getStyleNames(props) {
          var styleNamesArr = _.map(props, function (value, key) {
            if (typeof value !== "object" && value === true) {
              return "." + key;
            } else {
              return false;
            }
          });
          _.remove(styleNamesArr, function (value, index) {
            return value === false;
          });

          return styleNamesArr;
        } }, { key: "getParentPath", value: function getParentPath() {
          if (!this.context.parentPath) {
            return [componentStyleName];
          } else {
            return _toConsumableArray(this.context.parentPath).concat([componentStyleName], _toConsumableArray(this.getStyleNames(this.props)));
          }
        } }, { key: "getChildContext", value: function getChildContext() {
          return {

            parentPath: this.getParentPath() };
        } }, { key: "componentWillReceiveProps", value: function componentWillReceiveProps(nextProps, nextContext) {
          var styleNames = this.getStyleNames(nextProps);
          var style = nextProps.style;
          if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {
            var finalStyle = this.getFinalStyle(nextProps, nextContext, style, styleNames);

            this.setState({
              style: finalStyle,

              styleNames: styleNames });
          }
        } }, { key: "setNativeProps", value: function setNativeProps(nativeProps) {
          if (this.wrappedInstance.setNativeProps) {
            this.wrappedInstance.setNativeProps(nativeProps);
          }
        } }, { key: "setWrappedInstance", value: function setWrappedInstance(component) {
          if (component && component._root) {
            this._root = component._root;
          } else {
            this._root = component;
          }
          this.wrappedInstance = this._root;
        } }, { key: "hasStyleNameChanged", value: function hasStyleNameChanged(nextProps, styleNames) {
          return mapPropsToStyleNames && this.props !== nextProps && !_.isEqual(this.state.styleNames, styleNames);
        } }, { key: "shouldRebuildStyle", value: function shouldRebuildStyle(nextProps, nextContext, styleNames) {
          return nextProps.style !== this.props.style || nextProps.styleName !== this.props.styleName || nextContext.theme !== this.context.theme || !_.isEqual(nextContext.parentPath, this.context.parentPath) || this.hasStyleNameChanged(nextProps, styleNames);
        } }, { key: "resolveStyleNames", value: function resolveStyleNames(props) {
          var styleName = props.styleName;
          var styleNames = styleName ? styleName.split(/\s/g) : [];

          if (!mapPropsToStyleNames) {
            return styleNames;
          }

          return _.uniq(mapPropsToStyleNames(styleNames, props));
        } }, { key: "resolveAddedProps", value: function resolveAddedProps() {
          var addedProps = {};
          if (options.withRef) {
            addedProps.ref = "wrappedInstance";
          }
          return addedProps;
        } }, { key: "getOrSetStylesInCache", value: function getOrSetStylesInCache(context, props, styleNames, path) {
          if (themeCache && themeCache[path.join(">")]) {

            return themeCache[path.join(">")];
          } else {
            var resolvedStyle = this.resolveStyle(context, props, styleNames);
            if (Object.keys(themeCache).length < 10000) {
              themeCache[path.join(">")] = resolvedStyle;
            }
            return resolvedStyle;
          }
        } }, { key: "resolveStyle", value: function resolveStyle(context, props, styleNames) {
          var parentStyle = {};

          var theme = getTheme(context);
          var themeStyle = theme.createComponentStyle(componentStyleName, componentStyle);

          if (context.parentPath) {
            parentStyle = themeCache[context.parentPath.join(">")];
          } else {
            parentStyle = (0, _resolveComponentStyle.resolveComponentStyle)(componentStyleName, styleNames, themeStyle, parentStyle);
          }

          return (0, _resolveComponentStyle.resolveComponentStyle)(componentStyleName, styleNames, themeStyle, parentStyle);
        } }, { key: "resolveConnectedComponentStyle", value: function resolveConnectedComponentStyle(props) {
          var styleNames = this.resolveStyleNames(props);
          return this.resolveStyle(this.context, props, styleNames).componentStyle;
        } }, { key: "render", value: function render() {
          var _this$state = this.state,
              addedProps = _this$state.addedProps,
              style = _this$state.style;
          return _react.default.createElement(WrappedComponent, _extends({}, this.props, addedProps, {
            style: style,
            ref: this.setWrappedInstance, __source: { fileName: _jsxFileName, lineNumber: 384 } }));
        } }]);return StyledComponent;
    }(_react.default.Component);StyledComponent.contextTypes = { theme: _Theme.ThemeShape, parentPath: _propTypes.default.array };StyledComponent.childContextTypes = { parentPath: _propTypes.default.array };StyledComponent.propTypes = { style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]), styleName: _propTypes.default.string, virtual: _propTypes.default.bool };StyledComponent.defaultProps = { virtual: options.virtual };StyledComponent.displayName = "Styled(" + componentDisplayName + ")";StyledComponent.WrappedComponent = WrappedComponent;

    return (0, _hoistNonReactStatics.default)(StyledComponent, WrappedComponent);
  };
};exports.default = _default;