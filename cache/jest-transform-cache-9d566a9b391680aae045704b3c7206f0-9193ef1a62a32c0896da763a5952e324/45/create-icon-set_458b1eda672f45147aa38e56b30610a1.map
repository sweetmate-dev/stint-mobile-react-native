{"version":3,"sources":["create-icon-set.js"],"names":["createIconSet","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","glyphMap","fontFamily","fontFile","fontReference","Platform","OS","replace","IconNamePropType","PropTypes","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","fontStyle","children","PureComponent","propTypes","number","oneOfType","string","node","any","defaultProps","allowFontScaling","imageSourceCache","ensureNativeModuleAvailable","Error","getImageSource","processedColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","uri","getImageForFont","err","image","error","loadFont","file","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","file":"create-icon-set.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nconst NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nconst DEFAULT_ICON_SIZE = 12;\nconst DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(glyphMap, fontFamily, fontFile) {\n  let fontReference = fontFamily;\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  if (Platform.OS === 'android' && fontFile) {\n    fontReference = fontFile.replace(/\\.(otf|ttf)$/, '');\n  }\n\n  if (Platform.OS === 'windows' && fontFile) {\n    fontReference = `Assets/${fontFile}#${fontFamily}`;\n  }\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    root = null;\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {this.props.children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function ensureNativeModuleAvailable() {\n    if (!NativeIconAPI) {\n      if (Platform.OS === 'android') {\n        throw new Error(\n          'RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.'\n        );\n      }\n      throw new Error(\n        'RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.'\n      );\n    }\n  }\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n\n  return Icon;\n}\n"]}