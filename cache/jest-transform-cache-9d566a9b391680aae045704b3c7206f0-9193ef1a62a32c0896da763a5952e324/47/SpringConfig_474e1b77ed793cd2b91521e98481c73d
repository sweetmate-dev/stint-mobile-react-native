61305fb38ec75a27681b1df2b8d02d5f










'use strict';






function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(
tension,
friction)
{
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction) };

}

function fromBouncinessAndSpeed(
bounciness,
speed)
{
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return (
      0.00000045 * Math.pow(x, 3) -
      0.000332 * Math.pow(x, 2) +
      0.1078 * x +
      5.84);

  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(
  b,
  b3Nobounce(bouncyTension),
  0.01);


  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction) };

}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwcmluZ0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7QUFPQSxTQUFTQSx5QkFBVCxDQUFtQ0MsTUFBbkMsRUFBMkM7QUFDekMsU0FBTyxDQUFDQSxTQUFTLEVBQVYsSUFBZ0IsSUFBaEIsR0FBdUIsR0FBOUI7QUFDRDs7QUFFRCxTQUFTQyx1QkFBVCxDQUFpQ0QsTUFBakMsRUFBeUM7QUFDdkMsU0FBTyxDQUFDQSxTQUFTLENBQVYsSUFBZSxDQUFmLEdBQW1CLEVBQTFCO0FBQ0Q7O0FBRUQsU0FBU0UsNkJBQVQ7QUFDRUMsT0FERjtBQUVFQyxRQUZGO0FBR29CO0FBQ2xCLFNBQU87QUFDTEMsZUFBV04sMEJBQTBCSSxPQUExQixDQUROO0FBRUxHLGFBQVNMLHdCQUF3QkcsUUFBeEIsQ0FGSixFQUFQOztBQUlEOztBQUVELFNBQVNHLHNCQUFUO0FBQ0VDLFVBREY7QUFFRUMsS0FGRjtBQUdvQjtBQUNsQixXQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQkMsVUFBMUIsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQzlDLFdBQU8sQ0FBQ0YsUUFBUUMsVUFBVCxLQUF3QkMsV0FBV0QsVUFBbkMsQ0FBUDtBQUNEOztBQUVELFdBQVNFLGFBQVQsQ0FBdUJDLENBQXZCLEVBQTBCQyxLQUExQixFQUFpQ0MsR0FBakMsRUFBc0M7QUFDcEMsV0FBT0QsUUFBUUQsS0FBS0UsTUFBTUQsS0FBWCxDQUFmO0FBQ0Q7O0FBRUQsV0FBU0UsbUJBQVQsQ0FBNkJDLENBQTdCLEVBQWdDSCxLQUFoQyxFQUF1Q0MsR0FBdkMsRUFBNEM7QUFDMUMsV0FBT0UsSUFBSUYsR0FBSixHQUFVLENBQUMsSUFBSUUsQ0FBTCxJQUFVSCxLQUEzQjtBQUNEOztBQUVELFdBQVNJLHlCQUFULENBQW1DRCxDQUFuQyxFQUFzQ0gsS0FBdEMsRUFBNkNDLEdBQTdDLEVBQWtEO0FBQ2hELFdBQU9DLG9CQUFvQixJQUFJQyxDQUFKLEdBQVFBLElBQUlBLENBQWhDLEVBQW1DSCxLQUFuQyxFQUEwQ0MsR0FBMUMsQ0FBUDtBQUNEOztBQUVELFdBQVNJLFdBQVQsQ0FBcUJDLENBQXJCLEVBQXdCO0FBQ3RCLFdBQU8sU0FBU0MsS0FBS0MsR0FBTCxDQUFTRixDQUFULEVBQVksQ0FBWixDQUFULEdBQTBCLFFBQVFDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxFQUFZLENBQVosQ0FBbEMsR0FBbUQsT0FBT0EsQ0FBMUQsR0FBOEQsSUFBckU7QUFDRDs7QUFFRCxXQUFTRyxXQUFULENBQXFCSCxDQUFyQixFQUF3QjtBQUN0QixXQUFPLFdBQVdDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxFQUFZLENBQVosQ0FBWCxHQUE0QixRQUFRQyxLQUFLQyxHQUFMLENBQVNGLENBQVQsRUFBWSxDQUFaLENBQXBDLEdBQXFELE9BQU9BLENBQTVELEdBQWdFLENBQXZFO0FBQ0Q7O0FBRUQsV0FBU0ksV0FBVCxDQUFxQkosQ0FBckIsRUFBd0I7QUFDdEI7QUFDRSxtQkFBYUMsS0FBS0MsR0FBTCxDQUFTRixDQUFULEVBQVksQ0FBWixDQUFiO0FBQ0EsaUJBQVdDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxFQUFZLENBQVosQ0FEWDtBQUVBLGVBQVNBLENBRlQ7QUFHQSxVQUpGOztBQU1EOztBQUVELFdBQVNLLFVBQVQsQ0FBb0J4QixPQUFwQixFQUE2QjtBQUMzQixRQUFJQSxXQUFXLEVBQWYsRUFBbUI7QUFDakIsYUFBT2tCLFlBQVlsQixPQUFaLENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSUEsVUFBVSxFQUFWLElBQWdCQSxXQUFXLEVBQS9CLEVBQW1DO0FBQ3hDLGFBQU9zQixZQUFZdEIsT0FBWixDQUFQO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsYUFBT3VCLFlBQVl2QixPQUFaLENBQVA7QUFDRDtBQUNGOztBQUVELE1BQUl5QixJQUFJbEIsVUFBVUYsYUFBYSxHQUF2QixFQUE0QixDQUE1QixFQUErQixFQUEvQixDQUFSO0FBQ0FvQixNQUFJZCxjQUFjYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLEdBQXBCLENBQUo7QUFDQSxNQUFNQyxJQUFJbkIsVUFBVUQsUUFBUSxHQUFsQixFQUF1QixDQUF2QixFQUEwQixFQUExQixDQUFWO0FBQ0EsTUFBTXFCLGdCQUFnQmhCLGNBQWNlLENBQWQsRUFBaUIsR0FBakIsRUFBc0IsR0FBdEIsQ0FBdEI7QUFDQSxNQUFNRSxpQkFBaUJYO0FBQ3JCUSxHQURxQjtBQUVyQkQsYUFBV0csYUFBWCxDQUZxQjtBQUdyQixNQUhxQixDQUF2Qjs7O0FBTUEsU0FBTztBQUNMekIsZUFBV04sMEJBQTBCK0IsYUFBMUIsQ0FETjtBQUVMeEIsYUFBU0wsd0JBQXdCOEIsY0FBeEIsQ0FGSixFQUFQOztBQUlEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2YvQiw4REFEZTtBQUVmSyxnREFGZSxFQUFqQiIsImZpbGUiOiJTcHJpbmdDb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudHlwZSBTcHJpbmdDb25maWdUeXBlID0ge1xuICBzdGlmZm5lc3M6IG51bWJlcixcbiAgZGFtcGluZzogbnVtYmVyLFxufTtcblxuZnVuY3Rpb24gc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZShvVmFsdWUpIHtcbiAgcmV0dXJuIChvVmFsdWUgLSAzMCkgKiAzLjYyICsgMTk0O1xufVxuXG5mdW5jdGlvbiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShvVmFsdWUpIHtcbiAgcmV0dXJuIChvVmFsdWUgLSA4KSAqIDMgKyAyNTtcbn1cblxuZnVuY3Rpb24gZnJvbU9yaWdhbWlUZW5zaW9uQW5kRnJpY3Rpb24oXG4gIHRlbnNpb246IG51bWJlcixcbiAgZnJpY3Rpb246IG51bWJlcixcbik6IFNwcmluZ0NvbmZpZ1R5cGUge1xuICByZXR1cm4ge1xuICAgIHN0aWZmbmVzczogc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZSh0ZW5zaW9uKSxcbiAgICBkYW1waW5nOiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShmcmljdGlvbiksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZyb21Cb3VuY2luZXNzQW5kU3BlZWQoXG4gIGJvdW5jaW5lc3M6IG51bWJlcixcbiAgc3BlZWQ6IG51bWJlcixcbik6IFNwcmluZ0NvbmZpZ1R5cGUge1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsdWUsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAtIHN0YXJ0VmFsdWUpIC8gKGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9qZWN0Tm9ybWFsKG4sIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3RhcnQgKyBuICogKGVuZCAtIHN0YXJ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhckludGVycG9sYXRpb24odCwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB0ICogZW5kICsgKDEgLSB0KSAqIHN0YXJ0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbih0LCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGxpbmVhckludGVycG9sYXRpb24oMiAqIHQgLSB0ICogdCwgc3RhcnQsIGVuZCk7XG4gIH1cblxuICBmdW5jdGlvbiBiM0ZyaWN0aW9uMSh4KSB7XG4gICAgcmV0dXJuIDAuMDAwNyAqIE1hdGgucG93KHgsIDMpIC0gMC4wMzEgKiBNYXRoLnBvdyh4LCAyKSArIDAuNjQgKiB4ICsgMS4yODtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24yKHgpIHtcbiAgICByZXR1cm4gMC4wMDAwNDQgKiBNYXRoLnBvdyh4LCAzKSAtIDAuMDA2ICogTWF0aC5wb3coeCwgMikgKyAwLjM2ICogeCArIDI7XG4gIH1cblxuICBmdW5jdGlvbiBiM0ZyaWN0aW9uMyh4KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDAuMDAwMDAwNDUgKiBNYXRoLnBvdyh4LCAzKSAtXG4gICAgICAwLjAwMDMzMiAqIE1hdGgucG93KHgsIDIpICtcbiAgICAgIDAuMTA3OCAqIHggK1xuICAgICAgNS44NFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBiM05vYm91bmNlKHRlbnNpb24pIHtcbiAgICBpZiAodGVuc2lvbiA8PSAxOCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24xKHRlbnNpb24pO1xuICAgIH0gZWxzZSBpZiAodGVuc2lvbiA+IDE4ICYmIHRlbnNpb24gPD0gNDQpIHtcbiAgICAgIHJldHVybiBiM0ZyaWN0aW9uMih0ZW5zaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24zKHRlbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIGxldCBiID0gbm9ybWFsaXplKGJvdW5jaW5lc3MgLyAxLjcsIDAsIDIwKTtcbiAgYiA9IHByb2plY3ROb3JtYWwoYiwgMCwgMC44KTtcbiAgY29uc3QgcyA9IG5vcm1hbGl6ZShzcGVlZCAvIDEuNywgMCwgMjApO1xuICBjb25zdCBib3VuY3lUZW5zaW9uID0gcHJvamVjdE5vcm1hbChzLCAwLjUsIDIwMCk7XG4gIGNvbnN0IGJvdW5jeUZyaWN0aW9uID0gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbihcbiAgICBiLFxuICAgIGIzTm9ib3VuY2UoYm91bmN5VGVuc2lvbiksXG4gICAgMC4wMSxcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIHN0aWZmbmVzczogc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZShib3VuY3lUZW5zaW9uKSxcbiAgICBkYW1waW5nOiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShib3VuY3lGcmljdGlvbiksXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbixcbiAgZnJvbUJvdW5jaW5lc3NBbmRTcGVlZCxcbn07XG4iXX0=