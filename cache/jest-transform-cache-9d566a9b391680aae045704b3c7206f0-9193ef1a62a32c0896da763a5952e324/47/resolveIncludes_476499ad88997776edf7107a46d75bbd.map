{"version":3,"sources":["resolveIncludes.js"],"names":["resolveIncludes","_","INCLUDE","includeSymbolMergeHandler","objVal","srcVal","newObjVal","include","isUndefined","isPlainObject","newObj","mergeWith","o","s","target","base","getStyle","styleName","defaultStyle","style","baseStyle","Error","targetStyle","console","warn","includeNodeStyles","styleNode","processingStyleNames","styleNamesToInclude","stylesToInclude","isArray","has","add","delete","resultingStyle","keys","Set"],"mappings":"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","file":"resolveIncludes.js","sourcesContent":["import * as _ from 'lodash';\nexport const INCLUDE = '@@shoutem.theme/include';\n\n/**\n * Customizer function for lodash mergeWith which handle INCLUDE symbol.\n * Lodash merge/mergeWith functions doesn't merge symbols\n * and we use INCLUDE symbol to define which style we want to include.\n */\n// eslint-disable-next-line consistent-return\nfunction includeSymbolMergeHandler(objVal, srcVal) {\n  const newObjVal = objVal;\n  let include;\n\n  if (srcVal && srcVal[INCLUDE]) {\n    include = newObjVal && newObjVal[INCLUDE] ?\n      [...newObjVal[INCLUDE], ...srcVal[INCLUDE]] : srcVal[INCLUDE];\n  }\n\n  // if objVal doesn't exists create new from source\n  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n    // Copy symbol fix.\n    // { ...srcVal } copies symbol wrong, it adds symbol value to the property defined just after it\n    // Problem example: { SYMBOL: ['Test'], someProp: 10 } => { someProp: ['Test'] }\n    // mergeWith prevents wrong copy because it doesn't iterate trough Symbols so it skips INCLUDE\n    // We do not INCLUDE symbol to be copied actually in this function\n    // because it is copied manually. This whole function is fixing Symbol problems.\n    const newObj = _.mergeWith({}, srcVal, (o, s) => s);\n    // Assigning INCLUDE after object definition to avoid Object.assign when code transpiled.\n    // Object.assign in RN uses polyfill which doesn't copy Symbols that's why INCLUDE symbol\n    // must be set manually after spread.\n    // TODO(Braco) - once Object.assign polyfill is no longer used use commented code bellow\n    // Check if `customizer` is needed still at all after polyfill is removed!\n    // return { ...srcVal, [INCLUDE]: include }; // add new lines for each property\n    if (include) {\n      newObj[INCLUDE] = include;\n    }\n    return newObj;\n  }\n\n  // otherwise let lodash default merge (return undefined)\n  // and add INCLUDE to objVal if any in srcVal\n  if (_.isPlainObject(newObjVal) && include) {\n    newObjVal[INCLUDE] = include;\n  }\n}\n\n/**\n * Recursively include required target styles from target and base root.\n *\n * @param target - styles object containing\n * @param base - additional style object from which target may include style\n */\nexport default function resolveIncludes(target, base = {}) {\n  /**\n   * Include process steps:\n   * 1. Iterate through target object, check if property is object and if it has [INCLUDE]\n   * 2.a. If property is object, repeat process for that object\n   * 2.b. If property is not object leave value as is\n   * 3. Include any [INCLUDE] (required style)\n   *  1. Repeat process for required style (check if it has any [INCLUDE])\n   */\n\n  /**\n   * Merges style from target and base.\n   * Target style overrides base.\n   * @param styleName - style name to include\n   */\n  function getStyle(styleName) {\n    const defaultStyle = {};\n    let style = defaultStyle;\n\n    const baseStyle = base[styleName];\n    if (baseStyle) {\n      if (baseStyle[INCLUDE]) {\n        throw Error(`Base style cannot have includes, unexpected include in ${styleName}.`);\n      }\n      style = { ...baseStyle };\n    }\n\n    const targetStyle = target[styleName];\n    if (targetStyle) {\n      style = {\n        ...style,\n        ...targetStyle,\n      };\n    }\n\n    if (style === defaultStyle) {\n      console.warn(`Including unexisting style: ${styleName}`);\n    }\n\n    return style;\n  }\n\n  // Includes all styles required by using the INCLUDE symbol\n  // on the styleNode object level, and recursively calls itself\n  // for all nested style objects. After calling this function, the\n  // styleNode object will be fully processed, i.e., all styles\n  // required by this object, and any of its children will be resolved.\n  function includeNodeStyles(styleNode, processingStyleNames) {\n    if (!_.isPlainObject(styleNode)) {\n      return styleNode;\n    }\n\n    // Style names which current style node want to include\n    const styleNamesToInclude = styleNode[INCLUDE];\n\n    let stylesToInclude = {};\n    if (styleNamesToInclude) {\n      if (!_.isArray(styleNamesToInclude)) {\n        throw Error('Include should be array');\n      }\n\n      for (const styleName of styleNamesToInclude) {\n        if (processingStyleNames.has(styleName)) {\n          throw Error(`Circular style include, including ${styleName}`);\n        }\n        processingStyleNames.add(styleName);\n        stylesToInclude = _.mergeWith(\n          {},\n          stylesToInclude,\n          includeNodeStyles(getStyle(styleName), processingStyleNames),\n          includeSymbolMergeHandler\n        );\n        processingStyleNames.delete(styleName);\n      }\n    }\n\n    const resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n    delete resultingStyle[INCLUDE];\n\n    for (const styleName of _.keys(resultingStyle)) {\n      resultingStyle[styleName] =\n        includeNodeStyles(resultingStyle[styleName], processingStyleNames);\n    }\n    return resultingStyle;\n  }\n\n  // A that holds all style names that are currently\n  // being processed. This is used to detect include\n  // cycles.\n  const processingStyleNames = new Set();\n  return includeNodeStyles(target, processingStyleNames);\n}\n"]}