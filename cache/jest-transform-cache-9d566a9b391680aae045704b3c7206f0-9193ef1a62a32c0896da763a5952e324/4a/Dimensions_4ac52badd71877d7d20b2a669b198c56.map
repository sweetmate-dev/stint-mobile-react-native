{"version":3,"sources":["Dimensions.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dims","windowPhysicalPixels","JSON","parse","stringify","window","width","scale","height","fontScale","OS","screenPhysicalPixels","screen","emit","dim","type","handler","addListener","removeListener","global","nativeExtensions","DeviceInfo","nativeExtensionsEnabled","set","update","module","exports"],"mappings":";;;;;;;;;;AAUA,a;;AAEA,IAAMA,eAAeC,QAAQ,cAAR,CAArB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,wBAAwBF,QAAQ,uBAAR,CAA9B;;AAEA,IAAMG,YAAYH,QAAQ,oBAAR,CAAlB;;AAEA,IAAMI,eAAe,IAAIL,YAAJ,EAArB;AACA,IAAIM,wBAAwB,KAA5B;AACA,IAAMC,aAAa,EAAnB,C;AACMC,U;;;;;;;AAOOC,Q,EAAkC;;;;AAI3C,UAAIA,QAAQA,KAAKC,oBAAjB,EAAuC;;AAErCD,eAAOE,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeJ,IAAf,CAAX,CAAP;;AAEA,YAAMC,uBAAuBD,KAAKC,oBAAlC;AACAD,aAAKK,MAAL,GAAc;AACZC,iBAAOL,qBAAqBK,KAArB,GAA6BL,qBAAqBM,KAD7C;AAEZC,kBAAQP,qBAAqBO,MAArB,GAA8BP,qBAAqBM,KAF/C;AAGZA,iBAAON,qBAAqBM,KAHhB;AAIZE,qBAAWR,qBAAqBQ,SAJpB,EAAd;;AAMA,YAAIhB,SAASiB,EAAT,KAAgB,SAApB,EAA+B;;AAE7B,cAAMC,uBAAuBX,KAAKW,oBAAlC;AACAX,eAAKY,MAAL,GAAc;AACZN,mBAAOK,qBAAqBL,KAArB,GAA6BK,qBAAqBJ,KAD7C;AAEZC,oBAAQG,qBAAqBH,MAArB,GAA8BG,qBAAqBJ,KAF/C;AAGZA,mBAAOI,qBAAqBJ,KAHhB;AAIZE,uBAAWE,qBAAqBF,SAJpB,EAAd;;;;AAQA,iBAAOT,KAAKW,oBAAZ;AACD,SAZD,MAYO;AACLX,eAAKY,MAAL,GAAcZ,KAAKK,MAAnB;AACD;;AAED,eAAOL,KAAKC,oBAAZ;AACD;;AAED,eAAcH,UAAd,EAA0BE,IAA1B;AACA,UAAIH,qBAAJ,EAA2B;;AAEzBD,qBAAaiB,IAAb,CAAkB,QAAlB,EAA4B;AAC1BR,kBAAQP,WAAWO,MADO;AAE1BO,kBAAQd,WAAWc,MAFO,EAA5B;;AAID,OAND,MAMO;AACLf,gCAAwB,IAAxB;AACD;AACF,K;;;;;;;;;;;;;;;;;AAiBUiB,O,EAAqB;AAC9BnB,gBAAUG,WAAWgB,GAAX,CAAV,EAA2B,8BAA8BA,GAAzD;AACA,aAAOhB,WAAWgB,GAAX,CAAP;AACD,K;;;;;;;;;;AAUuBC,Q,EAAcC,O,EAAmB;AACvDrB;AACEoB,eAAS,QADX;AAEE,kDAFF;AAGEA,UAHF;;AAKAnB,mBAAaqB,WAAb,CAAyBF,IAAzB,EAA+BC,OAA/B;AACD,K;;;;;AAK0BD,Q,EAAcC,O,EAAmB;AAC1DrB;AACEoB,eAAS,QADX;AAEE,yDAFF;AAGEA,UAHF;;AAKAnB,mBAAasB,cAAb,CAA4BH,IAA5B,EAAkCC,OAAlC;AACD,K;;;AAGH,IAAIhB;AACFmB,OAAOC,gBAAP;AACAD,OAAOC,gBAAP,CAAwBC,UADxB;AAEAF,OAAOC,gBAAP,CAAwBC,UAAxB,CAAmCtB,UAHrC;AAIA,IAAIuB,0BAA0B,IAA9B;AACA,IAAI,CAACtB,IAAL,EAAW;AACT,MAAMqB,aAAa7B,QAAQ,YAAR,CAAnB;AACAQ,SAAOqB,WAAWtB,UAAlB;AACAuB,4BAA0B,KAA1B;AACD;;AAED3B;AACEK,IADF;AAEE,mFAFF;;AAIAD,WAAWwB,GAAX,CAAevB,IAAf;AACA,IAAI,CAACsB,uBAAL,EAA8B;AAC5B5B,wBAAsBuB,WAAtB,CAAkC,qBAAlC,EAAyD,UAASO,MAAT,EAAiB;AACxEzB,eAAWwB,GAAX,CAAeC,MAAf;AACD,GAFD;AAGD;;AAEDC,OAAOC,OAAP,GAAiB3B,UAAjB","file":"Dimensions.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst Platform = require('Platform');\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst eventEmitter = new EventEmitter();\nlet dimensionsInitialized = false;\nconst dimensions = {};\nclass Dimensions {\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: {[key: string]: any}): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    if (dims && dims.windowPhysicalPixels) {\n      // parse/stringify => Clone hack\n      dims = JSON.parse(JSON.stringify(dims));\n\n      const windowPhysicalPixels = dims.windowPhysicalPixels;\n      dims.window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n      if (Platform.OS === 'android') {\n        // Screen and window dimensions are different on android\n        const screenPhysicalPixels = dims.screenPhysicalPixels;\n        dims.screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale,\n        };\n\n        // delete so no callers rely on this existing\n        delete dims.screenPhysicalPixels;\n      } else {\n        dims.screen = dims.window;\n      }\n      // delete so no callers rely on this existing\n      delete dims.windowPhysicalPixels;\n    }\n\n    Object.assign(dimensions, dims);\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', {\n        window: dimensions.window,\n        screen: dimensions.screen,\n      });\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `var {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nlet dims: ?{[key: string]: any} =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nlet nativeExtensionsEnabled = true;\nif (!dims) {\n  const DeviceInfo = require('DeviceInfo');\n  dims = DeviceInfo.Dimensions;\n  nativeExtensionsEnabled = false;\n}\n\ninvariant(\n  dims,\n  'Either DeviceInfo native extension or DeviceInfo Native Module must be registered',\n);\nDimensions.set(dims);\nif (!nativeExtensionsEnabled) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function(update) {\n    Dimensions.set(update);\n  });\n}\n\nmodule.exports = Dimensions;\n"]}