6edcf1f6e455191e0eb5e69c0f9f80e3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = resolveIncludes;exports.INCLUDE = void 0;var _ = _interopRequireWildcard(require("lodash"));function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }newObj.default = obj;return newObj;
  }
}function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }return target;
}function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}function _iterableToArray(iter) {
  if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  }
}
var INCLUDE = '@@shoutem.theme/include';exports.INCLUDE = INCLUDE;

function includeSymbolMergeHandler(objVal, srcVal) {
  var newObjVal = objVal;
  var include;

  if (srcVal && srcVal[INCLUDE]) {
    include = newObjVal && newObjVal[INCLUDE] ? _toConsumableArray(newObjVal[INCLUDE]).concat(_toConsumableArray(srcVal[INCLUDE])) : srcVal[INCLUDE];
  }

  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {

    var newObj = _.mergeWith({}, srcVal, function (o, s) {
      return s;
    });

    if (include) {
      newObj[INCLUDE] = include;
    }
    return newObj;
  }

  if (_.isPlainObject(newObjVal) && include) {
    newObjVal[INCLUDE] = include;
  }
}

function resolveIncludes(target) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  function getStyle(styleName) {
    var defaultStyle = {};
    var style = defaultStyle;

    var baseStyle = base[styleName];
    if (baseStyle) {
      if (baseStyle[INCLUDE]) {
        throw Error("Base style cannot have includes, unexpected include in " + styleName + ".");
      }
      style = _objectSpread({}, baseStyle);
    }

    var targetStyle = target[styleName];
    if (targetStyle) {
      style = _objectSpread({}, style, targetStyle);
    }

    if (style === defaultStyle) {
      console.warn("Including unexisting style: " + styleName);
    }

    return style;
  }

  function includeNodeStyles(styleNode, processingStyleNames) {
    if (!_.isPlainObject(styleNode)) {
      return styleNode;
    }

    var styleNamesToInclude = styleNode[INCLUDE];

    var stylesToInclude = {};
    if (styleNamesToInclude) {
      if (!_.isArray(styleNamesToInclude)) {
        throw Error('Include should be array');
      }

      for (var _iterator = styleNamesToInclude, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref;if (_isArray) {
          if (_i >= _iterator.length) break;_ref = _iterator[_i++];
        } else {
          _i = _iterator.next();if (_i.done) break;_ref = _i.value;
        }var _styleName = _ref;
        if (processingStyleNames.has(_styleName)) {
          throw Error("Circular style include, including " + _styleName);
        }
        processingStyleNames.add(_styleName);
        stylesToInclude = _.mergeWith({}, stylesToInclude, includeNodeStyles(getStyle(_styleName), processingStyleNames), includeSymbolMergeHandler);

        processingStyleNames.delete(_styleName);
      }
    }

    var resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);
    delete resultingStyle[INCLUDE];

    for (var _iterator2 = _.keys(resultingStyle), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref2;if (_isArray2) {
        if (_i2 >= _iterator2.length) break;_ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();if (_i2.done) break;_ref2 = _i2.value;
      }var _styleName3 = _ref2;
      resultingStyle[_styleName3] = includeNodeStyles(resultingStyle[_styleName3], processingStyleNames);
    }
    return resultingStyle;
  }

  var processingStyleNames = new Set();
  return includeNodeStyles(target, processingStyleNames);
}