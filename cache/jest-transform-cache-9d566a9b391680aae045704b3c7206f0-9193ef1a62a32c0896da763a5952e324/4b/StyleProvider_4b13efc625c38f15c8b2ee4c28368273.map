{"version":3,"sources":["StyleProvider.js"],"names":["StyleProvider","props","context","state","theme","createTheme","nextProps","style","setState","Theme","children","Children","only","React","Component","propTypes","PropTypes","element","isRequired","object","defaultProps","childContextTypes","ThemeShape"],"mappings":"mmBAAA,8B;AACA,uC;AACA,gC;AACA,kE;;;;;AAKqBA,a;;;;;;;;;;;;;;AAcnB,yBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AACpBD,SADoB,EACbC,OADa;AAE1B,UAAKC,KAAL,GAAa;AACXC,aAAO,MAAKC,WAAL,CAAiBJ,KAAjB,CADI,EAAb,CAF0B;;AAK3B,G;;AAEiB;AAChB,aAAO;AACLG,eAAO,KAAKD,KAAL,CAAWC,KADb,EAAP;;AAGD,K;;AAEyBE,a,EAAW;AACnC,UAAIA,UAAUC,KAAV,KAAoB,KAAKN,KAAL,CAAWM,KAAnC,EAA0C;AACxC,aAAKC,QAAL,CAAc;AACZJ,iBAAO,KAAKC,WAAL,CAAiBC,SAAjB,CADK,EAAd;;AAGD;AACF,K;;AAEWL,S,EAAO;AACjB,aAAO,IAAIQ,eAAJ,CAAUR,MAAMM,KAAhB,CAAP;AACD,K;;AAEQ;AACCG,cADD,GACc,KAAKT,KADnB,CACCS,QADD;;AAGP,aAAOC,gBAASC,IAAT,CAAcF,QAAd,CAAP;AACD,K,4BA3CwCG,gBAAMC,S,EAA5Bd,a,CACZe,S,GAAY,EACjBL,UAAUM,oBAAUC,OAAV,CAAkBC,UADX,EAEjBX,OAAOS,oBAAUG,MAFA,E,CADAnB,a,CAMZoB,Y,GAAe,EACpBb,OAAO,EADa,E,CANHP,a,CAUZqB,iB,GAAoB,EACzBjB,OAAOkB,kBAAWJ,UADO,E,mBAVRlB,a","file":"StyleProvider.js","sourcesContent":["import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport Theme, { ThemeShape } from './Theme';\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\n\n/**\n *  Provides a theme to child components trough context.\n */\nexport default class StyleProvider extends React.Component {\n  static propTypes = {\n    children: PropTypes.element.isRequired,\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    style: {},\n  };\n\n  static childContextTypes = {\n    theme: ThemeShape.isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      theme: this.createTheme(props),\n    };\n  }\n\n  getChildContext() {\n    return {\n      theme: this.state.theme,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.style !== this.props.style) {\n      this.setState({\n        theme: this.createTheme(nextProps),\n      });\n    }\n  }\n\n  createTheme(props) {\n    return new Theme(props.style);\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return Children.only(children);\n  }\n}\n"]}