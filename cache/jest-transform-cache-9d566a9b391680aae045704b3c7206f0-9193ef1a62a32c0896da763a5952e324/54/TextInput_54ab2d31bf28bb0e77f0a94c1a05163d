6b4183b30c4d2da0beec6bc0cb8d15a4









'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var ColorPropType = require('ColorPropType');
var DocumentSelectionState = require('DocumentSelectionState');
var EventEmitter = require('EventEmitter');
var NativeMethodsMixin = require('NativeMethodsMixin');
var Platform = require('Platform');
var React = require('React');
var createReactClass = require('create-react-class');
var PropTypes = require('prop-types');
var ReactNative = require('ReactNative');
var StyleSheet = require('StyleSheet');
var Text = require('Text');
var TextAncestor = require('TextAncestor');
var TextInputState = require('TextInputState');
var TimerMixin = require('react-timer-mixin');
var TouchableWithoutFeedback = require('TouchableWithoutFeedback');
var UIManager = require('UIManager');
var ViewPropTypes = require('ViewPropTypes');

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var requireNativeComponent = require('requireNativeComponent');
var warning = require('fbjs/lib/warning');





var AndroidTextInput = void 0;
var RCTMultilineTextInputView = void 0;
var RCTSinglelineTextInputView = void 0;

if (Platform.OS === 'android') {
  AndroidTextInput = requireNativeComponent('AndroidTextInput');
} else if (Platform.OS === 'ios') {
  RCTMultilineTextInputView = requireNativeComponent(
  'RCTMultilineTextInputView');

  RCTSinglelineTextInputView = requireNativeComponent(
  'RCTSinglelineTextInputView');

}

var onlyMultiline = {
  onTextInput: true,
  children: true };








var DataDetectorTypes = [
'phoneNumber',
'link',
'address',
'calendarEvent',
'none',
'all'];





























































































































































































































































var TextInput = createReactClass({
  displayName: 'TextInput',
  statics: {
    State: {
      currentlyFocusedField: TextInputState.currentlyFocusedField,
      focusTextInput: TextInputState.focusTextInput,
      blurTextInput: TextInputState.blurTextInput } },


  propTypes: _extends({},
  ViewPropTypes, {








    autoCapitalize: PropTypes.oneOf([
    'none',
    'sentences',
    'words',
    'characters']),




    autoCorrect: PropTypes.bool,





    spellCheck: PropTypes.bool,




    autoFocus: PropTypes.bool,




    allowFontScaling: PropTypes.bool,



    editable: PropTypes.bool,





























    keyboardType: PropTypes.oneOf([

    'default',
    'email-address',
    'numeric',
    'phone-pad',
    'number-pad',

    'ascii-capable',
    'numbers-and-punctuation',
    'url',
    'name-phone-pad',
    'decimal-pad',
    'twitter',
    'web-search',

    'visible-password']),





    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
































    returnKeyType: PropTypes.oneOf([

    'done',
    'go',
    'next',
    'search',
    'send',

    'none',
    'previous',

    'default',
    'emergency-call',
    'google',
    'join',
    'route',
    'yahoo']),





    returnKeyLabel: PropTypes.string,




    maxLength: PropTypes.number,





    numberOfLines: PropTypes.number,








    disableFullscreenUI: PropTypes.bool,





    enablesReturnKeyAutomatically: PropTypes.bool,




    multiline: PropTypes.bool,





    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),



    onBlur: PropTypes.func,



    onFocus: PropTypes.func,



    onChange: PropTypes.func,




    onChangeText: PropTypes.func,







    onContentSizeChange: PropTypes.func,
    onTextInput: PropTypes.func,



    onEndEditing: PropTypes.func,





    onSelectionChange: PropTypes.func,




    onSubmitEditing: PropTypes.func,







    onKeyPress: PropTypes.func,



    onLayout: PropTypes.func,





    onScroll: PropTypes.func,



    placeholder: PropTypes.string,



    placeholderTextColor: ColorPropType,





    scrollEnabled: PropTypes.bool,




    secureTextEntry: PropTypes.bool,



    selectionColor: ColorPropType,















    selectionState: PropTypes.instanceOf(DocumentSelectionState),




    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number }),










    value: PropTypes.string,





    defaultValue: PropTypes.string,





    clearButtonMode: PropTypes.oneOf([
    'never',
    'while-editing',
    'unless-editing',
    'always']),





    clearTextOnFocus: PropTypes.bool,



    selectTextOnFocus: PropTypes.bool,







    blurOnSubmit: PropTypes.bool,

















    style: Text.propTypes.style,




    underlineColorAndroid: ColorPropType,












    inlineImageLeft: PropTypes.string,





    inlineImagePadding: PropTypes.number,



















    dataDetectorTypes: PropTypes.oneOfType([
    PropTypes.oneOf(DataDetectorTypes),
    PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),





    caretHidden: PropTypes.bool,



    contextMenuHidden: PropTypes.bool,






    inputAccessoryViewID: PropTypes.string,





    textContentType: PropTypes.oneOf([
    'none',
    'URL',
    'addressCity',
    'addressCityAndState',
    'addressState',
    'countryName',
    'creditCardNumber',
    'emailAddress',
    'familyName',
    'fullStreetAddress',
    'givenName',
    'jobTitle',
    'location',
    'middleName',
    'name',
    'namePrefix',
    'nameSuffix',
    'nickname',
    'organizationName',
    'postalCode',
    'streetAddressLine1',
    'streetAddressLine2',
    'sublocality',
    'telephoneNumber',
    'username',
    'password']) }),


  getDefaultProps: function getDefaultProps() {
    return {
      allowFontScaling: true,
      underlineColorAndroid: 'transparent' };

  },




  mixins: [NativeMethodsMixin, TimerMixin],




  isFocused: function isFocused() {
    return (
      TextInputState.currentlyFocusedField() ===
      ReactNative.findNodeHandle(this._inputRef));

  },

  _inputRef: undefined,
  _focusSubscription: undefined,
  _lastNativeText: undefined,
  _lastNativeSelection: undefined,

  componentDidMount: function componentDidMount() {var _this = this;
    this._lastNativeText = this.props.value;
    var tag = ReactNative.findNodeHandle(this._inputRef);
    if (tag != null) {

      TextInputState.registerInput(tag);
    }

    if (this.context.focusEmitter) {
      this._focusSubscription = this.context.focusEmitter.addListener(
      'focus',
      function (el) {
        if (_this === el) {
          _this.requestAnimationFrame(_this.focus);
        } else if (_this.isFocused()) {
          _this.blur();
        }
      });

      if (this.props.autoFocus) {
        this.context.onFocusRequested(this);
      }
    } else {
      if (this.props.autoFocus) {
        this.requestAnimationFrame(this.focus);
      }
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._focusSubscription && this._focusSubscription.remove();
    if (this.isFocused()) {
      this.blur();
    }
    var tag = ReactNative.findNodeHandle(this._inputRef);
    if (tag != null) {
      TextInputState.unregisterInput(tag);
    }
  },

  contextTypes: {
    onFocusRequested: PropTypes.func,
    focusEmitter: PropTypes.instanceOf(EventEmitter) },





  clear: function clear() {
    this.setNativeProps({ text: '' });
  },

  render: function render() {
    var textInput = void 0;
    if (Platform.OS === 'ios') {
      textInput = UIManager.RCTVirtualText ?
      this._renderIOS() :
      this._renderIOSLegacy();
    } else if (Platform.OS === 'android') {
      textInput = this._renderAndroid();
    }
    return (
      React.createElement(TextAncestor.Provider, { value: true }, textInput));

  },

  _getText: function _getText() {
    return typeof this.props.value === 'string' ?
    this.props.value :
    typeof this.props.defaultValue === 'string' ?
    this.props.defaultValue :
    '';
  },

  _setNativeRef: function _setNativeRef(ref) {
    this._inputRef = ref;
  },

  _renderIOSLegacy: function _renderIOSLegacy() {
    var textContainer = void 0;

    var props = _extends({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start };

    }

    if (!props.multiline) {
      if (__DEV__) {
        for (var propKey in onlyMultiline) {
          if (props[propKey]) {
            var error = new Error(
            'TextInput prop `' +
            propKey +
            '` is only supported with multiline.');

            warning(false, '%s', error.stack);
          }
        }
      }
      textContainer =
      React.createElement(RCTSinglelineTextInputView, _extends({
        ref: this._setNativeRef },
      props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText() }));


    } else {
      var children = props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {return ++childCount;});
      invariant(
      !(props.value && childCount),
      'Cannot specify both value and children.');

      if (childCount >= 1) {
        children =
        React.createElement(Text, { style: props.style, allowFontScaling: props.allowFontScaling },
          children);


      }
      if (props.inputView) {
        children = [children, props.inputView];
      }
      props.style.unshift(styles.multilineInput);
      textContainer =
      React.createElement(RCTMultilineTextInputView, _extends({
        ref: this._setNativeRef },
      props, {
        children: children,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll }));


    }

    return (
      React.createElement(TouchableWithoutFeedback, {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityRole: props.accessibilityRole,
          accessibilityStates: props.accessibilityStates,
          nativeID: this.props.nativeID,
          testID: props.testID },
        textContainer));


  },

  _renderIOS: function _renderIOS() {
    var props = _extends({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start };

    }

    var RCTTextInputView = props.multiline ?
    RCTMultilineTextInputView :
    RCTSinglelineTextInputView;

    if (props.multiline) {
      props.style.unshift(styles.multilineInput);
    }

    var textContainer =
    React.createElement(RCTTextInputView, _extends({
      ref: this._setNativeRef },
    props, {
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onContentSizeChange: this.props.onContentSizeChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
      text: this._getText(),
      dataDetectorTypes: this.props.dataDetectorTypes,
      onScroll: this._onScroll }));



    return (
      React.createElement(TouchableWithoutFeedback, {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityRole: props.accessibilityRole,
          accessibilityStates: props.accessibilityStates,
          nativeID: this.props.nativeID,
          testID: props.testID },
        textContainer));


  },

  _renderAndroid: function _renderAndroid() {
    var props = _extends({}, this.props);
    props.style = [this.props.style];
    props.autoCapitalize =
    UIManager.AndroidTextInput.Constants.AutoCapitalizationType[
    props.autoCapitalize || 'sentences'];




    var children = this.props.children;
    var childCount = 0;
    React.Children.forEach(children, function () {return ++childCount;});
    invariant(
    !(this.props.value && childCount),
    'Cannot specify both value and children.');

    if (childCount > 1) {
      children = React.createElement(Text, null, children);
    }

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start };

    }

    var textContainer =
    React.createElement(AndroidTextInput, _extends({
      ref: this._setNativeRef },
    props, {
      mostRecentEventCount: 0,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      text: this._getText(),
      children: children,
      disableFullscreenUI: this.props.disableFullscreenUI,
      textBreakStrategy: this.props.textBreakStrategy,
      onScroll: this._onScroll }));



    return (
      React.createElement(TouchableWithoutFeedback, {
          onLayout: props.onLayout,
          onPress: this._onPress,
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityStates: this.props.accessibilityStates,
          nativeID: this.props.nativeID,
          testID: this.props.testID },
        textContainer));


  },

  _onFocus: function _onFocus(event) {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  },

  _onPress: function _onPress(event) {
    if (this.props.editable || this.props.editable === undefined) {
      this.focus();
    }
  },

  _onChange: function _onChange(event) {


    if (this._inputRef) {
      this._inputRef.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount });

    }

    var text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this._inputRef) {


      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  },

  _onSelectionChange: function _onSelectionChange(event) {
    this.props.onSelectionChange && this.props.onSelectionChange(event);

    if (!this._inputRef) {


      return;
    }

    this._lastNativeSelection = event.nativeEvent.selection;

    if (this.props.selection || this.props.selectionState) {
      this.forceUpdate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {



    var nativeProps = {};

    if (
    this._lastNativeText !== this.props.value &&
    typeof this.props.value === 'string')
    {
      nativeProps.text = this.props.value;
    }var



    selection = this.props.selection;
    if (
    this._lastNativeSelection &&
    selection && (
    this._lastNativeSelection.start !== selection.start ||
    this._lastNativeSelection.end !== selection.end))
    {
      nativeProps.selection = this.props.selection;
    }

    if (Object.keys(nativeProps).length > 0 && this._inputRef) {
      this._inputRef.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  },

  _onBlur: function _onBlur(event) {
    this.blur();
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  },

  _onTextInput: function _onTextInput(event) {
    this.props.onTextInput && this.props.onTextInput(event);
  },

  _onScroll: function _onScroll(event) {
    this.props.onScroll && this.props.onScroll(event);
  } });var


InternalTextInputType = function (_ReactNative$NativeCo) {_inherits(InternalTextInputType, _ReactNative$NativeCo);function InternalTextInputType() {_classCallCheck(this, InternalTextInputType);return _possibleConstructorReturn(this, (InternalTextInputType.__proto__ || Object.getPrototypeOf(InternalTextInputType)).apply(this, arguments));}_createClass(InternalTextInputType, [{ key: 'clear', value: function clear()
    {} }, { key: 'isFocused', value: function isFocused()


    {} }]);return InternalTextInputType;}(ReactNative.NativeComponent);


var TypedTextInput = TextInput;

var styles = StyleSheet.create({
  multilineInput: {



    paddingTop: 5 } });



module.exports = TypedTextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,