{"version":3,"sources":["TextInput.js"],"names":["ColorPropType","require","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextAncestor","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","emptyFunction","invariant","requireNativeComponent","warning","AndroidTextInput","RCTMultilineTextInputView","RCTSinglelineTextInputView","OS","onlyMultiline","onTextInput","children","DataDetectorTypes","TextInput","displayName","statics","State","currentlyFocusedField","focusTextInput","blurTextInput","propTypes","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","allowFontScaling","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","placeholderTextColor","scrollEnabled","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","contextMenuHidden","inputAccessoryViewID","textContentType","getDefaultProps","mixins","isFocused","findNodeHandle","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","props","tag","registerInput","context","focusEmitter","addListener","el","requestAnimationFrame","focus","blur","onFocusRequested","componentWillUnmount","remove","unregisterInput","contextTypes","clear","setNativeProps","text","render","textInput","RCTVirtualText","_renderIOS","_renderIOSLegacy","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","thatReturnsTrue","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","nativeID","testID","RCTTextInputView","Constants","AutoCapitalizationType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","InternalTextInputType","NativeComponent","TypedTextInput","create","paddingTop","module","exports"],"mappings":"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","file":"TextInput.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextAncestor = require('TextAncestor');\nconst TextInputState = require('TextInputState');\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {TextStyleProp} from 'StyleSheet';\nimport type {ViewProps} from 'ViewPropTypes';\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput');\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n  );\n}\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\ntype IOSProps = $ReadOnly<{|\n  spellCheck?: ?boolean,\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n  enablesReturnKeyAutomatically?: ?boolean,\n  selectionState?: ?DocumentSelectionState,\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n  clearTextOnFocus?: ?boolean,\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n  inputAccessoryViewID?: ?string,\n  textContentType?: ?(\n    | 'none'\n    | 'URL'\n    | 'addressCity'\n    | 'addressCityAndState'\n    | 'addressState'\n    | 'countryName'\n    | 'creditCardNumber'\n    | 'emailAddress'\n    | 'familyName'\n    | 'fullStreetAddress'\n    | 'givenName'\n    | 'jobTitle'\n    | 'location'\n    | 'middleName'\n    | 'name'\n    | 'namePrefix'\n    | 'nameSuffix'\n    | 'nickname'\n    | 'organizationName'\n    | 'postalCode'\n    | 'streetAddressLine1'\n    | 'streetAddressLine2'\n    | 'sublocality'\n    | 'telephoneNumber'\n    | 'username'\n    | 'password'\n  ),\n  scrollEnabled?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  returnKeyLabel?: ?string,\n  numberOfLines?: ?number,\n  disableFullscreenUI?: ?boolean,\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n  underlineColorAndroid?: ?ColorValue,\n  inlineImageLeft?: ?string,\n  inlineImagePadding?: ?number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n  autoCapitalize?: ?AutoCapitalize,\n  autoCorrect?: ?boolean,\n  autoFocus?: ?boolean,\n  allowFontScaling?: ?boolean,\n  editable?: ?boolean,\n  keyboardType?: ?KeyboardType,\n  returnKeyType?: ?ReturnKeyType,\n  maxLength?: ?number,\n  multiline?: ?boolean,\n  onBlur?: ?Function,\n  onFocus?: ?Function,\n  onChange?: ?Function,\n  onChangeText?: ?Function,\n  onContentSizeChange?: ?Function,\n  onTextInput?: ?Function,\n  onEndEditing?: ?Function,\n  onSelectionChange?: ?Function,\n  onSubmitEditing?: ?Function,\n  onKeyPress?: ?Function,\n  onScroll?: ?Function,\n  placeholder?: ?Stringish,\n  placeholderTextColor?: ?ColorValue,\n  secureTextEntry?: ?boolean,\n  selectionColor?: ?ColorValue,\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n  value?: ?Stringish,\n  defaultValue?: ?Stringish,\n  selectTextOnFocus?: ?boolean,\n  blurOnSubmit?: ?boolean,\n  style?: ?TextStyleProp,\n  caretHidden?: ?boolean,\n  contextMenuHidden?: ?boolean,\n|}>;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    State: {\n      currentlyFocusedField: TextInputState.currentlyFocusedField,\n      focusTextInput: TextInputState.focusTextInput,\n      blurTextInput: TextInputState.blurTextInput,\n    },\n  },\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `number-pad`\n     * - `decimal-pad`\n     * - `email-address`\n     * - `phone-pad`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `ascii-capable`\n     * - `numbers-and-punctuation`\n     * - `url`\n     * - `name-phone-pad`\n     * - `twitter`\n     * - `web-search`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `visible-password`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      'number-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n      // Android-only\n      'visible-password',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    onTextInput: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `false`, scrolling of the text view will be disabled.\n     * The default value is `true`. Does only work with 'multiline={true}'.\n     * @platform ios\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n     * The highlight and cursor color of the text input.\n     */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * This property is supported only for single-line TextInput component.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n     *\n     * - `borderLeftWidth`\n     * - `borderTopWidth`\n     * - `borderRightWidth`\n     * - `borderBottomWidth`\n     * - `borderTopLeftRadius`\n     * - `borderTopRightRadius`\n     * - `borderBottomRightRadius`\n     * - `borderBottomLeftRadius`\n     *\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     * This property is supported only for single-line TextInput component on iOS.\n     */\n    caretHidden: PropTypes.bool,\n    /*\n     * If `true`, contextMenuHidden is hidden. The default value is `false`.\n     */\n    contextMenuHidden: PropTypes.bool,\n    /**\n     * An optional identifier which links a custom InputAccessoryView to\n     * this text input. The InputAccessoryView is rendered above the\n     * keyboard when this text input is focused.\n     * @platform ios\n     */\n    inputAccessoryViewID: PropTypes.string,\n    /**\n     * Give the keyboard and the system information about the\n     * expected semantic meaning for the content that users enter.\n     * @platform ios\n     */\n    textContentType: PropTypes.oneOf([\n      'none',\n      'URL',\n      'addressCity',\n      'addressCityAndState',\n      'addressState',\n      'countryName',\n      'creditCardNumber',\n      'emailAddress',\n      'familyName',\n      'fullStreetAddress',\n      'givenName',\n      'jobTitle',\n      'location',\n      'middleName',\n      'name',\n      'namePrefix',\n      'nameSuffix',\n      'nickname',\n      'organizationName',\n      'postalCode',\n      'streetAddressLine1',\n      'streetAddressLine2',\n      'sublocality',\n      'telephoneNumber',\n      'username',\n      'password',\n    ]),\n  },\n  getDefaultProps(): Object {\n    return {\n      allowFontScaling: true,\n      underlineColorAndroid: 'transparent',\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      // tag is null only in unit tests\n      TextInputState.registerInput(tag);\n    }\n\n    if (this.context.focusEmitter) {\n      this._focusSubscription = this.context.focusEmitter.addListener(\n        'focus',\n        el => {\n          if (this === el) {\n            this.requestAnimationFrame(this.focus);\n          } else if (this.isFocused()) {\n            this.blur();\n          }\n        },\n      );\n      if (this.props.autoFocus) {\n        this.context.onFocusRequested(this);\n      }\n    } else {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      TextInputState.unregisterInput(tag);\n    }\n  },\n\n  contextTypes: {\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    let textInput;\n    if (Platform.OS === 'ios') {\n      textInput = UIManager.RCTVirtualText\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      textInput = this._renderAndroid();\n    }\n    return (\n      <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n    );\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n        ? this.props.defaultValue\n        : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text style={props.style} allowFontScaling={props.allowFontScaling}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[\n        props.autoCapitalize || 'sentences'\n      ];\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nclass InternalTextInputType extends ReactNative.NativeComponent<Props> {\n  clear() {}\n\n  // $FlowFixMe\n  isFocused(): boolean {}\n}\n\nconst TypedTextInput = ((TextInput: any): Class<InternalTextInputType>);\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TypedTextInput;\n"]}