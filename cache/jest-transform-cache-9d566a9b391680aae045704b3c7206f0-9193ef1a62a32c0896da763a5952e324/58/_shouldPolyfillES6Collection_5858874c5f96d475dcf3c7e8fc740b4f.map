{"version":3,"sources":["_shouldPolyfillES6Collection.js"],"names":["_shouldActuallyPolyfillES6Collection","collectionName","Collection","global","Symbol","proto","prototype","clear","size","keys","forEach","cache","_shouldPolyfillES6Collection","result","undefined","module","exports"],"mappings":";;;;;;;;;;;AAWA;;;;;;AAMA,SAASA,oCAAT,CAA8CC,cAA9C,EAA+E;AAC7E,MAAMC,aAAaC,OAAOF,cAAP,CAAnB;AACA,MAAIC,cAAc,IAAlB,EAAwB;AACtB,WAAO,IAAP;AACD;;;;;;AAMD,MAAI,OAAOC,OAAOC,MAAd,KAAyB,UAA7B,EAAyC;AACvC,WAAO,IAAP;AACD;;AAED,MAAMC,QAAQH,WAAWI,SAAzB;;;;;AAKA;AACEJ,kBAAc,IAAd;AACA,WAAOA,UAAP,KAAsB,UADtB;AAEA,WAAOG,MAAME,KAAb,KAAuB,UAFvB;AAGA,QAAIL,UAAJ,GAAiBM,IAAjB,KAA0B,CAH1B;AAIA,WAAOH,MAAMI,IAAb,KAAsB,UAJtB;AAKA,WAAOJ,MAAMK,OAAb,KAAyB,UAN3B;;AAQD;;AAED,IAAMC,QAAmC,EAAzC;;;;;;;;AAQA,SAASC,4BAAT,CAAsCX,cAAtC,EAA8D;AAC5D,MAAIY,SAASF,MAAMV,cAAN,CAAb;AACA,MAAIY,WAAWC,SAAf,EAA0B;AACxB,WAAOD,MAAP;AACD;;AAEDA,WAASb,qCAAqCC,cAArC,CAAT;AACAU,QAAMV,cAAN,IAAwBY,MAAxB;AACA,SAAOA,MAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBJ,4BAAjB","file":"_shouldPolyfillES6Collection.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @preventMunge\n * @flow strict\n */\n\n'use strict';\n\n/**\n * Checks whether a collection name (e.g. \"Map\" or \"Set\") has a native polyfill\n * that is safe to be used.\n */\nfunction _shouldActuallyPolyfillES6Collection(collectionName: string): boolean {\n  const Collection = global[collectionName];\n  if (Collection == null) {\n    return true;\n  }\n\n  // The iterator protocol depends on `Symbol.iterator`. If a collection is\n  // implemented, but `Symbol` is not, it's going to break iteration because\n  // we'll be using custom \"@@iterator\" instead, which is not implemented on\n  // native collections.\n  if (typeof global.Symbol !== 'function') {\n    return true;\n  }\n\n  const proto = Collection.prototype;\n\n  // These checks are adapted from es6-shim: https://fburl.com/34437854\n  // NOTE: `isCallableWithoutNew` and `!supportsSubclassing` are not checked\n  // because they make debugging with \"break on exceptions\" difficult.\n  return (\n    Collection == null ||\n    typeof Collection !== 'function' ||\n    typeof proto.clear !== 'function' ||\n    new Collection().size !== 0 ||\n    typeof proto.keys !== 'function' ||\n    typeof proto.forEach !== 'function'\n  );\n}\n\nconst cache: {[name: string]: boolean} = {};\n\n/**\n * Checks whether a collection name (e.g. \"Map\" or \"Set\") has a native polyfill\n * that is safe to be used and caches this result.\n * Make sure to make a first call to this function before a corresponding\n * property on global was overriden in any way.\n */\nfunction _shouldPolyfillES6Collection(collectionName: string) {\n  let result = cache[collectionName];\n  if (result !== undefined) {\n    return result;\n  }\n\n  result = _shouldActuallyPolyfillES6Collection(collectionName);\n  cache[collectionName] = result;\n  return result;\n}\n\nmodule.exports = _shouldPolyfillES6Collection;\n"]}