7a35145604f8ce071240698e2a8ddd27


'use strict';
var _jsxFileName = "/Users/johnamuesi/Documents/PRODUCTION/REACTNATIVE/STINT/stint/node_modules/react-native/Libraries/Text/Text.js";function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
  }
}function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
}function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }return _assertThisInitialized(self);
}function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };return _getPrototypeOf(o);
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);
}function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;return o;
  };return _setPrototypeOf(o, p);
}function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return self;
}function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }return target;
}function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var viewConfig = {
  validAttributes: _objectSpread({}, require('ReactNativeViewAttributes').UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true }),

  uiViewClassName: 'RCTText' };var TouchableText = function (_React$Component) {
  _inherits(TouchableText, _React$Component);function TouchableText() {
    var _getPrototypeOf2;var _this;_classCallCheck(this, TouchableText);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }_this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TouchableText)).call.apply(_getPrototypeOf2, [this].concat(args)));_this.state = _objectSpread({}, require('Touchable').Mixin.touchableGetInitialState(), {
      isHighlighted: false,
      createResponderHandlers: _this._createResponseHandlers.bind(_assertThisInitialized(_assertThisInitialized(_this))),
      responseHandlers: null });return _this;
  }_createClass(TouchableText, [{ key: "render", value: function render() {
      var props = this.props;
      if (isTouchable(props)) {
        props = _objectSpread({}, props, this.state.responseHandlers, {
          isHighlighted: this.state.isHighlighted });
      }
      if (props.selectionColor != null) {
        props = _objectSpread({}, props, {
          selectionColor: require('processColor')(props.selectionColor) });
      }
      if (__DEV__) {
        if (require('Touchable').TOUCH_TARGET_DEBUG && props.onPress != null) {
          props = _objectSpread({}, props, {
            style: [props.style, { color: 'magenta' }] });
        }
      }
      return require('React').createElement(require('TextAncestor').Consumer, { __source: { fileName: _jsxFileName, lineNumber: 139 } }, function (hasTextAncestor) {
        return hasTextAncestor ? require('React').createElement(RCTVirtualText, _extends({}, props, { ref: props.forwardedRef, __source: { fileName: _jsxFileName, lineNumber: 142 } })) : require('React').createElement(require('TextAncestor').Provider, { value: true, __source: { fileName: _jsxFileName, lineNumber: 144 } }, require('React').createElement(RCTText, _extends({}, props, { ref: props.forwardedRef, __source: { fileName: _jsxFileName, lineNumber: 145 } })));
      });
    } }, { key: "_createResponseHandlers", value: function _createResponseHandlers() {
      var _this2 = this;
      return {
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          var onStartShouldSetResponder = _this2.props.onStartShouldSetResponder;
          var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this2.props);

          if (shouldSetResponder) {
            _this2._attachTouchHandlers();
          }
          return shouldSetResponder;
        },
        onResponderGrant: function onResponderGrant(event, dispatchID) {
          require('fbjs/lib/nullthrows')(_this2.touchableHandleResponderGrant)(event, dispatchID);
          if (_this2.props.onResponderGrant != null) {
            _this2.props.onResponderGrant.call(_this2, event, dispatchID);
          }
        },
        onResponderMove: function onResponderMove(event) {
          require('fbjs/lib/nullthrows')(_this2.touchableHandleResponderMove)(event);
          if (_this2.props.onResponderMove != null) {
            _this2.props.onResponderMove.call(_this2, event);
          }
        },
        onResponderRelease: function onResponderRelease(event) {
          require('fbjs/lib/nullthrows')(_this2.touchableHandleResponderRelease)(event);
          if (_this2.props.onResponderRelease != null) {
            _this2.props.onResponderRelease.call(_this2, event);
          }
        },
        onResponderTerminate: function onResponderTerminate(event) {
          require('fbjs/lib/nullthrows')(_this2.touchableHandleResponderTerminate)(event);
          if (_this2.props.onResponderTerminate != null) {
            _this2.props.onResponderTerminate.call(_this2, event);
          }
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          var onResponderTerminationRequest = _this2.props.onResponderTerminationRequest;
          if (!require('fbjs/lib/nullthrows')(_this2.touchableHandleResponderTerminationRequest)()) {
            return false;
          }
          if (onResponderTerminationRequest == null) {
            return true;
          }
          return onResponderTerminationRequest();
        } };
    } }, { key: "_attachTouchHandlers", value: function _attachTouchHandlers() {
      var _this3 = this;
      if (this.touchableGetPressRectOffset != null) {
        return;
      }
      for (var key in require('Touchable').Mixin) {
        if (typeof require('Touchable').Mixin[key] === 'function') {
          this[key] = require('Touchable').Mixin[key].bind(this);
        }
      }
      this.touchableHandleActivePressIn = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({ isHighlighted: true });
        }
      };
      this.touchableHandleActivePressOut = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({ isHighlighted: false });
        }
      };
      this.touchableHandlePress = function (event) {
        if (_this3.props.onPress != null) {
          _this3.props.onPress(event);
        }
      };
      this.touchableHandleLongPress = function (event) {
        if (_this3.props.onLongPress != null) {
          _this3.props.onLongPress(event);
        }
      };
      this.touchableGetPressRectOffset = function () {
        return _this3.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this3.props.pressRetentionOffset;
      };
    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps, prevState) {
      return prevState.responseHandlers == null && isTouchable(nextProps) ? _objectSpread({}, prevState, { responseHandlers: prevState.createResponderHandlers() }) : null;
    } }]);return TouchableText;
}(require('React').Component);TouchableText.defaultProps = { accessible: true, allowFontScaling: true, ellipsizeMode: 'tail' };TouchableText.viewConfig = viewConfig;

var isTouchable = function isTouchable(props) {
  return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;
};

var RCTText = require('createReactNativeComponentClass')(viewConfig.uiViewClassName, function () {
  return viewConfig;
});

var RCTVirtualText = require('UIManager').RCTVirtualText == null ? RCTText : require('createReactNativeComponentClass')('RCTVirtualText', function () {
  return {
    validAttributes: _objectSpread({}, require('ReactNativeViewAttributes').UIView, {
      isHighlighted: true }),

    uiViewClassName: 'RCTVirtualText' };
});

var Text = function Text(props, forwardedRef) {
  return require('React').createElement(TouchableText, _extends({}, props, { forwardedRef: forwardedRef, __source: { fileName: _jsxFileName, lineNumber: 268 } }));
};

var TextToExport = require('React').forwardRef(Text);

TextToExport.propTypes = require('TextPropTypes');

module.exports = TextToExport;