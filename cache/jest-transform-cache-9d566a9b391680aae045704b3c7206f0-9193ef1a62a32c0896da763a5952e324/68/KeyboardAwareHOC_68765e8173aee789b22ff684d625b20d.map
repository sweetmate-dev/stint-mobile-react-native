{"version":3,"sources":["KeyboardAwareHOC.js"],"names":["_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","listenToKeyboardEvents","ScrollableComponent","props","keyboardWillShowEvent","undefined","keyboardWillHideEvent","position","x","y","defaultResetScrollToCoords","keyboardSpace","viewIsInsideTabBar","state","mountedComponent","Platform","OS","Keyboard","addListener","_updateKeyboardSpace","_resetKeyboardSpace","enableOnAndroid","nextProps","setState","remove","contentContainerStyle","newContentContainerStyle","concat","paddingBottom","_handleRef","bottom","getScrollResponder","scrollToPosition","scrollToEnd","scrollForExtraHeightOnAndroid","scrollToFocusedInput","_handleOnScroll","_onScroll","React","Component","propTypes","PropTypes","bool","resetScrollToCoords","shape","number","isRequired","enableResetScrollToCoords","enableAutomaticScroll","extraHeight","extraScrollHeight","keyboardOpeningTime","onScroll","func","any","innerRef","defaultProps","_rnkasv_keyboardView","animated","responder","scrollResponderScrollTo","scrollResponderScrollToEnd","reactNode","setTimeout","scrollResponderScrollNativeHandleToKeyboard","scrollIntoView","element","options","Promise","all","_measureElement","parentLayout","childLayout","getScrollPosition","_defaultGetScrollPosition","contentOffset","Math","max","node","resolve","UIManager","measureInWindow","width","height","frames","endCoordinates","currentlyFocusedField","TextInput","State","viewIsDescendantOf","getInnerViewNode","isAncestor","textInputBottomPosition","keyboardPosition","screenY","totalExtraHeight","_scrollToFocusedInputWithNodeHandle","resetCoords","nodeID","ReactNative","findNodeHandle","e","nativeEvent","ref"],"mappings":"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","file":"KeyboardAwareHOC.js","sourcesContent":["/* @flow */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport ReactNative, {\n  Keyboard,\n  Platform,\n  UIManager,\n  TextInput,\n  findNodeHandle\n} from 'react-native'\nimport { isIphoneX } from 'react-native-iphone-x-helper'\n\nimport type { KeyboardAwareInterface } from './KeyboardAwareInterface'\n\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = isIphoneX() ? 83 : 49\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\nconst _KAM_EXTRA_HEIGHT: number = 75\n\nexport type KeyboardAwareHOCProps = {\n  viewIsInsideTabBar?: boolean,\n  resetScrollToCoords?: {\n    x: number,\n    y: number\n  },\n  enableResetScrollToCoords?: boolean,\n  enableAutomaticScroll?: boolean,\n  extraHeight?: number,\n  extraScrollHeight?: number,\n  keyboardOpeningTime?: number,\n  onScroll?: Function,\n  contentContainerStyle?: any,\n  enableOnAndroid?: boolean,\n  innerRef?: Function\n}\nexport type KeyboardAwareHOCState = {\n  keyboardSpace: number\n}\n\nexport type ElementLayout = {\n  x: number,\n  y: number,\n  width: number,\n  height: number\n}\n\nexport type ContentOffset = {\n  x: number,\n  y: number\n}\n\nexport type ScrollPosition = {\n  x: number,\n  y: number,\n  animated: boolean\n}\n\nexport type ScrollIntoViewOptions = ?{\n  getScrollPosition?: (\n    parentLayout: ElementLayout,\n    childLayout: ElementLayout,\n    contentOffset: ContentOffset\n  ) => ScrollPosition\n}\n\nfunction listenToKeyboardEvents(ScrollableComponent: React$Component) {\n  return class extends React.Component<\n    KeyboardAwareHOCProps,\n    KeyboardAwareHOCState\n    > implements KeyboardAwareInterface {\n    _rnkasv_keyboardView: any\n    keyboardWillShowEvent: ?Function\n    keyboardWillHideEvent: ?Function\n    position: ContentOffset\n    defaultResetScrollToCoords: ?{ x: number, y: number }\n    resetCoords: ?{ x: number, y: number }\n    mountedComponent: boolean\n    handleOnScroll: Function\n    state: KeyboardAwareHOCState\n\n    static propTypes = {\n      viewIsInsideTabBar: PropTypes.bool,\n      resetScrollToCoords: PropTypes.shape({\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired\n      }),\n      enableResetScrollToCoords: PropTypes.bool,\n      enableAutomaticScroll: PropTypes.bool,\n      extraHeight: PropTypes.number,\n      extraScrollHeight: PropTypes.number,\n      keyboardOpeningTime: PropTypes.number,\n      onScroll: PropTypes.func,\n      contentContainerStyle: PropTypes.any,\n      enableOnAndroid: PropTypes.bool,\n      innerRef: PropTypes.func\n    }\n\n    static defaultProps = {\n      enableAutomaticScroll: true,\n      extraHeight: _KAM_EXTRA_HEIGHT,\n      extraScrollHeight: 0,\n      enableResetScrollToCoords: true,\n      keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n      viewIsInsideTabBar: false\n    }\n\n    constructor(props: KeyboardAwareHOCProps) {\n      super(props)\n      this.keyboardWillShowEvent = undefined\n      this.keyboardWillHideEvent = undefined\n      this.position = { x: 0, y: 0 }\n      this.defaultResetScrollToCoords = null\n      const keyboardSpace: number = props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n        : 0\n      this.state = { keyboardSpace }\n    }\n\n    componentDidMount() {\n      this.mountedComponent = true\n      // Keyboard events\n      if (Platform.OS === 'ios') {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardWillShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardWillHide',\n          this._resetKeyboardSpace\n        )\n      } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardDidShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardDidHide',\n          this._resetKeyboardSpace\n        )\n      }\n    }\n\n    componentWillReceiveProps(nextProps: KeyboardAwareHOCProps) {\n      if (nextProps.viewIsInsideTabBar !== this.props.viewIsInsideTabBar) {\n        const keyboardSpace: number = nextProps.viewIsInsideTabBar\n          ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n          : 0\n        if (this.state.keyboardSpace !== keyboardSpace) {\n          this.setState({ keyboardSpace })\n        }\n      }\n    }\n\n    componentWillUnmount() {\n      this.mountedComponent = false\n      this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\n      this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\n    }\n\n    getScrollResponder = () => {\n      return (\n        this._rnkasv_keyboardView &&\n        this._rnkasv_keyboardView.getScrollResponder()\n      )\n    }\n\n    scrollToPosition = (x: number, y: number, animated: boolean = true) => {\n      const responder = this.getScrollResponder()\n      responder && responder.scrollResponderScrollTo({ x, y, animated })\n    }\n\n    scrollToEnd = (animated?: boolean = true) => {\n      const responder = this.getScrollResponder()\n      responder && responder.scrollResponderScrollToEnd({ animated })\n    }\n\n    scrollForExtraHeightOnAndroid = (extraHeight: number) => {\n      this.scrollToPosition(0, this.position.y + extraHeight, true)\n    }\n\n    /**\n     * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\n     * @param extraHeight: takes an extra height in consideration.\n     */\n    scrollToFocusedInput = (\n      reactNode: any,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight || 0\n      }\n      if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime || 0\n      }\n      setTimeout(() => {\n        if (!this.mountedComponent) {\n          return\n        }\n        const responder = this.getScrollResponder()\n        responder &&\n          responder.scrollResponderScrollNativeHandleToKeyboard(\n            reactNode,\n            extraHeight,\n            true\n          )\n      }, keyboardOpeningTime)\n    }\n\n    scrollIntoView = async (\n      element: React.Element<*>,\n      options: ScrollIntoViewOptions = {}\n    ) => {\n      if (!this._rnkasv_keyboardView || !element) {\n        return\n      }\n\n      const [\n        parentLayout,\n        childLayout\n      ] = await Promise.all([\n        this._measureElement(this._rnkasv_keyboardView),\n        this._measureElement(element)\n      ])\n\n      const getScrollPosition = options.getScrollPosition || this._defaultGetScrollPosition\n      const { x, y, animated } = getScrollPosition(parentLayout, childLayout, this.position)\n      this.scrollToPosition(x, y, animated)\n    }\n\n    _defaultGetScrollPosition = (\n      parentLayout: ElementLayout,\n      childLayout: ElementLayout,\n      contentOffset: ContentOffset\n    ): ScrollPosition => {\n      return {\n        x: 0,\n        y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n        animated: true,\n      }\n    }\n\n    _measureElement = (element: React.Element<*>): Promise<ElementLayout> => {\n      const node = findNodeHandle(element)\n      return new Promise((resolve: (ElementLayout) => void) => {\n        UIManager.measureInWindow(node, (x: number, y: number, width: number, height: number) => {\n          resolve({ x, y, width, height })\n        })\n      })\n    }\n\n    // Keyboard actions\n    _updateKeyboardSpace = (frames: Object) => {\n      // Automatically scroll to focused TextInput\n      if (this.props.enableAutomaticScroll) {\n        let keyboardSpace: number = frames.endCoordinates.height + this.props.extraScrollHeight\n        if (this.props.viewIsInsideTabBar) {\n          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\n        }\n        this.setState({ keyboardSpace })\n        const currentlyFocusedField = TextInput.State.currentlyFocusedField()\n        const responder = this.getScrollResponder()\n        if (!currentlyFocusedField || !responder) {\n          return\n        }\n        UIManager.viewIsDescendantOf(\n          currentlyFocusedField,\n          responder.getInnerViewNode(),\n          (isAncestor: boolean) => {\n            if (isAncestor) {\n              // Check if the TextInput will be hidden by the keyboard\n              UIManager.measureInWindow(\n                currentlyFocusedField,\n                (x: number, y: number, width: number, height: number) => {\n                  const textInputBottomPosition = y + height\n                  const keyboardPosition = frames.endCoordinates.screenY\n                  const totalExtraHeight =\n                    this.props.extraScrollHeight + this.props.extraHeight\n                  if (Platform.OS === 'ios') {\n                    if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this._scrollToFocusedInputWithNodeHandle(\n                        currentlyFocusedField\n                      )\n                    }\n                  } else {\n                    // On android, the system would scroll the text input just\n                    // above the keyboard so we just neet to scroll the extra\n                    // height part\n                    if (textInputBottomPosition > keyboardPosition) {\n                      // Since the system already scrolled the whole view up\n                      // we should reduce that amount\n                      keyboardSpace =\n                        keyboardSpace -\n                        (textInputBottomPosition - keyboardPosition)\n                      this.setState({ keyboardSpace })\n                      this.scrollForExtraHeightOnAndroid(totalExtraHeight)\n                    } else if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this.scrollForExtraHeightOnAndroid(\n                        totalExtraHeight -\n                          (keyboardPosition - textInputBottomPosition)\n                      )\n                    }\n                  }\n                }\n              )\n            }\n          }\n        )\n      }\n      if (!this.resetCoords) {\n        if (!this.defaultResetScrollToCoords) {\n          this.defaultResetScrollToCoords = this.position\n        }\n      }\n    }\n\n    _resetKeyboardSpace = () => {\n      const keyboardSpace: number = this.props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT + this.props.extraScrollHeight || 0\n        : this.props.extraScrollHeight || 0\n      this.setState({ keyboardSpace })\n      // Reset scroll position after keyboard dismissal\n      if (this.props.enableResetScrollToCoords === false) {\n        this.defaultResetScrollToCoords = null\n        return\n      } else if (this.resetCoords) {\n        this.scrollToPosition(this.resetCoords.x, this.resetCoords.y, true)\n      } else {\n        if (this.defaultResetScrollToCoords) {\n          this.scrollToPosition(\n            this.defaultResetScrollToCoords.x,\n            this.defaultResetScrollToCoords.y,\n            true\n          )\n          this.defaultResetScrollToCoords = null\n        } else {\n          this.scrollToPosition(0, 0, true)\n        }\n      }\n    }\n\n    _scrollToFocusedInputWithNodeHandle = (\n      nodeID: number,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight\n      }\n      const reactNode = ReactNative.findNodeHandle(nodeID)\n      this.scrollToFocusedInput(\n        reactNode,\n        extraHeight + this.props.extraScrollHeight,\n        keyboardOpeningTime !== undefined\n          ? keyboardOpeningTime\n          : this.props.keyboardOpeningTime || 0\n      )\n    }\n\n    _handleOnScroll = (\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\n    ) => {\n      this.position = e.nativeEvent.contentOffset\n    }\n\n    _handleRef = (ref: React.Component<*>) => {\n      this._rnkasv_keyboardView = ref\n      if (this.props.innerRef) {\n        this.props.innerRef(this._rnkasv_keyboardView)\n      }\n    }\n\n    _onScroll = (\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\n    ) => {\n      this._handleOnScroll(e)\n      this.props.onScroll && this.props.onScroll(e)\n    }\n\n    render() {\n      const { enableOnAndroid, contentContainerStyle } = this.props\n      let newContentContainerStyle\n      if (Platform.OS === 'android' && enableOnAndroid) {\n        newContentContainerStyle = [].concat(contentContainerStyle).concat({\n          paddingBottom:\n            ((contentContainerStyle || {}).paddingBottom || 0) +\n            this.state.keyboardSpace\n        })\n      }\n      return (\n        <ScrollableComponent\n          ref={this._handleRef}\n          keyboardDismissMode='interactive'\n          contentInset={{ bottom: this.state.keyboardSpace }}\n          automaticallyAdjustContentInsets={false}\n          showsVerticalScrollIndicator={true}\n          scrollEventThrottle={1}\n          {...this.props}\n          contentContainerStyle={\n            newContentContainerStyle || contentContainerStyle\n          }\n          keyboardSpace={this.state.keyboardSpace}\n          getScrollResponder={this.getScrollResponder}\n          scrollToPosition={this.scrollToPosition}\n          scrollToEnd={this.scrollToEnd}\n          scrollForExtraHeightOnAndroid={this.scrollForExtraHeightOnAndroid}\n          scrollToFocusedInput={this.scrollToFocusedInput}\n          resetKeyboardSpace={this._resetKeyboardSpace}\n          handleOnScroll={this._handleOnScroll}\n          onScroll={this._onScroll}\n        />\n      )\n    }\n  }\n}\n\nexport default listenToKeyboardEvents\n"]}