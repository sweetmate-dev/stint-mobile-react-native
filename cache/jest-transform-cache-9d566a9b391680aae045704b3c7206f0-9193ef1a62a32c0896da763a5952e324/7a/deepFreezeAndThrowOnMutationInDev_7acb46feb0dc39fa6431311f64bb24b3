4ee3b666ec6f4c0b16a8008fe0656375










'use strict';


















function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (
    typeof object !== 'object' ||
    object === null ||
    Object.isFrozen(object) ||
    Object.isSealed(object))
    {
      return object;
    }

    var keys = Object.keys(object);
    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (_hasOwnProperty.call(object, key)) {
        Object.defineProperty(object, key, {
          get: identity.bind(null, object[key]) });

        Object.defineProperty(object, key, {
          set: throwOnImmutableMutation.bind(null, key) });

      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (_hasOwnProperty.call(object, key)) {
        deepFreezeAndThrowOnMutationInDev(object[key]);
      }
    }
  }
  return object;
}

function throwOnImmutableMutation(key, value) {
  throw Error(
  'You attempted to set the key `' +
  key +
  '` with the value `' +
  JSON.stringify(value) +
  '` on an object that is meant to be immutable ' +
  'and has been frozen.');

}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldi5qcyJdLCJuYW1lcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJvYmplY3QiLCJfX0RFVl9fIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJpc1NlYWxlZCIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJrZXkiLCJjYWxsIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJpZGVudGl0eSIsImJpbmQiLCJzZXQiLCJ0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24iLCJmcmVlemUiLCJzZWFsIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsU0FBU0EsaUNBQVQsQ0FBc0RDLE1BQXRELEVBQW9FO0FBQ2xFLE1BQUlDLE9BQUosRUFBYTtBQUNYO0FBQ0UsV0FBT0QsTUFBUCxLQUFrQixRQUFsQjtBQUNBQSxlQUFXLElBRFg7QUFFQUUsV0FBT0MsUUFBUCxDQUFnQkgsTUFBaEIsQ0FGQTtBQUdBRSxXQUFPRSxRQUFQLENBQWdCSixNQUFoQixDQUpGO0FBS0U7QUFDQSxhQUFPQSxNQUFQO0FBQ0Q7O0FBRUQsUUFBTUssT0FBT0gsT0FBT0csSUFBUCxDQUFZTCxNQUFaLENBQWI7QUFDQSxRQUFNTSxrQkFBaUJKLE9BQU9LLFNBQVAsQ0FBaUJELGNBQXhDOztBQUVBLFNBQUssSUFBSUUsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxLQUFLSSxNQUF6QixFQUFpQ0QsR0FBakMsRUFBc0M7QUFDcEMsVUFBSUUsTUFBTUwsS0FBS0csQ0FBTCxDQUFWO0FBQ0EsVUFBSUYsZ0JBQWVLLElBQWYsQ0FBb0JYLE1BQXBCLEVBQTRCVSxHQUE1QixDQUFKLEVBQXNDO0FBQ3BDUixlQUFPVSxjQUFQLENBQXNCWixNQUF0QixFQUE4QlUsR0FBOUIsRUFBbUM7QUFDakNHLGVBQUtDLFNBQVNDLElBQVQsQ0FBYyxJQUFkLEVBQW9CZixPQUFPVSxHQUFQLENBQXBCLENBRDRCLEVBQW5DOztBQUdBUixlQUFPVSxjQUFQLENBQXNCWixNQUF0QixFQUE4QlUsR0FBOUIsRUFBbUM7QUFDakNNLGVBQUtDLHlCQUF5QkYsSUFBekIsQ0FBOEIsSUFBOUIsRUFBb0NMLEdBQXBDLENBRDRCLEVBQW5DOztBQUdEO0FBQ0Y7O0FBRURSLFdBQU9nQixNQUFQLENBQWNsQixNQUFkO0FBQ0FFLFdBQU9pQixJQUFQLENBQVluQixNQUFaOztBQUVBLFNBQUssSUFBSVEsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxLQUFLSSxNQUF6QixFQUFpQ0QsR0FBakMsRUFBc0M7QUFDcEMsVUFBSUUsTUFBTUwsS0FBS0csQ0FBTCxDQUFWO0FBQ0EsVUFBSUYsZ0JBQWVLLElBQWYsQ0FBb0JYLE1BQXBCLEVBQTRCVSxHQUE1QixDQUFKLEVBQXNDO0FBQ3BDWCwwQ0FBa0NDLE9BQU9VLEdBQVAsQ0FBbEM7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxTQUFPVixNQUFQO0FBQ0Q7O0FBRUQsU0FBU2lCLHdCQUFULENBQWtDUCxHQUFsQyxFQUF1Q1UsS0FBdkMsRUFBOEM7QUFDNUMsUUFBTUM7QUFDSjtBQUNFWCxLQURGO0FBRUUsc0JBRkY7QUFHRVksT0FBS0MsU0FBTCxDQUFlSCxLQUFmLENBSEY7QUFJRSxpREFKRjtBQUtFLHdCQU5FLENBQU47O0FBUUQ7O0FBRUQsU0FBU04sUUFBVCxDQUFrQk0sS0FBbEIsRUFBeUI7QUFDdkIsU0FBT0EsS0FBUDtBQUNEOztBQUVESSxPQUFPQyxPQUFQLEdBQWlCMUIsaUNBQWpCIiwiZmlsZSI6ImRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSWYgeW91ciBhcHBsaWNhdGlvbiBpcyBhY2NlcHRpbmcgZGlmZmVyZW50IHZhbHVlcyBmb3IgdGhlIHNhbWUgZmllbGQgb3ZlclxuICogdGltZSBhbmQgaXMgZG9pbmcgYSBkaWZmIG9uIHRoZW0sIHlvdSBjYW4gZWl0aGVyICgxKSBjcmVhdGUgYSBjb3B5IG9yXG4gKiAoMikgZW5zdXJlIHRoYXQgdGhvc2UgdmFsdWVzIGFyZSBub3QgbXV0YXRlZCBiZWhpbmQgdHdvIHBhc3Nlcy5cbiAqIFRoaXMgZnVuY3Rpb24gaGVscHMgeW91IHdpdGggKDIpIGJ5IGZyZWV6aW5nIHRoZSBvYmplY3QgYW5kIHRocm93aW5nIGlmXG4gKiB0aGUgdXNlciBzdWJzZXF1ZW50bHkgbW9kaWZpZXMgdGhlIHZhbHVlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gY2F2ZWF0cyB3aXRoIHRoaXMgZnVuY3Rpb246XG4gKiAgIC0gSWYgdGhlIGNhbGwgc2l0ZSBpcyBub3QgaW4gc3RyaWN0IG1vZGUsIGl0IHdpbGwgb25seSB0aHJvdyB3aGVuXG4gKiAgICAgbXV0YXRpbmcgZXhpc3RpbmcgZmllbGRzLCBhZGRpbmcgYSBuZXcgb25lXG4gKiAgICAgd2lsbCB1bmZvcnR1bmF0ZWx5IGZhaWwgc2lsZW50bHkgOihcbiAqICAgLSBJZiB0aGUgb2JqZWN0IGlzIGFscmVhZHkgZnJvemVuIG9yIHNlYWxlZCwgaXQgd2lsbCBub3QgY29udGludWUgdGhlXG4gKiAgICAgZGVlcCB0cmF2ZXJzYWwgYW5kIHdpbGwgbGVhdmUgbGVhZiBub2RlcyB1bmZyb3plbi5cbiAqXG4gKiBGcmVlemluZyB0aGUgb2JqZWN0IGFuZCBhZGRpbmcgdGhlIHRocm93IG1lY2hhbmlzbSBpcyBleHBlbnNpdmUgYW5kIHdpbGxcbiAqIG9ubHkgYmUgdXNlZCBpbiBERVYuXG4gKi9cbmZ1bmN0aW9uIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjxUOiBPYmplY3Q+KG9iamVjdDogVCk6IFQge1xuICBpZiAoX19ERVZfXykge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnIHx8XG4gICAgICBvYmplY3QgPT09IG51bGwgfHxcbiAgICAgIE9iamVjdC5pc0Zyb3plbihvYmplY3QpIHx8XG4gICAgICBPYmplY3QuaXNTZWFsZWQob2JqZWN0KVxuICAgICkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICBjb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgIGdldDogaWRlbnRpdHkuYmluZChudWxsLCBvYmplY3Rba2V5XSksXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICBzZXQ6IHRocm93T25JbW11dGFibGVNdXRhdGlvbi5iaW5kKG51bGwsIGtleSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbiAgICBPYmplY3Quc2VhbChvYmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYob2JqZWN0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiB0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24oa2V5LCB2YWx1ZSkge1xuICB0aHJvdyBFcnJvcihcbiAgICAnWW91IGF0dGVtcHRlZCB0byBzZXQgdGhlIGtleSBgJyArXG4gICAgICBrZXkgK1xuICAgICAgJ2Agd2l0aCB0aGUgdmFsdWUgYCcgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsdWUpICtcbiAgICAgICdgIG9uIGFuIG9iamVjdCB0aGF0IGlzIG1lYW50IHRvIGJlIGltbXV0YWJsZSAnICtcbiAgICAgICdhbmQgaGFzIGJlZW4gZnJvemVuLicsXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXY7XG4iXX0=