{"version":3,"sources":["Grid.js"],"names":["GridNB","type","flex","flexDirection","ifRow","defaultProps","style","props","row","React","Children","forEach","children","child","Row","nativeProps","_root","setNativeProps","onPress","component","prepareRootProps","Component"],"mappings":"AAAA,a;;AAEA,8B;AACA;AACA,qD;AACA,4B;AACA,4B;;;AAGqBA,M;AACE;;AAEf,UAAIC,OAAO;AACPC,cAAM,CADC;AAEPC,uBAAe,KAAKC,KAAL,KAAe,QAAf,GAA0B,KAFlC,EAAX;;;AAKA,UAAIC,eAAe;AACfC,eAAOL,IADQ,EAAnB;;;AAIA,aAAO,4BAAa,KAAKM,KAAlB,EAAyBF,YAAzB,CAAP;;AAEH,K;;AAEO;AACJ,UAAIG,MAAM,KAAV;AACAC,sBAAMC,QAAN,CAAeC,OAAf,CAAuB,KAAKJ,KAAL,CAAWK,QAAlC,EAA4C,UAAUC,KAAV,EAAiB;AACzD,YAAGA,SAASA,MAAMZ,IAAN,IAAca,aAA1B;AACIN,cAAM,IAAN;AACP,OAHD;AAIA,aAAOA,GAAP;AACH,K;;AAEcO,e,EAAa;AAC1B,WAAKC,KAAL,CAAWC,cAAX,CAA0BF,WAA1B;AACD,K;;AAEM;AACP,UAAG,KAAKR,KAAL,CAAWW,OAAd,EAAsB;AACpB;AACE,wCAAC,6BAAD,IAAkB,SAAS,KAAKX,KAAL,CAAWW,OAAtC;AACJ,0CAAC,iBAAD;AACE,qBAAK,gCAAa,OAAKF,KAAL,GAAaG,SAA1B,EADP;AAEM,mBAAKZ,KAFX;AAGM,mBAAKa,gBAAL,EAHN;AAIE,mBAAKb,KAAL,CAAWK,QAJb,CADI,CADF;;;AASD,OAVD;AAWI;AACF;AACE,wCAAC,iBAAD;AACF,mBAAK,gCAAa,OAAKI,KAAL,GAAaG,SAA1B,EADH;AAEE,iBAAKZ,KAFP;AAGE,iBAAKa,gBAAL,EAHF;AAIF,iBAAKb,KAAL,CAAWK,QAJT,CADF;;AAOD;AACF,K,qBAlDiCS,gB,oBAAfrB,M","file":"Grid.js","sourcesContent":["'use strict';\n\nimport React, {Component} from 'react';\nimport {View, TouchableOpacity} from 'react-native';\nimport computeProps from '../Utils/computeProps';\nimport Col from './Col';\nimport Row from './Row';\n\n\nexport default class GridNB extends Component {\n    prepareRootProps() {\n\n        var type = {\n            flex: 1,\n            flexDirection: this.ifRow() ? 'column' : 'row'\n        }\n\n        var defaultProps = {\n            style: type\n        }\n\n        return computeProps(this.props, defaultProps);\n\n    }\n\n    ifRow() {\n        var row = false;\n        React.Children.forEach(this.props.children, function (child) {\n            if(child && child.type == Row)\n                row = true;\n        })\n        return row;\n    }\n\n    setNativeProps(nativeProps) {\n      this._root.setNativeProps(nativeProps);\n    }\n\n  render() {\n    if(this.props.onPress){\n      return(\n        <TouchableOpacity onPress={this.props.onPress}>\n    <View\n      ref={component => this._root = component}\n      {...this.props}\n      {...this.prepareRootProps()}\n    >{this.props.children}</View>\n      </TouchableOpacity>\n    );\n    }\n    else{\n      return(\n        <View\n      ref={component => this._root = component}\n      {...this.props}\n      {...this.prepareRootProps()}\n    >{this.props.children}</View>\n    );\n    }\n  }\n\n}\n"]}