{"version":3,"sources":["ScrollResponder.js"],"names":["Dimensions","require","FrameRateLogger","Keyboard","ReactNative","Subscribable","TextInputState","UIManager","invariant","nullthrows","performanceNow","warning","ScrollViewManager","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollResponderMixin","mixins","Mixin","scrollResponderMixinGetInitialState","isTouching","lastMomentumScrollBeginTime","lastMomentumScrollEndTime","observedScrollSinceBecomingResponder","becameResponderWhileAnimating","scrollResponderHandleScrollShouldSetResponder","state","scrollResponderHandleStartShouldSetResponder","e","currentlyFocusedTextInput","currentlyFocusedField","props","keyboardShouldPersistTaps","target","scrollResponderHandleStartShouldSetResponderCapture","scrollResponderIsAnimating","keyboardNeverPersistTaps","isTextInput","scrollResponderHandleResponderReject","scrollResponderHandleTerminationRequest","scrollResponderHandleTouchEnd","nativeEvent","touches","length","onTouchEnd","scrollResponderHandleTouchCancel","onTouchCancel","scrollResponderHandleResponderRelease","onResponderRelease","onScrollResponderKeyboardDismissed","blurTextInput","scrollResponderHandleScroll","onScroll","scrollResponderHandleResponderGrant","onResponderGrant","scrollResponderHandleScrollBeginDrag","beginScroll","onScrollBeginDrag","scrollResponderHandleScrollEndDrag","velocity","x","y","endScroll","onScrollEndDrag","scrollResponderHandleMomentumScrollBegin","onMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onMomentumScrollEnd","scrollResponderHandleTouchStart","onTouchStart","scrollResponderHandleTouchMove","onTouchMove","now","timeSinceLastMomentumScrollEnd","isAnimating","scrollResponderGetScrollableNode","getScrollableNode","findNodeHandle","scrollResponderScrollTo","animated","console","warn","dispatchViewManagerCommand","RCTScrollView","Commands","scrollTo","scrollResponderScrollToEnd","options","scrollToEnd","scrollResponderScrollWithoutAnimationTo","offsetX","offsetY","scrollResponderZoomTo","rect","zoomToRect","scrollResponderFlashScrollIndicators","flashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","additionalScrollOffset","measureLayout","getInnerViewNode","scrollResponderTextInputFocusError","scrollResponderInputMeasureAndScrollToKeyboard","left","top","width","height","keyboardScreenY","get","keyboardWillOpenTo","endCoordinates","screenY","scrollOffsetY","Math","max","error","UNSAFE_componentWillMount","addListenerOn","scrollResponderKeyboardWillShow","scrollResponderKeyboardWillHide","scrollResponderKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ScrollResponder","module","exports"],"mappings":"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","file":"ScrollResponder.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Dimensions = require('Dimensions');\nconst FrameRateLogger = require('FrameRateLogger');\nconst Keyboard = require('Keyboard');\nconst ReactNative = require('ReactNative');\nconst Subscribable = require('Subscribable');\nconst TextInputState = require('TextInputState');\nconst UIManager = require('UIManager');\n\nconst invariant = require('fbjs/lib/invariant');\nconst nullthrows = require('fbjs/lib/nullthrows');\nconst performanceNow = require('fbjs/lib/performanceNow');\nconst warning = require('fbjs/lib/warning');\n\nconst {ScrollViewManager} = require('NativeModules');\n\n/**\n * Mixin that can be integrated in order to handle scrolling that plays well\n * with `ResponderEventPlugin`. Integrate with your platform specific scroll\n * views, or even your custom built (every-frame animating) scroll views so that\n * all of these systems play well with the `ResponderEventPlugin`.\n *\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollResponder` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. The `ScrollResponder` is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\n\ntype State = {\n  isTouching: boolean,\n  lastMomentumScrollBeginTime: number,\n  lastMomentumScrollEndTime: number,\n  observedScrollSinceBecomingResponder: boolean,\n  becameResponderWhileAnimating: boolean,\n};\ntype Event = Object;\n\nconst ScrollResponderMixin = {\n  mixins: [Subscribable.Mixin],\n  scrollResponderMixinGetInitialState: function(): State {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n\n      // Reset to false every time becomes responder. This is used to:\n      // - Determine if the scroll view has been scrolled and therefore should\n      // refuse to give up its responder lock.\n      // - Determine if releasing should dismiss the keyboard when we are in\n      // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false,\n    };\n  },\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  scrollResponderHandleScrollShouldSetResponder: function(): boolean {\n    return this.state.isTouching;\n  },\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  scrollResponderHandleStartShouldSetResponder: function(e: Event): boolean {\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n\n    if (\n      this.props.keyboardShouldPersistTaps === 'handled' &&\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not a text input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  scrollResponderHandleStartShouldSetResponderCapture: function(\n    e: Event,\n  ): boolean {\n    // The scroll view should receive taps instead of its descendants if:\n    // * it is already animating/decelerating\n    if (this.scrollResponderIsAnimating()) {\n      return true;\n    }\n\n    // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),\n    // and a new touch starts with a non-textinput target (in which case the\n    // first tap should be sent to the scroll view and dismiss the keyboard,\n    // then the second tap goes to the actual interior view)\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n    if (\n      keyboardNeverPersistTaps &&\n      currentlyFocusedTextInput != null &&\n      !TextInputState.isTextInput(e.target)\n    ) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  scrollResponderHandleResponderReject: function() {},\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  scrollResponderHandleTerminationRequest: function(): boolean {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {SyntheticEvent} e Event.\n   */\n  scrollResponderHandleTouchEnd: function(e: Event) {\n    const nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchCancel` event.\n   *\n   * @param {SyntheticEvent} e Event.\n   */\n  scrollResponderHandleTouchCancel: function(e: Event) {\n    this.state.isTouching = false;\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  scrollResponderHandleResponderRelease: function(e: Event) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    if (\n      this.props.keyboardShouldPersistTaps !== true &&\n      this.props.keyboardShouldPersistTaps !== 'always' &&\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput &&\n      !this.state.observedScrollSinceBecomingResponder &&\n      !this.state.becameResponderWhileAnimating\n    ) {\n      this.props.onScrollResponderKeyboardDismissed &&\n        this.props.onScrollResponderKeyboardDismissed(e);\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n\n  scrollResponderHandleScroll: function(e: Event) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  scrollResponderHandleResponderGrant: function(e: Event) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  scrollResponderHandleScrollBeginDrag: function(e: Event) {\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  scrollResponderHandleScrollEndDrag: function(e: Event) {\n    const {velocity} = e.nativeEvent;\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\n    //   will fire.\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\n    //   another drag starts and ends.\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\n    if (\n      !this.scrollResponderIsAnimating() &&\n      (!velocity || (velocity.x === 0 && velocity.y === 0))\n    ) {\n      FrameRateLogger.endScroll();\n    }\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  scrollResponderHandleMomentumScrollBegin: function(e: Event) {\n    this.state.lastMomentumScrollBeginTime = performanceNow();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  scrollResponderHandleMomentumScrollEnd: function(e: Event) {\n    FrameRateLogger.endScroll();\n    this.state.lastMomentumScrollEndTime = performanceNow();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchStart: function(e: Event) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchMove: function(e: Event) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  scrollResponderIsAnimating: function(): boolean {\n    const now = performanceNow();\n    const timeSinceLastMomentumScrollEnd =\n      now - this.state.lastMomentumScrollEndTime;\n    const isAnimating =\n      timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\n      this.state.lastMomentumScrollEndTime <\n        this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n\n  /**\n   * Returns the node that represents native view that can be scrolled.\n   * Components can pass what node to use by defining a `getScrollableNode`\n   * function otherwise `this` is used.\n   */\n  scrollResponderGetScrollableNode: function(): any {\n    return this.getScrollableNode\n      ? this.getScrollableNode()\n      : ReactNative.findNodeHandle(this);\n  },\n\n  /**\n   * A helper function to scroll to a specific point in the ScrollView.\n   * This is currently used to help focus child TextViews, but can also\n   * be used to quickly scroll to any element we want to focus. Syntax:\n   *\n   * `scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})`\n   *\n   * Note: The weird argument signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as as alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollResponderScrollTo: function(\n    x?: number | {x?: number, y?: number, animated?: boolean},\n    y?: number,\n    animated?: boolean,\n  ) {\n    if (typeof x === 'number') {\n      console.warn(\n        '`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.',\n      );\n    } else {\n      ({x, y, animated} = x || {});\n    }\n    UIManager.dispatchViewManagerCommand(\n      nullthrows(this.scrollResponderGetScrollableNode()),\n      UIManager.RCTScrollView.Commands.scrollTo,\n      [x || 0, y || 0, animated !== false],\n    );\n  },\n\n  /**\n   * Scrolls to the end of the ScrollView, either immediately or with a smooth\n   * animation.\n   *\n   * Example:\n   *\n   * `scrollResponderScrollToEnd({animated: true})`\n   */\n  scrollResponderScrollToEnd: function(options?: {animated?: boolean}) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    UIManager.dispatchViewManagerCommand(\n      this.scrollResponderGetScrollableNode(),\n      UIManager.RCTScrollView.Commands.scrollToEnd,\n      [animated],\n    );\n  },\n\n  /**\n   * Deprecated, do not use.\n   */\n  scrollResponderScrollWithoutAnimationTo: function(\n    offsetX: number,\n    offsetY: number,\n  ) {\n    console.warn(\n      '`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead',\n    );\n    this.scrollResponderScrollTo({x: offsetX, y: offsetY, animated: false});\n  },\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: function(\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) {\n    invariant(\n      ScrollViewManager && ScrollViewManager.zoomToRect,\n      'zoomToRect is not implemented',\n    );\n    if ('animated' in rect) {\n      animated = rect.animated;\n      delete rect.animated;\n    } else if (typeof animated !== 'undefined') {\n      console.warn(\n        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',\n      );\n    }\n    ScrollViewManager.zoomToRect(\n      this.scrollResponderGetScrollableNode(),\n      rect,\n      animated !== false,\n    );\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  scrollResponderFlashScrollIndicators: function() {\n    UIManager.dispatchViewManagerCommand(\n      this.scrollResponderGetScrollableNode(),\n      UIManager.RCTScrollView.Commands.flashScrollIndicators,\n      [],\n    );\n  },\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {any} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: function(\n    nodeHandle: any,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n    UIManager.measureLayout(\n      nodeHandle,\n      ReactNative.findNodeHandle(this.getInnerViewNode()),\n      this.scrollResponderTextInputFocusError,\n      this.scrollResponderInputMeasureAndScrollToKeyboard,\n    );\n  },\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  scrollResponderInputMeasureAndScrollToKeyboard: function(\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n  ) {\n    let keyboardScreenY = Dimensions.get('window').height;\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n    let scrollOffsetY =\n      top - keyboardScreenY + height + this.additionalScrollOffset;\n\n    // By default, this can scroll with negative offset, pulling the content\n    // down so that the target component's bottom meets the keyboard's top.\n    // If requested otherwise, cap the offset at 0 minimum to avoid content\n    // shifting down.\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n    this.scrollResponderScrollTo({x: 0, y: scrollOffsetY, animated: true});\n\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n\n  scrollResponderTextInputFocusError: function(e: Event) {\n    console.error('Error measuring text field: ', e);\n  },\n\n  /**\n   * `componentWillMount` is the closest thing to a  standard \"constructor\" for\n   * React components.\n   *\n   * The `keyboardWillShow` is called before input focus.\n   */\n  UNSAFE_componentWillMount: function() {\n    const {keyboardShouldPersistTaps} = this.props;\n    warning(\n      typeof keyboardShouldPersistTaps !== 'boolean',\n      `'keyboardShouldPersistTaps={${keyboardShouldPersistTaps}}' is deprecated. ` +\n        `Use 'keyboardShouldPersistTaps=\"${\n          keyboardShouldPersistTaps ? 'always' : 'never'\n        }\"' instead`,\n    );\n\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0;\n    this.addListenerOn(\n      Keyboard,\n      'keyboardWillShow',\n      this.scrollResponderKeyboardWillShow,\n    );\n    this.addListenerOn(\n      Keyboard,\n      'keyboardWillHide',\n      this.scrollResponderKeyboardWillHide,\n    );\n    this.addListenerOn(\n      Keyboard,\n      'keyboardDidShow',\n      this.scrollResponderKeyboardDidShow,\n    );\n    this.addListenerOn(\n      Keyboard,\n      'keyboardDidHide',\n      this.scrollResponderKeyboardDidHide,\n    );\n  },\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` module callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n  scrollResponderKeyboardWillShow: function(e: Event) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n\n  scrollResponderKeyboardWillHide: function(e: Event) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n\n  scrollResponderKeyboardDidShow: function(e: Event) {\n    // TODO(7693961): The event for DidShow is not available on iOS yet.\n    // Use the one from WillShow and do not assign.\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n\n  scrollResponderKeyboardDidHide: function(e: Event) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  },\n};\n\nconst ScrollResponder = {\n  Mixin: ScrollResponderMixin,\n};\n\nmodule.exports = ScrollResponder;\n"]}