{"version":3,"sources":["InteractionManager.js"],"names":["BatchedBridge","require","EventEmitter","Set","TaskQueue","infoLog","invariant","keyMirror","_emitter","DEBUG_DELAY","DEBUG","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","tasks","promise","Promise","_scheduleUpdate","push","run","resolve","name","_taskQueue","enqueueTasks","then","bind","done","console","warn","cancel","cancelTasks","createInteractionHandle","handle","_inc","_addInteractionSet","add","clearInteractionHandle","delete","_deleteInteractionSet","addListener","setDeadline","deadline","_deadline","_interactionSet","onMoreTasks","_nextUpdateHandle","setTimeout","_processUpdate","setImmediate","interactionCount","size","forEach","nextInteractionCount","emit","hasTasksToProcess","processNext","getEventLoopRunningTime","clear","module","exports"],"mappings":"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","file":"InteractionManager.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\nconst EventEmitter = require('EventEmitter');\nconst Set = require('Set');\nconst TaskQueue = require('TaskQueue');\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst keyMirror = require('fbjs/lib/keyMirror');\n\ntype Handle = number;\nimport type {Task} from 'TaskQueue';\n\nconst _emitter = new EventEmitter();\n\nconst DEBUG_DELAY = 0;\nconst DEBUG = false;\n\n/**\n * InteractionManager allows long-running work to be scheduled after any\n * interactions/animations have completed. In particular, this allows JavaScript\n * animations to run smoothly.\n *\n * Applications can schedule tasks to run after interactions with the following:\n *\n * ```\n * InteractionManager.runAfterInteractions(() => {\n *   // ...long-running synchronous task...\n * });\n * ```\n *\n * Compare this to other scheduling alternatives:\n *\n * - requestAnimationFrame(): for code that animates a view over time.\n * - setImmediate/setTimeout(): run code later, note this may delay animations.\n * - runAfterInteractions(): run code later, without delaying active animations.\n *\n * The touch handling system considers one or more active touches to be an\n * 'interaction' and will delay `runAfterInteractions()` callbacks until all\n * touches have ended or been cancelled.\n *\n * InteractionManager also allows applications to register animations by\n * creating an interaction 'handle' on animation start, and clearing it upon\n * completion:\n *\n * ```\n * var handle = InteractionManager.createInteractionHandle();\n * // run animation... (`runAfterInteractions` tasks are queued)\n * // later, on animation completion:\n * InteractionManager.clearInteractionHandle(handle);\n * // queued tasks run if all handles were cleared\n * ```\n *\n * `runAfterInteractions` takes either a plain callback function, or a\n * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a\n * `PromiseTask` is supplied, then it is fully resolved (including asynchronous\n * dependencies that also schedule more tasks via `runAfterInteractions`) before\n * starting on the next task that might have been queued up synchronously\n * earlier.\n *\n * By default, queued tasks are executed together in a loop in one\n * `setImmediate` batch. If `setDeadline` is called with a positive number, then\n * tasks will only be executed until the deadline (in terms of js event loop run\n * time) approaches, at which point execution will yield via setTimeout,\n * allowing events such as touches to start interactions and block queued tasks\n * from executing, making apps more responsive.\n */\nconst InteractionManager = {\n  Events: keyMirror({\n    interactionStart: true,\n    interactionComplete: true,\n  }),\n\n  /**\n   * Schedule a function to run after all interactions have completed. Returns a cancellable\n   * \"promise\".\n   */\n  runAfterInteractions(\n    task: ?Task,\n  ): {then: Function, done: Function, cancel: Function} {\n    const tasks = [];\n    const promise = new Promise(resolve => {\n      _scheduleUpdate();\n      if (task) {\n        tasks.push(task);\n      }\n      tasks.push({\n        run: resolve,\n        name: 'resolve ' + ((task && task.name) || '?'),\n      });\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: (...args) => {\n        if (promise.done) {\n          return promise.done(...args);\n        } else {\n          console.warn(\n            'Tried to call done when not supported by current Promise implementation.',\n          );\n        }\n      },\n      cancel: function() {\n        _taskQueue.cancelTasks(tasks);\n      },\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle(): Handle {\n    DEBUG && infoLog('create interaction handle');\n    _scheduleUpdate();\n    const handle = ++_inc;\n    _addInteractionSet.add(handle);\n    return handle;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle: Handle) {\n    DEBUG && infoLog('clear interaction handle');\n    invariant(!!handle, 'Must provide a handle to clear.');\n    _scheduleUpdate();\n    _addInteractionSet.delete(handle);\n    _deleteInteractionSet.add(handle);\n  },\n\n  addListener: _emitter.addListener.bind(_emitter),\n\n  /**\n   * A positive number will use setTimeout to schedule any tasks after the\n   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be\n   * executed in one setImmediate batch (default).\n   */\n  setDeadline(deadline: number) {\n    _deadline = deadline;\n  },\n};\n\nconst _interactionSet = new Set();\nconst _addInteractionSet = new Set();\nconst _deleteInteractionSet = new Set();\nconst _taskQueue = new TaskQueue({onMoreTasks: _scheduleUpdate});\nlet _nextUpdateHandle = 0;\nlet _inc = 0;\nlet _deadline = -1;\n\ndeclare function setImmediate(callback: any, ...args: Array<any>): number;\n\n/**\n * Schedule an asynchronous update to the interaction state.\n */\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);\n    } else {\n      _nextUpdateHandle = setImmediate(_processUpdate);\n    }\n  }\n}\n\n/**\n * Notify listeners, process queue, etc\n */\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n\n  const interactionCount = _interactionSet.size;\n  _addInteractionSet.forEach(handle => _interactionSet.add(handle));\n  _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));\n  const nextInteractionCount = _interactionSet.size;\n\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    // transition from 1+ --> 0 interactions\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    // transition from 0 --> 1+ interactions\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n\n  // process the queue regardless of a transition\n  if (nextInteractionCount === 0) {\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n      if (\n        _deadline > 0 &&\n        BatchedBridge.getEventLoopRunningTime() >= _deadline\n      ) {\n        // Hit deadline before processing all tasks, so process more later.\n        _scheduleUpdate();\n        break;\n      }\n    }\n  }\n  _addInteractionSet.clear();\n  _deleteInteractionSet.clear();\n}\n\nmodule.exports = InteractionManager;\n"]}