{"version":3,"sources":["AssetSourceResolver.js"],"names":["PixelRatio","require","Platform","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","assetDir","getBasePath","name","type","getAssetPathInDrawableFolder","drawbleFolder","getAndroidResourceFolderName","fileName","getAndroidResourceIdentifier","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"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","file":"AssetSourceResolver.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from 'AssetRegistry';\n\nconst PixelRatio = require('PixelRatio');\nconst Platform = require('Platform');\n\nconst assetPathUtils = require('../../local-cli/bundle/assetPathUtils');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const drawbleFolder = assetPathUtils.getAndroidResourceFolderName(\n    asset,\n    scale,\n  );\n  const fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(\n      assetPathUtils.getAndroidResourceIdentifier(this.asset),\n    );\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: Array<number>, deviceScale: number): number {\n    // Packager guarantees that `scales` array is sorted\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    // If nothing matches, device scale is larger than any available\n    // scales, so we return the biggest one. Unless the array is empty,\n    // in which case we default to 1\n    return scales[scales.length - 1] || 1;\n  }\n}\n\nmodule.exports = AssetSourceResolver;\n"]}