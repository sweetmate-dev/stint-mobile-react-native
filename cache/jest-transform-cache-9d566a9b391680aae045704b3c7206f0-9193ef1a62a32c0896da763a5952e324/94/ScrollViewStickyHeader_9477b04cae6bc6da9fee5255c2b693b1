4fbb1b218f097427701d81467f065fec









'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var AnimatedImplementation = require('AnimatedImplementation');
var React = require('React');
var StyleSheet = require('StyleSheet');
var View = require('View');



var AnimatedView = AnimatedImplementation.createAnimatedComponent(View);var




















ScrollViewStickyHeader = function (_React$Component) {_inherits(ScrollViewStickyHeader, _React$Component);function ScrollViewStickyHeader() {var _ref;var _temp, _this, _ret;_classCallCheck(this, ScrollViewStickyHeader);for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call.apply(_ref, [this].concat(args))), _this), _this.
    state = {
      measured: false,
      layoutY: 0,
      layoutHeight: 0,
      nextHeaderLayoutY: _this.props.nextHeaderLayoutY }, _this.






    _onLayout = function (event) {
      _this.setState({
        measured: true,
        layoutY: event.nativeEvent.layout.y,
        layoutHeight: event.nativeEvent.layout.height });


      _this.props.onLayout(event);
      var child = React.Children.only(_this.props.children);
      if (child.props.onLayout) {
        child.props.onLayout(event);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);}_createClass(ScrollViewStickyHeader, [{ key: 'setNextHeaderY', value: function setNextHeaderY(y) {this.setState({ nextHeaderLayoutY: y });} }, { key: 'render', value: function render()

    {var _props =
      this.props,inverted = _props.inverted,scrollViewHeight = _props.scrollViewHeight;var _state =
      this.state,measured = _state.measured,layoutHeight = _state.layoutHeight,layoutY = _state.layoutY,nextHeaderLayoutY = _state.nextHeaderLayoutY;
      var inputRange = [-1, 0];
      var outputRange = [0, 0];

      if (measured) {
        if (inverted) {














          if (scrollViewHeight != null) {
            var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
            if (stickStartPoint > 0) {
              inputRange.push(stickStartPoint);
              outputRange.push(0);
              inputRange.push(stickStartPoint + 1);
              outputRange.push(1);


              var collisionPoint =
              (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
              if (collisionPoint > stickStartPoint) {
                inputRange.push(collisionPoint, collisionPoint + 1);
                outputRange.push(
                collisionPoint - stickStartPoint,
                collisionPoint - stickStartPoint);

              }
            }
          }
        } else {










          inputRange.push(layoutY);
          outputRange.push(0);


          var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
          if (_collisionPoint >= layoutY) {
            inputRange.push(_collisionPoint, _collisionPoint + 1);
            outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
          } else {
            inputRange.push(layoutY + 1);
            outputRange.push(1);
          }
        }
      }

      var translateY = this.props.scrollAnimatedValue.interpolate({
        inputRange: inputRange,
        outputRange: outputRange });

      var child = React.Children.only(this.props.children);

      return (
        React.createElement(AnimatedView, {
            collapsable: false,
            onLayout: this._onLayout,
            style: [child.props.style, styles.header, { transform: [{ translateY: translateY }] }] },
          React.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined })));



    } }]);return ScrollViewStickyHeader;}(React.Component);


var styles = StyleSheet.create({
  header: {
    zIndex: 10 },

  fill: {
    flex: 1 } });



module.exports = ScrollViewStickyHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,