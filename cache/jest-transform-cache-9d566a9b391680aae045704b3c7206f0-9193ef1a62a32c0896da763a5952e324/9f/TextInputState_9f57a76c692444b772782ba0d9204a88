9069c801f8cdb5d2a0b763e76c8bf2ff















'use strict';

var Platform = require('Platform');
var UIManager = require('UIManager');

var currentlyFocusedID = null;
var inputs = new Set();





function currentlyFocusedField() {
  return currentlyFocusedID;
}






function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
    currentlyFocusedID = textFieldID;
    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(
      textFieldID,
      UIManager.AndroidTextInput.Commands.focusTextInput,
      null);

    }
  }
}






function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID !== null) {
    currentlyFocusedID = null;
    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(
      textFieldID,
      UIManager.AndroidTextInput.Commands.blurTextInput,
      null);

    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzVGV4dElucHV0IiwidGV4dEZpZWxkSUQiLCJPUyIsImZvY3VzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJBbmRyb2lkVGV4dElucHV0IiwiQ29tbWFuZHMiLCJibHVyVGV4dElucHV0IiwiYmx1ciIsInJlZ2lzdGVySW5wdXQiLCJhZGQiLCJ1bnJlZ2lzdGVySW5wdXQiLCJkZWxldGUiLCJpc1RleHRJbnB1dCIsImhhcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWVBOztBQUVBLElBQU1BLFdBQVdDLFFBQVEsVUFBUixDQUFqQjtBQUNBLElBQU1DLFlBQVlELFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFJRSxxQkFBOEIsSUFBbEM7QUFDQSxJQUFNQyxTQUFTLElBQUlDLEdBQUosRUFBZjs7Ozs7O0FBTUEsU0FBU0MscUJBQVQsR0FBMEM7QUFDeEMsU0FBT0gsa0JBQVA7QUFDRDs7Ozs7OztBQU9ELFNBQVNJLGNBQVQsQ0FBd0JDLFdBQXhCLEVBQThDO0FBQzVDLE1BQUlMLHVCQUF1QkssV0FBdkIsSUFBc0NBLGdCQUFnQixJQUExRCxFQUFnRTtBQUM5REwseUJBQXFCSyxXQUFyQjtBQUNBLFFBQUlSLFNBQVNTLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7QUFDekJQLGdCQUFVUSxLQUFWLENBQWdCRixXQUFoQjtBQUNELEtBRkQsTUFFTyxJQUFJUixTQUFTUyxFQUFULEtBQWdCLFNBQXBCLEVBQStCO0FBQ3BDUCxnQkFBVVMsMEJBQVY7QUFDRUgsaUJBREY7QUFFRU4sZ0JBQVVVLGdCQUFWLENBQTJCQyxRQUEzQixDQUFvQ04sY0FGdEM7QUFHRSxVQUhGOztBQUtEO0FBQ0Y7QUFDRjs7Ozs7OztBQU9ELFNBQVNPLGFBQVQsQ0FBdUJOLFdBQXZCLEVBQTZDO0FBQzNDLE1BQUlMLHVCQUF1QkssV0FBdkIsSUFBc0NBLGdCQUFnQixJQUExRCxFQUFnRTtBQUM5REwseUJBQXFCLElBQXJCO0FBQ0EsUUFBSUgsU0FBU1MsRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlAsZ0JBQVVhLElBQVYsQ0FBZVAsV0FBZjtBQUNELEtBRkQsTUFFTyxJQUFJUixTQUFTUyxFQUFULEtBQWdCLFNBQXBCLEVBQStCO0FBQ3BDUCxnQkFBVVMsMEJBQVY7QUFDRUgsaUJBREY7QUFFRU4sZ0JBQVVVLGdCQUFWLENBQTJCQyxRQUEzQixDQUFvQ0MsYUFGdEM7QUFHRSxVQUhGOztBQUtEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTRSxhQUFULENBQXVCUixXQUF2QixFQUE0QztBQUMxQ0osU0FBT2EsR0FBUCxDQUFXVCxXQUFYO0FBQ0Q7O0FBRUQsU0FBU1UsZUFBVCxDQUF5QlYsV0FBekIsRUFBOEM7QUFDNUNKLFNBQU9lLE1BQVAsQ0FBY1gsV0FBZDtBQUNEOztBQUVELFNBQVNZLFdBQVQsQ0FBcUJaLFdBQXJCLEVBQTBDO0FBQ3hDLFNBQU9KLE9BQU9pQixHQUFQLENBQVdiLFdBQVgsQ0FBUDtBQUNEOztBQUVEYyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZqQiw4Q0FEZTtBQUVmQyxnQ0FGZTtBQUdmTyw4QkFIZTtBQUlmRSw4QkFKZTtBQUtmRSxrQ0FMZTtBQU1mRSwwQkFOZSxFQUFqQiIsImZpbGUiOiJUZXh0SW5wdXRTdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGNvb3JkaW5hdGluZyB0aGUgXCJmb2N1c2VkXCJcbiAqIHN0YXRlIGZvciBUZXh0SW5wdXRzLiBBbGwgY2FsbHMgcmVsYXRpbmcgdG8gdGhlIGtleWJvYXJkXG4gKiBzaG91bGQgYmUgZnVubmVsZWQgdGhyb3VnaCBoZXJlXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJ1BsYXRmb3JtJyk7XG5jb25zdCBVSU1hbmFnZXIgPSByZXF1aXJlKCdVSU1hbmFnZXInKTtcblxubGV0IGN1cnJlbnRseUZvY3VzZWRJRDogP251bWJlciA9IG51bGw7XG5jb25zdCBpbnB1dHMgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHRleHQgZmllbGQsIGlmIG9uZSBleGlzdHNcbiAqIElmIG5vIHRleHQgZmllbGQgaXMgZm9jdXNlZCBpdCByZXR1cm5zIG51bGxcbiAqL1xuZnVuY3Rpb24gY3VycmVudGx5Rm9jdXNlZEZpZWxkKCk6ID9udW1iZXIge1xuICByZXR1cm4gY3VycmVudGx5Rm9jdXNlZElEO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBUZXh0SW5wdXRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byBmb2N1c1xuICogRm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgdGhlIHRleHQgZmllbGQgd2FzIGFscmVhZHkgZm9jdXNlZFxuICovXG5mdW5jdGlvbiBmb2N1c1RleHRJbnB1dCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEICE9PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJRCA9IHRleHRGaWVsZElEO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIFVJTWFuYWdlci5mb2N1cyh0ZXh0RmllbGRJRCk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICBVSU1hbmFnZXIuZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQoXG4gICAgICAgIHRleHRGaWVsZElELFxuICAgICAgICBVSU1hbmFnZXIuQW5kcm9pZFRleHRJbnB1dC5Db21tYW5kcy5mb2N1c1RleHRJbnB1dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRleHRGaWVsZElEIGlkIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIHVuZm9jdXNcbiAqIFVuZm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgaXQgd2Fzbid0IGZvY3VzZWRcbiAqL1xuZnVuY3Rpb24gYmx1clRleHRJbnB1dCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEID09PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJRCA9IG51bGw7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgVUlNYW5hZ2VyLmJsdXIodGV4dEZpZWxkSUQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICB0ZXh0RmllbGRJRCxcbiAgICAgICAgVUlNYW5hZ2VyLkFuZHJvaWRUZXh0SW5wdXQuQ29tbWFuZHMuYmx1clRleHRJbnB1dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW5wdXQodGV4dEZpZWxkSUQ6IG51bWJlcikge1xuICBpbnB1dHMuYWRkKHRleHRGaWVsZElEKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlcklucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgaW5wdXRzLmRlbGV0ZSh0ZXh0RmllbGRJRCk7XG59XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgcmV0dXJuIGlucHV0cy5oYXModGV4dEZpZWxkSUQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3VycmVudGx5Rm9jdXNlZEZpZWxkLFxuICBmb2N1c1RleHRJbnB1dCxcbiAgYmx1clRleHRJbnB1dCxcbiAgcmVnaXN0ZXJJbnB1dCxcbiAgdW5yZWdpc3RlcklucHV0LFxuICBpc1RleHRJbnB1dCxcbn07XG4iXX0=