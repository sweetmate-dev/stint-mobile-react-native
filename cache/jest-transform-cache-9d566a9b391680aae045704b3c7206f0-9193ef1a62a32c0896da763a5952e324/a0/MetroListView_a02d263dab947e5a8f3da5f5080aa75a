168cfc951b31a484fa5a26ac33f41c8b









'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var ListView = require('ListView');
var React = require('React');
var RefreshControl = require('RefreshControl');
var ScrollView = require('ScrollView');

var invariant = require('fbjs/lib/invariant');var









































MetroListView = function (_React$Component) {_inherits(MetroListView, _React$Component);function MetroListView() {var _ref,_this2 = this;var _temp, _this, _ret;_classCallCheck(this, MetroListView);for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.



































































    state = _this._computeState(_this.props, {
      ds: new ListView.DataSource({
        rowHasChanged: function rowHasChanged(itemA, itemB) {return true;},
        sectionHeaderHasChanged: function sectionHeaderHasChanged() {return true;},
        getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {return (
            _this.state.sectionHeaderData[sectionID]);} }),

      sectionHeaderData: {} }), _this.



















    _captureRef = function (ref) {
      _this._listRef = ref;
    }, _this.


























    _renderFooter = function () {return React.createElement(_this2.props.FooterComponent, { key: '$footer' });}, _this.
    _renderRow = function (item, sectionID, rowID, highlightRow) {
      return _this.props.renderItem({ item: item, index: rowID });
    }, _this.
    _renderSectionHeader = function (section, sectionID) {var
      renderSectionHeader = _this.props.renderSectionHeader;
      invariant(
      renderSectionHeader,
      'Must provide renderSectionHeader with sections prop');

      return renderSectionHeader({ section: section });
    }, _this.
    _renderSeparator = function (sID, rID) {return (



        React.createElement(_this2.props.SeparatorComponent, { key: sID + rID }));}, _temp), _possibleConstructorReturn(_this, _ret);}_createClass(MetroListView, [{ key: 'scrollToEnd', value: function scrollToEnd(params) {throw new Error('scrollToEnd not supported in legacy ListView.');} }, { key: 'scrollToIndex', value: function scrollToIndex(params) {throw new Error('scrollToIndex not supported in legacy ListView.');} }, { key: 'scrollToItem', value: function scrollToItem(params) {throw new Error('scrollToItem not supported in legacy ListView.');} }, { key: 'scrollToLocation', value: function scrollToLocation(params) {throw new Error('scrollToLocation not supported in legacy ListView.');} }, { key: 'scrollToOffset', value: function scrollToOffset(params) {var animated = params.animated,offset = params.offset;this._listRef.scrollTo(this.props.horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });} }, { key: 'getListRef', value: function getListRef() {return this._listRef;} }, { key: 'setNativeProps', value: function setNativeProps(props) {if (this._listRef) {this._listRef.setNativeProps(props);}} }, { key: 'UNSAFE_componentWillReceiveProps', value: function UNSAFE_componentWillReceiveProps(newProps) {var _this3 = this;this.setState(function (state) {return _this3._computeState(newProps, state);});} }, { key: 'render', value: function render() {return React.createElement(ListView, _extends({}, this.props, { dataSource: this.state.ds, ref: this._captureRef, renderRow: this._renderRow, renderFooter: this.props.FooterComponent && this._renderFooter, renderSectionHeader: this.props.sections && this._renderSectionHeader, renderSeparator: this.props.SeparatorComponent && this._renderSeparator }));} }, { key: '_computeState', value: function _computeState(props, state) {var sectionHeaderData = {};if (props.sections) {invariant(!props.items, 'Cannot have both sections and items props.');var _sections = {};props.sections.forEach(function (sectionIn, ii) {var sectionID = 's' + ii;_sections[sectionID] = sectionIn.data;sectionHeaderData[sectionID] = sectionIn;});return { ds: state.ds.cloneWithRowsAndSections(_sections), sectionHeaderData: sectionHeaderData };} else {invariant(!props.sections, 'Cannot have both sections and items props.');return { ds: state.ds.cloneWithRows(props.items), sectionHeaderData: sectionHeaderData };}} }]);return MetroListView;}(React.Component);MetroListView.defaultProps = { keyExtractor: function keyExtractor(item, index) {return item.key || String(index);}, renderScrollComponent: function renderScrollComponent(props) {if (props.onRefresh) {return React.createElement(ScrollView, _extends({}, props, { refreshControl: React.createElement(RefreshControl, { refreshing: props.refreshing, onRefresh: props.onRefresh }) }));} else {return React.createElement(ScrollView, props);}} };



module.exports = MetroListView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,