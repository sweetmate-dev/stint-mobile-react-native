2647337b44a5f1ba53d92144ec4ddd5c


'use strict';
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
  }
}function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
}function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }return _assertThisInitialized(self);
}function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return self;
}function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };return _getPrototypeOf(o);
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);
}function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;return o;
  };return _setPrototypeOf(o, p);
}function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

function mergePropsStack(propsStack, defaultValues) {
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, _extends({}, defaultValues));
}

function createStackEntry(props) {
  return {
    backgroundColor: props.backgroundColor != null ? {
      value: props.backgroundColor,
      animated: props.animated } : null,
    barStyle: props.barStyle != null ? {
      value: props.barStyle,
      animated: props.animated } : null,
    translucent: props.translucent,
    hidden: props.hidden != null ? {
      value: props.hidden,
      animated: props.animated,
      transition: props.showHideTransition } : null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible };
}var StatusBar = function (_React$Component) {
  _inherits(StatusBar, _React$Component);function StatusBar() {
    var _getPrototypeOf2;var _this;_classCallCheck(this, StatusBar);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }_this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StatusBar)).call.apply(_getPrototypeOf2, [this].concat(args)));_this._stackEntry = null;_this._updatePropsStack = function () {

      clearImmediate(StatusBar._updateImmediate);
      StatusBar._updateImmediate = setImmediate(function () {
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

        if (require('Platform').OS === 'ios') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            require('NativeModules').StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            require('NativeModules').StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
          }

          if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
            require('NativeModules').StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
          }
        } else if (require('Platform').OS === 'android') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            require('NativeModules').StatusBarManager.setStyle(mergedProps.barStyle.value);
          }
          if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
            require('NativeModules').StatusBarManager.setColor(require('processColor')(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            require('NativeModules').StatusBarManager.setHidden(mergedProps.hidden.value);
          }
          if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
            require('NativeModules').StatusBarManager.setTranslucent(mergedProps.translucent);
          }
        }

        StatusBar._currentValues = mergedProps;
      });
    };return _this;
  }_createClass(StatusBar, [{ key: "componentDidMount", value: function componentDidMount() {
      this._stackEntry = createStackEntry(this.props);StatusBar._propsStack.push(this._stackEntry);this._updatePropsStack();
    } }, { key: "componentWillUnmount", value: function componentWillUnmount() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);StatusBar._propsStack.splice(index, 1);this._updatePropsStack();
    } }, { key: "componentDidUpdate", value: function componentDidUpdate() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);this._stackEntry = createStackEntry(this.props);StatusBar._propsStack[index] = this._stackEntry;this._updatePropsStack();
    } }, { key: "render", value: function render() {
      return null;
    } }], [{ key: "setHidden", value: function setHidden(hidden, animation) {
      animation = animation || 'none';StatusBar._defaultProps.hidden.value = hidden;if (require('Platform').OS === 'ios') {
        require('NativeModules').StatusBarManager.setHidden(hidden, animation);
      } else if (require('Platform').OS === 'android') {
        require('NativeModules').StatusBarManager.setHidden(hidden);
      }
    } }, { key: "setBarStyle", value: function setBarStyle(style, animated) {
      animated = animated || false;StatusBar._defaultProps.barStyle.value = style;if (require('Platform').OS === 'ios') {
        require('NativeModules').StatusBarManager.setStyle(style, animated);
      } else if (require('Platform').OS === 'android') {
        require('NativeModules').StatusBarManager.setStyle(style);
      }
    } }, { key: "setNetworkActivityIndicatorVisible", value: function setNetworkActivityIndicatorVisible(visible) {
      if (require('Platform').OS !== 'ios') {
        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');return;
      }StatusBar._defaultProps.networkActivityIndicatorVisible = visible;require('NativeModules').StatusBarManager.setNetworkActivityIndicatorVisible(visible);
    } }, { key: "setBackgroundColor", value: function setBackgroundColor(color, animated) {
      if (require('Platform').OS !== 'android') {
        console.warn('`setBackgroundColor` is only available on Android');return;
      }animated = animated || false;StatusBar._defaultProps.backgroundColor.value = color;require('NativeModules').StatusBarManager.setColor(require('processColor')(color), animated);
    } }, { key: "setTranslucent", value: function setTranslucent(translucent) {
      if (require('Platform').OS !== 'android') {
        console.warn('`setTranslucent` is only available on Android');return;
      }StatusBar._defaultProps.translucent = translucent;require('NativeModules').StatusBarManager.setTranslucent(translucent);
    } }]);return StatusBar;
}(require('React').Component);StatusBar._propsStack = [];StatusBar._defaultProps = createStackEntry({ animated: false, showHideTransition: 'fade', backgroundColor: 'black', barStyle: 'default', translucent: false, hidden: false, networkActivityIndicatorVisible: false });StatusBar._updateImmediate = null;StatusBar._currentValues = null;StatusBar.currentHeight = require('NativeModules').StatusBarManager.HEIGHT;StatusBar.propTypes = { hidden: require('prop-types').bool, animated: require('prop-types').bool, backgroundColor: require('ColorPropType'), translucent: require('prop-types').bool, barStyle: require('prop-types').oneOf(['default', 'light-content', 'dark-content']), networkActivityIndicatorVisible: require('prop-types').bool, showHideTransition: require('prop-types').oneOf(['fade', 'slide']) };StatusBar.defaultProps = { animated: false, showHideTransition: 'fade' };

module.exports = StatusBar;