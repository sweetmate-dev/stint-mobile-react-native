ea24a6d24a96d16d87da7f4760a55b05










'use strict';







function getAndroidAssetSuffix(scale) {
  switch (scale) {
    case 0.75:
      return 'ldpi';
    case 1:
      return 'mdpi';
    case 1.5:
      return 'hdpi';
    case 2:
      return 'xhdpi';
    case 3:
      return 'xxhdpi';
    case 4:
      return 'xxxhdpi';}

  throw new Error('no such scale');
}


var drawableFileTypes = new Set([
'gif',
'jpeg',
'jpg',
'png',
'svg',
'webp',
'xml']);


function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error(
    "Don't know which android drawable suffix to use for asset: " +
    JSON.stringify(asset));

  }
  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}

function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).
  toLowerCase().
  replace(/\//g, '_').
  replace(/([^a-z0-9_])/g, '').
  replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }
  return basePath;
}

module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0UGF0aFV0aWxzLmpzIl0sIm5hbWVzIjpbImdldEFuZHJvaWRBc3NldFN1ZmZpeCIsInNjYWxlIiwiRXJyb3IiLCJkcmF3YWJsZUZpbGVUeXBlcyIsIlNldCIsImdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUiLCJhc3NldCIsImhhcyIsInR5cGUiLCJzdWZmaXgiLCJKU09OIiwic3RyaW5naWZ5IiwiYW5kcm9pZEZvbGRlciIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJmb2xkZXJQYXRoIiwiZ2V0QmFzZVBhdGgiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiYmFzZVBhdGgiLCJodHRwU2VydmVyTG9jYXRpb24iLCJzdWJzdHIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7O0FBUUEsU0FBU0EscUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNEO0FBQ3BELFVBQVFBLEtBQVI7QUFDRSxTQUFLLElBQUw7QUFDRSxhQUFPLE1BQVA7QUFDRixTQUFLLENBQUw7QUFDRSxhQUFPLE1BQVA7QUFDRixTQUFLLEdBQUw7QUFDRSxhQUFPLE1BQVA7QUFDRixTQUFLLENBQUw7QUFDRSxhQUFPLE9BQVA7QUFDRixTQUFLLENBQUw7QUFDRSxhQUFPLFFBQVA7QUFDRixTQUFLLENBQUw7QUFDRSxhQUFPLFNBQVAsQ0FaSjs7QUFjQSxRQUFNLElBQUlDLEtBQUosQ0FBVSxlQUFWLENBQU47QUFDRDs7O0FBR0QsSUFBTUMsb0JBQW9CLElBQUlDLEdBQUosQ0FBUTtBQUNoQyxLQURnQztBQUVoQyxNQUZnQztBQUdoQyxLQUhnQztBQUloQyxLQUpnQztBQUtoQyxLQUxnQztBQU1oQyxNQU5nQztBQU9oQyxLQVBnQyxDQUFSLENBQTFCOzs7QUFVQSxTQUFTQyw0QkFBVCxDQUFzQ0MsS0FBdEMsRUFBNERMLEtBQTVELEVBQTJFO0FBQ3pFLE1BQUksQ0FBQ0Usa0JBQWtCSSxHQUFsQixDQUFzQkQsTUFBTUUsSUFBNUIsQ0FBTCxFQUF3QztBQUN0QyxXQUFPLEtBQVA7QUFDRDtBQUNELE1BQUlDLFNBQVNULHNCQUFzQkMsS0FBdEIsQ0FBYjtBQUNBLE1BQUksQ0FBQ1EsTUFBTCxFQUFhO0FBQ1gsVUFBTSxJQUFJUCxLQUFKO0FBQ0o7QUFDRVEsU0FBS0MsU0FBTCxDQUFlTCxLQUFmLENBRkUsQ0FBTjs7QUFJRDtBQUNELE1BQU1NLGdCQUFnQixjQUFjSCxNQUFwQztBQUNBLFNBQU9HLGFBQVA7QUFDRDs7QUFFRCxTQUFTQyw0QkFBVCxDQUFzQ1AsS0FBdEMsRUFBNEQ7QUFDMUQsTUFBSVEsYUFBYUMsWUFBWVQsS0FBWixDQUFqQjtBQUNBLFNBQU8sQ0FBQ1EsYUFBYSxHQUFiLEdBQW1CUixNQUFNVSxJQUExQjtBQUNKQyxhQURJO0FBRUpDLFNBRkksQ0FFSSxLQUZKLEVBRVcsR0FGWDtBQUdKQSxTQUhJLENBR0ksZUFISixFQUdxQixFQUhyQjtBQUlKQSxTQUpJLENBSUksVUFKSixFQUlnQixFQUpoQixDQUFQO0FBS0Q7O0FBRUQsU0FBU0gsV0FBVCxDQUFxQlQsS0FBckIsRUFBMkM7QUFDekMsTUFBSWEsV0FBV2IsTUFBTWMsa0JBQXJCO0FBQ0EsTUFBSUQsU0FBUyxDQUFULE1BQWdCLEdBQXBCLEVBQXlCO0FBQ3ZCQSxlQUFXQSxTQUFTRSxNQUFULENBQWdCLENBQWhCLENBQVg7QUFDRDtBQUNELFNBQU9GLFFBQVA7QUFDRDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmdkIseUJBQXVCQSxxQkFEUjtBQUVmSyxnQ0FBOEJBLDRCQUZmO0FBR2ZRLGdDQUE4QkEsNEJBSGY7QUFJZkUsZUFBYUEsV0FKRSxFQUFqQiIsImZpbGUiOiJhc3NldFBhdGhVdGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7UGFja2FnZXJBc3NldH0gZnJvbSAnLi4vLi4vTGlicmFyaWVzL0ltYWdlL0Fzc2V0UmVnaXN0cnknO1xuXG4vKipcbiAqIEZJWE1FOiB1c2luZyBudW1iZXIgdG8gcmVwcmVzZW50IGRpc2NyZXRlIHNjYWxlIG51bWJlcnMgaXMgZnJhZ2lsZSBpbiBlc3NlbmNlIGJlY2F1c2Ugb2ZcbiAqIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgaW1wcmVjaXNpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEFuZHJvaWRBc3NldFN1ZmZpeChzY2FsZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgc3dpdGNoIChzY2FsZSkge1xuICAgIGNhc2UgMC43NTpcbiAgICAgIHJldHVybiAnbGRwaSc7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuICdtZHBpJztcbiAgICBjYXNlIDEuNTpcbiAgICAgIHJldHVybiAnaGRwaSc7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuICd4aGRwaSc7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuICd4eGhkcGknO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiAneHh4aGRwaSc7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdubyBzdWNoIHNjYWxlJyk7XG59XG5cbi8vIFNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS90b3BpY3MvcmVzb3VyY2VzL2RyYXdhYmxlLXJlc291cmNlLmh0bWxcbmNvbnN0IGRyYXdhYmxlRmlsZVR5cGVzID0gbmV3IFNldChbXG4gICdnaWYnLFxuICAnanBlZycsXG4gICdqcGcnLFxuICAncG5nJyxcbiAgJ3N2ZycsXG4gICd3ZWJwJyxcbiAgJ3htbCcsXG5dKTtcblxuZnVuY3Rpb24gZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZShhc3NldDogUGFja2FnZXJBc3NldCwgc2NhbGU6IG51bWJlcikge1xuICBpZiAoIWRyYXdhYmxlRmlsZVR5cGVzLmhhcyhhc3NldC50eXBlKSkge1xuICAgIHJldHVybiAncmF3JztcbiAgfVxuICB2YXIgc3VmZml4ID0gZ2V0QW5kcm9pZEFzc2V0U3VmZml4KHNjYWxlKTtcbiAgaWYgKCFzdWZmaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkRvbid0IGtub3cgd2hpY2ggYW5kcm9pZCBkcmF3YWJsZSBzdWZmaXggdG8gdXNlIGZvciBhc3NldDogXCIgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShhc3NldCksXG4gICAgKTtcbiAgfVxuICBjb25zdCBhbmRyb2lkRm9sZGVyID0gJ2RyYXdhYmxlLScgKyBzdWZmaXg7XG4gIHJldHVybiBhbmRyb2lkRm9sZGVyO1xufVxuXG5mdW5jdGlvbiBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKGFzc2V0OiBQYWNrYWdlckFzc2V0KSB7XG4gIHZhciBmb2xkZXJQYXRoID0gZ2V0QmFzZVBhdGgoYXNzZXQpO1xuICByZXR1cm4gKGZvbGRlclBhdGggKyAnLycgKyBhc3NldC5uYW1lKVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpIC8vIEVuY29kZSBmb2xkZXIgc3RydWN0dXJlIGluIGZpbGUgbmFtZVxuICAgIC5yZXBsYWNlKC8oW15hLXowLTlfXSkvZywgJycpIC8vIFJlbW92ZSBpbGxlZ2FsIGNoYXJzXG4gICAgLnJlcGxhY2UoL15hc3NldHNfLywgJycpOyAvLyBSZW1vdmUgXCJhc3NldHNfXCIgcHJlZml4XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VQYXRoKGFzc2V0OiBQYWNrYWdlckFzc2V0KSB7XG4gIHZhciBiYXNlUGF0aCA9IGFzc2V0Lmh0dHBTZXJ2ZXJMb2NhdGlvbjtcbiAgaWYgKGJhc2VQYXRoWzBdID09PSAnLycpIHtcbiAgICBiYXNlUGF0aCA9IGJhc2VQYXRoLnN1YnN0cigxKTtcbiAgfVxuICByZXR1cm4gYmFzZVBhdGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBbmRyb2lkQXNzZXRTdWZmaXg6IGdldEFuZHJvaWRBc3NldFN1ZmZpeCxcbiAgZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZTogZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSxcbiAgZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcjogZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcixcbiAgZ2V0QmFzZVBhdGg6IGdldEJhc2VQYXRoLFxufTtcbiJdfQ==