352b0ad026537e8b93187fbe98099aa7










'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

var Dimensions = require('Dimensions');var













































PixelRatio = function () {function PixelRatio() {_classCallCheck(this, PixelRatio);}_createClass(PixelRatio, null, [{ key: 'get', value: function get()


















    {
      return Dimensions.get('window').scale;
    } }, { key: 'getFontScale', value: function getFontScale()












    {
      return Dimensions.get('window').fontScale || PixelRatio.get();
    } }, { key: 'getPixelSizeForLayoutSize', value: function getPixelSizeForLayoutSize(






    layoutSize) {
      return Math.round(layoutSize * PixelRatio.get());
    } }, { key: 'roundToNearestPixel', value: function roundToNearestPixel(







    layoutSize) {
      var ratio = PixelRatio.get();
      return Math.round(layoutSize * ratio) / ratio;
    } }, { key: 'startDetecting', value: function startDetecting()


    {} }]);return PixelRatio;}();


module.exports = PixelRatio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBpeGVsUmF0aW8uanMiXSwibmFtZXMiOlsiRGltZW5zaW9ucyIsInJlcXVpcmUiLCJQaXhlbFJhdGlvIiwiZ2V0Iiwic2NhbGUiLCJmb250U2NhbGUiLCJsYXlvdXRTaXplIiwiTWF0aCIsInJvdW5kIiwicmF0aW8iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUEsYTs7QUFFQSxJQUFNQSxhQUFhQyxRQUFRLFlBQVIsQ0FBbkIsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThDTUMsVTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CaUI7QUFDbkIsYUFBT0YsV0FBV0csR0FBWCxDQUFlLFFBQWYsRUFBeUJDLEtBQWhDO0FBQ0QsSzs7Ozs7Ozs7Ozs7OztBQWE2QjtBQUM1QixhQUFPSixXQUFXRyxHQUFYLENBQWUsUUFBZixFQUF5QkUsU0FBekIsSUFBc0NILFdBQVdDLEdBQVgsRUFBN0M7QUFDRCxLOzs7Ozs7O0FBT2dDRyxjLEVBQTRCO0FBQzNELGFBQU9DLEtBQUtDLEtBQUwsQ0FBV0YsYUFBYUosV0FBV0MsR0FBWCxFQUF4QixDQUFQO0FBQ0QsSzs7Ozs7Ozs7QUFRMEJHLGMsRUFBNEI7QUFDckQsVUFBTUcsUUFBUVAsV0FBV0MsR0FBWCxFQUFkO0FBQ0EsYUFBT0ksS0FBS0MsS0FBTCxDQUFXRixhQUFhRyxLQUF4QixJQUFpQ0EsS0FBeEM7QUFDRCxLOzs7QUFHdUIsS0FBRSxDOzs7QUFHNUJDLE9BQU9DLE9BQVAsR0FBaUJULFVBQWpCIiwiZmlsZSI6IlBpeGVsUmF0aW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGltZW5zaW9ucyA9IHJlcXVpcmUoJ0RpbWVuc2lvbnMnKTtcblxuLyoqXG4gKiBQaXhlbFJhdGlvIGNsYXNzIGdpdmVzIGFjY2VzcyB0byB0aGUgZGV2aWNlIHBpeGVsIGRlbnNpdHkuXG4gKlxuICogIyMgRmV0Y2hpbmcgYSBjb3JyZWN0bHkgc2l6ZWQgaW1hZ2VcbiAqXG4gKiBZb3Ugc2hvdWxkIGdldCBhIGhpZ2hlciByZXNvbHV0aW9uIGltYWdlIGlmIHlvdSBhcmUgb24gYSBoaWdoIHBpeGVsIGRlbnNpdHlcbiAqIGRldmljZS4gQSBnb29kIHJ1bGUgb2YgdGh1bWIgaXMgdG8gbXVsdGlwbHkgdGhlIHNpemUgb2YgdGhlIGltYWdlIHlvdSBkaXNwbGF5XG4gKiBieSB0aGUgcGl4ZWwgcmF0aW8uXG4gKlxuICogYGBgXG4gKiB2YXIgaW1hZ2UgPSBnZXRJbWFnZSh7XG4gKiAgIHdpZHRoOiBQaXhlbFJhdGlvLmdldFBpeGVsU2l6ZUZvckxheW91dFNpemUoMjAwKSxcbiAqICAgaGVpZ2h0OiBQaXhlbFJhdGlvLmdldFBpeGVsU2l6ZUZvckxheW91dFNpemUoMTAwKSxcbiAqIH0pO1xuICogPEltYWdlIHNvdXJjZT17aW1hZ2V9IHN0eWxlPXt7d2lkdGg6IDIwMCwgaGVpZ2h0OiAxMDB9fSAvPlxuICogYGBgXG4gKlxuICogIyMgUGl4ZWwgZ3JpZCBzbmFwcGluZ1xuICpcbiAqIEluIGlPUywgeW91IGNhbiBzcGVjaWZ5IHBvc2l0aW9ucyBhbmQgZGltZW5zaW9ucyBmb3IgZWxlbWVudHMgd2l0aCBhcmJpdHJhcnlcbiAqIHByZWNpc2lvbiwgZm9yIGV4YW1wbGUgMjkuNjc0ODI1LiBCdXQsIHVsdGltYXRlbHkgdGhlIHBoeXNpY2FsIGRpc3BsYXkgb25seVxuICogaGF2ZSBhIGZpeGVkIG51bWJlciBvZiBwaXhlbHMsIGZvciBleGFtcGxlIDY0MMOXOTYwIGZvciBpUGhvbmUgNCBvciA3NTDDlzEzMzRcbiAqIGZvciBpUGhvbmUgNi4gaU9TIHRyaWVzIHRvIGJlIGFzIGZhaXRoZnVsIGFzIHBvc3NpYmxlIHRvIHRoZSB1c2VyIHZhbHVlIGJ5XG4gKiBzcHJlYWRpbmcgb25lIG9yaWdpbmFsIHBpeGVsIGludG8gbXVsdGlwbGUgb25lcyB0byB0cmljayB0aGUgZXllLiBUaGVcbiAqIGRvd25zaWRlIG9mIHRoaXMgdGVjaG5pcXVlIGlzIHRoYXQgaXQgbWFrZXMgdGhlIHJlc3VsdGluZyBlbGVtZW50IGxvb2tcbiAqIGJsdXJyeS5cbiAqXG4gKiBJbiBwcmFjdGljZSwgd2UgZm91bmQgb3V0IHRoYXQgZGV2ZWxvcGVycyBkbyBub3Qgd2FudCB0aGlzIGZlYXR1cmUgYW5kIHRoZXlcbiAqIGhhdmUgdG8gd29yayBhcm91bmQgaXQgYnkgZG9pbmcgbWFudWFsIHJvdW5kaW5nIGluIG9yZGVyIHRvIGF2b2lkIGhhdmluZ1xuICogYmx1cnJ5IGVsZW1lbnRzLiBJbiBSZWFjdCBOYXRpdmUsIHdlIGFyZSByb3VuZGluZyBhbGwgdGhlIHBpeGVsc1xuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBXZSBoYXZlIHRvIGJlIGNhcmVmdWwgd2hlbiB0byBkbyB0aGlzIHJvdW5kaW5nLiBZb3UgbmV2ZXIgd2FudCB0byB3b3JrIHdpdGhcbiAqIHJvdW5kZWQgYW5kIHVucm91bmRlZCB2YWx1ZXMgYXQgdGhlIHNhbWUgdGltZSBhcyB5b3UncmUgZ29pbmcgdG8gYWNjdW11bGF0ZVxuICogcm91bmRpbmcgZXJyb3JzLiBIYXZpbmcgZXZlbiBvbmUgcm91bmRpbmcgZXJyb3IgaXMgZGVhZGx5IGJlY2F1c2UgYSBvbmVcbiAqIHBpeGVsIGJvcmRlciBtYXkgdmFuaXNoIG9yIGJlIHR3aWNlIGFzIGJpZy5cbiAqXG4gKiBJbiBSZWFjdCBOYXRpdmUsIGV2ZXJ5dGhpbmcgaW4gSmF2YVNjcmlwdCBhbmQgd2l0aGluIHRoZSBsYXlvdXQgZW5naW5lIHdvcmtzXG4gKiB3aXRoIGFyYml0cmFyeSBwcmVjaXNpb24gbnVtYmVycy4gSXQncyBvbmx5IHdoZW4gd2Ugc2V0IHRoZSBwb3NpdGlvbiBhbmRcbiAqIGRpbWVuc2lvbnMgb2YgdGhlIG5hdGl2ZSBlbGVtZW50IG9uIHRoZSBtYWluIHRocmVhZCB0aGF0IHdlIHJvdW5kLiBBbHNvLFxuICogcm91bmRpbmcgaXMgZG9uZSByZWxhdGl2ZSB0byB0aGUgcm9vdCByYXRoZXIgdGhhbiB0aGUgcGFyZW50LCBhZ2FpbiB0byBhdm9pZFxuICogYWNjdW11bGF0aW5nIHJvdW5kaW5nIGVycm9ycy5cbiAqXG4gKi9cbmNsYXNzIFBpeGVsUmF0aW8ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGV2aWNlIHBpeGVsIGRlbnNpdHkuIFNvbWUgZXhhbXBsZXM6XG4gICAqXG4gICAqICAgLSBQaXhlbFJhdGlvLmdldCgpID09PSAxXG4gICAqICAgICAtIG1kcGkgQW5kcm9pZCBkZXZpY2VzICgxNjAgZHBpKVxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gMS41XG4gICAqICAgICAtIGhkcGkgQW5kcm9pZCBkZXZpY2VzICgyNDAgZHBpKVxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gMlxuICAgKiAgICAgLSBpUGhvbmUgNCwgNFNcbiAgICogICAgIC0gaVBob25lIDUsIDVjLCA1c1xuICAgKiAgICAgLSBpUGhvbmUgNlxuICAgKiAgICAgLSB4aGRwaSBBbmRyb2lkIGRldmljZXMgKDMyMCBkcGkpXG4gICAqICAgLSBQaXhlbFJhdGlvLmdldCgpID09PSAzXG4gICAqICAgICAtIGlQaG9uZSA2IHBsdXNcbiAgICogICAgIC0geHhoZHBpIEFuZHJvaWQgZGV2aWNlcyAoNDgwIGRwaSlcbiAgICogICAtIFBpeGVsUmF0aW8uZ2V0KCkgPT09IDMuNVxuICAgKiAgICAgLSBOZXh1cyA2XG4gICAqL1xuICBzdGF0aWMgZ2V0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5zY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzY2FsaW5nIGZhY3RvciBmb3IgZm9udCBzaXplcy4gVGhpcyBpcyB0aGUgcmF0aW8gdGhhdCBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGVcbiAgICogYWJzb2x1dGUgZm9udCBzaXplLCBzbyBhbnkgZWxlbWVudHMgdGhhdCBoZWF2aWx5IGRlcGVuZCBvbiB0aGF0IHNob3VsZCB1c2UgdGhpcyB0byBkb1xuICAgKiBjYWxjdWxhdGlvbnMuXG4gICAqXG4gICAqIElmIGEgZm9udCBzY2FsZSBpcyBub3Qgc2V0LCB0aGlzIHJldHVybnMgdGhlIGRldmljZSBwaXhlbCByYXRpby5cbiAgICpcbiAgICogQ3VycmVudGx5IHRoaXMgaXMgb25seSBpbXBsZW1lbnRlZCBvbiBBbmRyb2lkIGFuZCByZWZsZWN0cyB0aGUgdXNlciBwcmVmZXJlbmNlIHNldCBpblxuICAgKiBTZXR0aW5ncyA+IERpc3BsYXkgPiBGb250IHNpemUsIG9uIGlPUyBpdCB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIGRlZmF1bHQgcGl4ZWwgcmF0aW8uXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBzdGF0aWMgZ2V0Rm9udFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5mb250U2NhbGUgfHwgUGl4ZWxSYXRpby5nZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIGxheW91dCBzaXplIChkcCkgdG8gcGl4ZWwgc2l6ZSAocHgpLlxuICAgKlxuICAgKiBHdWFyYW50ZWVkIHRvIHJldHVybiBhbiBpbnRlZ2VyIG51bWJlci5cbiAgICovXG4gIHN0YXRpYyBnZXRQaXhlbFNpemVGb3JMYXlvdXRTaXplKGxheW91dFNpemU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobGF5b3V0U2l6ZSAqIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJvdW5kcyBhIGxheW91dCBzaXplIChkcCkgdG8gdGhlIG5lYXJlc3QgbGF5b3V0IHNpemUgdGhhdCBjb3JyZXNwb25kcyB0b1xuICAgKiBhbiBpbnRlZ2VyIG51bWJlciBvZiBwaXhlbHMuIEZvciBleGFtcGxlLCBvbiBhIGRldmljZSB3aXRoIGEgUGl4ZWxSYXRpb1xuICAgKiBvZiAzLCBgUGl4ZWxSYXRpby5yb3VuZFRvTmVhcmVzdFBpeGVsKDguNCkgPSA4LjMzYCwgd2hpY2ggY29ycmVzcG9uZHMgdG9cbiAgICogZXhhY3RseSAoOC4zMyAqIDMpID0gMjUgcGl4ZWxzLlxuICAgKi9cbiAgc3RhdGljIHJvdW5kVG9OZWFyZXN0UGl4ZWwobGF5b3V0U2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCByYXRpbyA9IFBpeGVsUmF0aW8uZ2V0KCk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobGF5b3V0U2l6ZSAqIHJhdGlvKSAvIHJhdGlvO1xuICB9XG5cbiAgLy8gTm8tb3AgZm9yIGlPUywgYnV0IHVzZWQgb24gdGhlIHdlYi4gU2hvdWxkIG5vdCBiZSBkb2N1bWVudGVkLlxuICBzdGF0aWMgc3RhcnREZXRlY3RpbmcoKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBpeGVsUmF0aW87XG4iXX0=