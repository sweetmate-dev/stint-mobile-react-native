{"version":3,"sources":["AnimatedProps.js"],"names":["require","AnimatedEvent","AnimatedNode","AnimatedStyle","NativeAnimatedHelper","ReactNative","invariant","AnimatedProps","props","callback","style","_props","_callback","__attach","key","value","__isNative","__getValue","__getHandler","__getAnimatedValue","__addChild","_animatedView","__disconnectAnimatedView","__removeChild","__makeNative","__connectAnimatedView","animatedView","nativeViewTag","findNodeHandle","API","connectAnimatedNodeToView","__getNativeTag","disconnectAnimatedNodeFromView","propsConfig","propKey","type","module","exports"],"mappings":"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","file":"AnimatedProps.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst {AnimatedEvent} = require('../AnimatedEvent');\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedStyle = require('./AnimatedStyle');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\nconst ReactNative = require('ReactNative');\n\nconst invariant = require('fbjs/lib/invariant');\n\nclass AnimatedProps extends AnimatedNode {\n  _props: Object;\n  _animatedView: any;\n  _callback: () => void;\n\n  constructor(props: Object, callback: () => void) {\n    super();\n    if (props.style) {\n      props = {\n        ...props,\n        style: new AnimatedStyle(props.style),\n      };\n    }\n    this._props = props;\n    this._callback = callback;\n    this.__attach();\n  }\n\n  __getValue(): Object {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative || value instanceof AnimatedStyle) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          props[key] = value.__getValue();\n        }\n      } else if (value instanceof AnimatedEvent) {\n        props[key] = value.__getHandler();\n      } else {\n        props[key] = value;\n      }\n    }\n    return props;\n  }\n\n  __getAnimatedValue(): Object {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getAnimatedValue();\n      }\n    }\n    return props;\n  }\n\n  __attach(): void {\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach(): void {\n    if (this.__isNative && this._animatedView) {\n      this.__disconnectAnimatedView();\n    }\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n    super.__detach();\n  }\n\n  update(): void {\n    this._callback();\n  }\n\n  __makeNative(): void {\n    if (!this.__isNative) {\n      this.__isNative = true;\n      for (const key in this._props) {\n        const value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n      if (this._animatedView) {\n        this.__connectAnimatedView();\n      }\n    }\n  }\n\n  setNativeView(animatedView: any): void {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n    if (this.__isNative) {\n      this.__connectAnimatedView();\n    }\n  }\n\n  __connectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = ReactNative.findNodeHandle(\n      this._animatedView,\n    );\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.connectAnimatedNodeToView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __disconnectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = ReactNative.findNodeHandle(\n      this._animatedView,\n    );\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __getNativeConfig(): Object {\n    const propsConfig = {};\n    for (const propKey in this._props) {\n      const value = this._props[propKey];\n      if (value instanceof AnimatedNode) {\n        propsConfig[propKey] = value.__getNativeTag();\n      }\n    }\n    return {\n      type: 'props',\n      props: propsConfig,\n    };\n  }\n}\n\nmodule.exports = AnimatedProps;\n"]}