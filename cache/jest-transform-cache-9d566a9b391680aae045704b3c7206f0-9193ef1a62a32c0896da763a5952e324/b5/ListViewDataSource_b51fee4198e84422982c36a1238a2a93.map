{"version":3,"sources":["ListViewDataSource.js"],"names":["invariant","require","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","rowIds","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","sectionIndex","rowIndex","needsUpdate","undefined","index","accessIndex","ii","results","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result","key","module","exports"],"mappings":"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","file":"ListViewDataSource.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\nconst isEmpty = require('isEmpty');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nfunction defaultGetRowData(\n  dataBlob: any,\n  sectionID: number | string,\n  rowID: number | string,\n): any {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(\n  dataBlob: any,\n  sectionID: number | string,\n): any {\n  return dataBlob[sectionID];\n}\n\ntype differType = (data1: any, data2: any) => boolean;\n\ntype ParamType = {\n  rowHasChanged: differType,\n  getRowData?: ?typeof defaultGetRowData,\n  sectionHeaderHasChanged?: ?differType,\n  getSectionHeaderData?: ?typeof defaultGetSectionHeaderData,\n};\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nclass ListViewDataSource {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  constructor(params: ParamType) {\n    invariant(\n      params && typeof params.rowHasChanged === 'function',\n      'Must provide a rowHasChanged function.',\n    );\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData =\n      params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n  cloneWithRows(\n    dataBlob: $ReadOnlyArray<any> | {+[key: string]: any},\n    rowIdentities: ?$ReadOnlyArray<string>,\n  ): ListViewDataSource {\n    const rowIds = rowIdentities ? [[...rowIdentities]] : null;\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = () => false;\n    }\n    return this.cloneWithRowsAndSections({s1: dataBlob}, ['s1'], rowIds);\n  }\n\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n  cloneWithRowsAndSections(\n    dataBlob: any,\n    sectionIdentities: ?Array<string>,\n    rowIdentities: ?Array<Array<string>>,\n  ): ListViewDataSource {\n    invariant(\n      typeof this._sectionHeaderHasChanged === 'function',\n      'Must provide a sectionHeaderHasChanged function with section data.',\n    );\n    invariant(\n      !sectionIdentities ||\n        !rowIdentities ||\n        sectionIdentities.length === rowIdentities.length,\n      'row and section ids lengths must be the same',\n    );\n\n    const newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged,\n    });\n    newSource._dataBlob = dataBlob;\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(sectionID => {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(\n      this._dataBlob,\n      this.sectionIdentities,\n      this.rowIdentities,\n    );\n\n    return newSource;\n  }\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n  getRowCount(): number {\n    return this._cachedRowCount;\n  }\n\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n  getRowAndSectionCount(): number {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  }\n\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n  rowShouldUpdate(sectionIndex: number, rowIndex: number): boolean {\n    const needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(\n      needsUpdate !== undefined,\n      'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex,\n    );\n    return needsUpdate;\n  }\n\n  /**\n   * Gets the data required to render the row.\n   */\n  getRowData(sectionIndex: number, rowIndex: number): any {\n    const sectionID = this.sectionIdentities[sectionIndex];\n    const rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(\n      sectionID !== undefined && rowID !== undefined,\n      'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex,\n    );\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  }\n\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n  getRowIDForFlatIndex(index: number): ?string {\n    let accessIndex = index;\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n  getSectionIDForFlatIndex(index: number): ?string {\n    let accessIndex = index;\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n  getSectionLengths(): Array<number> {\n    const results = [];\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n    return results;\n  }\n\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n  sectionHeaderShouldUpdate(sectionIndex: number): boolean {\n    const needsUpdate = this._dirtySections[sectionIndex];\n    warning(\n      needsUpdate !== undefined,\n      'missing dirtyBit for section: ' + sectionIndex,\n    );\n    return needsUpdate;\n  }\n\n  /**\n   * Gets the data required to render the section header\n   */\n  getSectionHeaderData(sectionIndex: number): any {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n    const sectionID = this.sectionIdentities[sectionIndex];\n    warning(\n      sectionID !== undefined,\n      'renderSection called on invalid section: ' + sectionIndex,\n    );\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  }\n\n  /**\n   * Private members and methods.\n   */\n\n  _getRowData: typeof defaultGetRowData;\n  _getSectionHeaderData: typeof defaultGetSectionHeaderData;\n  _rowHasChanged: differType;\n  _sectionHeaderHasChanged: ?differType;\n\n  _dataBlob: any;\n  _dirtyRows: Array<Array<boolean>>;\n  _dirtySections: Array<boolean>;\n  _cachedRowCount: number;\n\n  // These two 'protected' variables are accessed by ListView to iterate over\n  // the data in this class.\n  rowIdentities: Array<Array<string>>;\n  sectionIdentities: Array<string>;\n\n  _calculateDirtyArrays(\n    prevDataBlob: any,\n    prevSectionIDs: Array<string>,\n    prevRowIDs: Array<Array<string>>,\n  ): void {\n    // construct a hashmap of the existing (old) id arrays\n    const prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    const prevRowsHash = {};\n    for (let ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(\n        !prevRowsHash[sectionID],\n        'SectionID appears more than once: ' + sectionID,\n      );\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    // compare the 2 identity array and get the dirtied rows\n    this._dirtySections = [];\n    this._dirtyRows = [];\n\n    let dirty;\n    for (let sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      // dirty if the sectionHeader is new or _sectionHasChanged is true\n      dirty = !prevSectionsHash[sectionID];\n      const sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(\n          this._getSectionHeaderData(prevDataBlob, sectionID),\n          this._getSectionHeaderData(this._dataBlob, sectionID),\n        );\n      }\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n      for (\n        let rIndex = 0;\n        rIndex < this.rowIdentities[sIndex].length;\n        rIndex++\n      ) {\n        const rowID = this.rowIdentities[sIndex][rIndex];\n        // dirty if the section is new, row is new or _rowHasChanged is true\n        dirty =\n          !prevSectionsHash[sectionID] ||\n          !prevRowsHash[sectionID][rowID] ||\n          this._rowHasChanged(\n            this._getRowData(prevDataBlob, sectionID, rowID),\n            this._getRowData(this._dataBlob, sectionID, rowID),\n          );\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  }\n}\n\nfunction countRows(allRowIDs) {\n  let totalRows = 0;\n  for (let sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    const rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  const result = {};\n  for (let ii = 0; ii < arr.length; ii++) {\n    const key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\nmodule.exports = ListViewDataSource;\n"]}