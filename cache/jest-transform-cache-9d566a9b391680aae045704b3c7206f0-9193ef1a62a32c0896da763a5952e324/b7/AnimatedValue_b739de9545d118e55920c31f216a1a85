f18960d789bd593db38473c79d43e3ac


'use strict';
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
  }
}function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
}function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }return _assertThisInitialized(self);
}function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return self;
}function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);if (!base) return;var desc = Object.getOwnPropertyDescriptor(base, property);if (desc.get) {
        return desc.get.call(receiver);
      }return desc.value;
    };
  }return _get(target, property, receiver || target);
}function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);if (object === null) break;
  }return object;
}function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };return _getPrototypeOf(o);
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);
}function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;return o;
  };return _setPrototypeOf(o, p);
}

var _uniqueId = 1;

function _flush(rootNode) {
  var animatedStyles = new Set();
  function findAnimatedStyles(node) {

    if (typeof node.update === 'function') {
      animatedStyles.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);

  animatedStyles.forEach(function (animatedStyle) {
    return animatedStyle.update();
  });
}var AnimatedValue = function (_AnimatedWithChildren) {
  _inherits(AnimatedValue, _AnimatedWithChildren);

  function AnimatedValue(value) {
    var _this;_classCallCheck(this, AnimatedValue);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValue).call(this));
    _this._startingValue = _this._value = value;
    _this._offset = 0;
    _this._animation = null;
    _this._listeners = {};return _this;
  }_createClass(AnimatedValue, [{ key: "__detach", value: function __detach() {
      this.stopAnimation();
      _get(_getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
    } }, { key: "__getValue", value: function __getValue() {
      return this._value + this._offset;
    } }, { key: "__makeNative", value: function __makeNative() {
      _get(_getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

      if (Object.keys(this._listeners).length) {
        this._startListeningToNativeValueUpdates();
      }
    } }, { key: "setValue", value: function setValue(value) {
      if (this._animation) {
        this._animation.stop();
        this._animation = null;
      }
      this._updateValue(value, !this.__isNative);

      if (this.__isNative) {
        require('../NativeAnimatedHelper').API.setAnimatedNodeValue(this.__getNativeTag(), value);
      }
    } }, { key: "setOffset", value: function setOffset(offset) {
      this._offset = offset;
      if (this.__isNative) {
        require('../NativeAnimatedHelper').API.setAnimatedNodeOffset(this.__getNativeTag(), offset);
      }
    } }, { key: "flattenOffset", value: function flattenOffset() {
      this._value += this._offset;
      this._offset = 0;
      if (this.__isNative) {
        require('../NativeAnimatedHelper').API.flattenAnimatedNodeOffset(this.__getNativeTag());
      }
    } }, { key: "extractOffset", value: function extractOffset() {
      this._offset += this._value;
      this._value = 0;
      if (this.__isNative) {
        require('../NativeAnimatedHelper').API.extractAnimatedNodeOffset(this.__getNativeTag());
      }
    } }, { key: "addListener", value: function addListener(callback) {
      var id = String(_uniqueId++);
      this._listeners[id] = callback;
      if (this.__isNative) {
        this._startListeningToNativeValueUpdates();
      }
      return id;
    } }, { key: "removeListener", value: function removeListener(id) {
      delete this._listeners[id];
      if (this.__isNative && Object.keys(this._listeners).length === 0) {
        this._stopListeningForNativeValueUpdates();
      }
    } }, { key: "removeAllListeners", value: function removeAllListeners() {
      this._listeners = {};
      if (this.__isNative) {
        this._stopListeningForNativeValueUpdates();
      }
    } }, { key: "_startListeningToNativeValueUpdates", value: function _startListeningToNativeValueUpdates() {
      var _this2 = this;
      if (this.__nativeAnimatedValueListener) {
        return;
      }

      require('../NativeAnimatedHelper').API.startListeningToAnimatedNodeValue(this.__getNativeTag());
      this.__nativeAnimatedValueListener = require('../NativeAnimatedHelper').nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
        if (data.tag !== _this2.__getNativeTag()) {
          return;
        }
        _this2._updateValue(data.value, false);
      });
    } }, { key: "_stopListeningForNativeValueUpdates", value: function _stopListeningForNativeValueUpdates() {
      if (!this.__nativeAnimatedValueListener) {
        return;
      }

      this.__nativeAnimatedValueListener.remove();
      this.__nativeAnimatedValueListener = null;
      require('../NativeAnimatedHelper').API.stopListeningToAnimatedNodeValue(this.__getNativeTag());
    } }, { key: "stopAnimation", value: function stopAnimation(callback) {
      this.stopTracking();
      this._animation && this._animation.stop();
      this._animation = null;
      callback && callback(this.__getValue());
    } }, { key: "resetAnimation", value: function resetAnimation(callback) {
      this.stopAnimation(callback);
      this._value = this._startingValue;
    } }, { key: "interpolate", value: function interpolate(config) {
      return new (require('./AnimatedInterpolation'))(this, config);
    } }, { key: "animate", value: function animate(animation, callback) {
      var _this3 = this;
      var handle = null;
      if (animation.__isInteraction) {
        handle = require('InteractionManager').createInteractionHandle();
      }
      var previousAnimation = this._animation;
      this._animation && this._animation.stop();
      this._animation = animation;
      animation.start(this._value, function (value) {

        _this3._updateValue(value, true);
      }, function (result) {
        _this3._animation = null;
        if (handle !== null) {
          require('InteractionManager').clearInteractionHandle(handle);
        }
        callback && callback(result);
      }, previousAnimation, this);
    } }, { key: "stopTracking", value: function stopTracking() {
      this._tracking && this._tracking.__detach();
      this._tracking = null;
    } }, { key: "track", value: function track(tracking) {
      this.stopTracking();
      this._tracking = tracking;
    } }, { key: "_updateValue", value: function _updateValue(value, flush) {
      this._value = value;
      if (flush) {
        _flush(this);
      }
      for (var _key in this._listeners) {
        this._listeners[_key]({ value: this.__getValue() });
      }
    } }, { key: "__getNativeConfig", value: function __getNativeConfig() {
      return {
        type: 'value',
        value: this._value,
        offset: this._offset };
    } }]);return AnimatedValue;
}(require('./AnimatedWithChildren'));

module.exports = AnimatedValue;