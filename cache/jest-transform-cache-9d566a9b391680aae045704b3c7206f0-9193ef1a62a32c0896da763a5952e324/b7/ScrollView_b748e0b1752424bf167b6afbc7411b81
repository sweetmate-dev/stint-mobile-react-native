2288fbb7528140edb5fd17691d7d7512


'use strict';
var _jsxFileName = "/Users/johnamuesi/Documents/PRODUCTION/REACTNATIVE/STINT/stint/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }return target;
}function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var AndroidScrollView;
var AndroidHorizontalScrollContentView;
var AndroidHorizontalScrollView;
var RCTScrollView;
var RCTScrollContentView;

if (require('Platform').OS === 'android') {
  AndroidScrollView = require('requireNativeComponent')('RCTScrollView');
  AndroidHorizontalScrollView = require('requireNativeComponent')('AndroidHorizontalScrollView');

  AndroidHorizontalScrollContentView = require('requireNativeComponent')('AndroidHorizontalScrollContentView');
} else if (require('Platform').OS === 'ios') {
  RCTScrollView = require('requireNativeComponent')('RCTScrollView');
  RCTScrollContentView = require('requireNativeComponent')('RCTScrollContentView');
} else {
  RCTScrollView = require('requireNativeComponent')('RCTScrollView');
  RCTScrollContentView = require('requireNativeComponent')('RCTScrollContentView');
}

var ScrollView = require('create-react-class')({
  displayName: 'ScrollView',
  mixins: [require('ScrollResponder').Mixin],

  _scrollAnimatedValue: new (require('AnimatedImplementation').Value)(0),

  _scrollAnimatedValueAttachment: null,
  _stickyHeaderRefs: new Map(),
  _headerLayoutYs: new Map(),
  getInitialState: function getInitialState() {
    return _objectSpread({}, this.scrollResponderMixinGetInitialState(), {
      layoutHeight: null });
  },

  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
    this._scrollAnimatedValue = new (require('AnimatedImplementation').Value)(this.props.contentOffset ? this.props.contentOffset.y : 0);

    this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

    this._stickyHeaderRefs = new Map();
    this._headerLayoutYs = new Map();
  },

  componentDidMount: function componentDidMount() {
    this._updateAnimatedNodeAttachment();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._updateAnimatedNodeAttachment();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
  },

  setNativeProps: function setNativeProps(props) {
    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
  },

  getScrollResponder: function getScrollResponder() {
    return this;
  },

  getScrollableNode: function getScrollableNode() {
    return require('ReactNative').findNodeHandle(this._scrollViewRef);
  },

  getInnerViewNode: function getInnerViewNode() {
    return require('ReactNative').findNodeHandle(this._innerViewRef);
  },

  scrollTo: function scrollTo(y, x, animated) {
    if (typeof y === 'number') {
      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
    } else {
      var _ref = y || {};x = _ref.x;y = _ref.y;animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({
      x: x || 0,
      y: y || 0,
      animated: animated !== false });
  },

  scrollToEnd: function scrollToEnd(options) {

    var animated = (options && options.animated) !== false;
    this.getScrollResponder().scrollResponderScrollToEnd({
      animated: animated });
  },

  scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
    var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');

    this.scrollTo({ x: x, y: y, animated: false });
  },

  flashScrollIndicators: function flashScrollIndicators() {
    this.getScrollResponder().scrollResponderFlashScrollIndicators();
  },

  _getKeyForIndex: function _getKeyForIndex(index, childArray) {

    var child = childArray[index];
    return child && child.key;
  },

  _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
      this._scrollAnimatedValueAttachment = require('AnimatedImplementation').attachNativeEvent(this._scrollViewRef, 'onScroll', [{ nativeEvent: { contentOffset: { y: this._scrollAnimatedValue } } }]);
    }
  },

  _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
    if (ref) {
      this._stickyHeaderRefs.set(key, ref);
    } else {
      this._stickyHeaderRefs.delete(key);
    }
  },

  _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
    if (!this.props.stickyHeaderIndices) {
      return;
    }
    var childArray = require('React').Children.toArray(this.props.children);
    if (key !== this._getKeyForIndex(index, childArray)) {

      return;
    }

    var layoutY = event.nativeEvent.layout.y;
    this._headerLayoutYs.set(key, layoutY);

    var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
    var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

    if (previousHeaderIndex != null) {
      var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

      previousHeader && previousHeader.setNextHeaderY(layoutY);
    }
  },

  _handleScroll: function _handleScroll(e) {
    if (__DEV__) {
      if (this.props.onScroll && this.props.scrollEventThrottle == null && require('Platform').OS === 'ios') {
        console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + "cause frame drops, use a bigger number if you don't need as " + 'much precision.');
      }
    }
    if (require('Platform').OS === 'android') {
      if (this.props.keyboardDismissMode === 'on-drag' && this.state.isTouching) {
        require('dismissKeyboard')();
      }
    }
    this.scrollResponderHandleScroll(e);
  },

  _handleLayout: function _handleLayout(e) {
    if (this.props.invertStickyHeaders) {
      this.setState({ layoutHeight: e.nativeEvent.layout.height });
    }
    if (this.props.onLayout) {
      this.props.onLayout(e);
    }
  },

  _handleContentOnLayout: function _handleContentOnLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
        width = _e$nativeEvent$layout.width,
        height = _e$nativeEvent$layout.height;
    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _scrollViewRef: null,
  _setScrollViewRef: function _setScrollViewRef(ref) {
    this._scrollViewRef = ref;
  },

  _innerViewRef: null,
  _setInnerViewRef: function _setInnerViewRef(ref) {
    this._innerViewRef = ref;
  },

  render: function render() {
    var _this = this;
    var ScrollViewClass;
    var ScrollContentContainerViewClass;
    if (require('Platform').OS === 'android') {
      if (this.props.horizontal) {
        ScrollViewClass = AndroidHorizontalScrollView;
        ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
      } else {
        ScrollViewClass = AndroidScrollView;
        ScrollContentContainerViewClass = require('View');
      }
    } else {
      ScrollViewClass = RCTScrollView;
      ScrollContentContainerViewClass = RCTScrollContentView;
    }

    require('fbjs/lib/invariant')(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');

    require('fbjs/lib/invariant')(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');

    var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];

    if (__DEV__ && this.props.style) {
      var style = require('flattenStyle')(this.props.style);
      var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
        return style && style[prop] !== undefined;
      });

      require('fbjs/lib/invariant')(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
    }

    var contentSizeChangeProps = {};
    if (this.props.onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout };
    }var stickyHeaderIndices = this.props.stickyHeaderIndices;
    var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
    var childArray = hasStickyHeaders && require('React').Children.toArray(this.props.children);
    var children = hasStickyHeaders ? childArray.map(function (child, index) {
      var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
      if (indexOfIndex > -1) {
        var key = child.key;
        var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
        return require('React').createElement(require('ScrollViewStickyHeader'), {
          key: key,
          ref: function ref(_ref2) {
            return _this._setStickyHeaderRef(key, _ref2);
          },
          nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),

          onLayout: function onLayout(event) {
            return _this._onStickyHeaderLayout(index, event, key);
          },

          scrollAnimatedValue: _this._scrollAnimatedValue,
          inverted: _this.props.invertStickyHeaders,
          scrollViewHeight: _this.state.layoutHeight, __source: { fileName: _jsxFileName, lineNumber: 831 } }, child);
      } else {
        return child;
      }
    }) : this.props.children;
    var contentContainer = require('React').createElement(ScrollContentContainerViewClass, _extends({}, contentSizeChangeProps, {

      ref: this._setInnerViewRef,
      style: contentContainerStyle,
      removeClippedSubviews: require('Platform').OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,

      collapsable: false, __source: { fileName: _jsxFileName, lineNumber: 852 } }), children);

    var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;

    var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;

    var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;

    var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
    var props = _objectSpread({}, this.props, {
      alwaysBounceHorizontal: alwaysBounceHorizontal,
      alwaysBounceVertical: alwaysBounceVertical,
      style: [baseStyle, this.props.style],

      onContentSizeChange: null,
      onLayout: this._handleLayout,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderReject: this.scrollResponderHandleResponderReject,
      onResponderRelease: this.scrollResponderHandleResponderRelease,

      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
      onScroll: this._handleScroll,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchStart: this.scrollResponderHandleTouchStart,
      onTouchCancel: this.scrollResponderHandleTouchCancel,
      scrollBarThumbImage: require('resolveAssetSource')(this.props.scrollBarThumbImage),
      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
      sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
      DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,

      pagingEnabled: require('Platform').select({

        ios: this.props.pagingEnabled && this.props.snapToInterval == null && this.props.snapToOffsets == null,

        android: this.props.pagingEnabled || this.props.snapToInterval != null || this.props.snapToOffsets != null }) });var decelerationRate = this.props.decelerationRate;
    if (decelerationRate != null) {
      props.decelerationRate = require('processDecelerationRate')(decelerationRate);
    }

    var refreshControl = this.props.refreshControl;

    if (refreshControl) {
      if (require('Platform').OS === 'ios') {

        return require('React').createElement(ScrollViewClass, _extends({}, props, { ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 952 } }), require('Platform').isTV ? null : refreshControl, contentContainer);
      } else if (require('Platform').OS === 'android') {

        return require('React').cloneElement(refreshControl, { style: props.style }, require('React').createElement(ScrollViewClass, _extends({}, props, {
          style: baseStyle,
          ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 967 } }), contentContainer));
      }
    }
    return require('React').createElement(ScrollViewClass, _extends({}, props, { ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 977 } }), contentContainer);
  } });

var TypedScrollView = ScrollView;

var styles = require('StyleSheet').create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll' },

  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll' },

  contentContainerHorizontal: {
    flexDirection: 'row' } });

module.exports = TypedScrollView;