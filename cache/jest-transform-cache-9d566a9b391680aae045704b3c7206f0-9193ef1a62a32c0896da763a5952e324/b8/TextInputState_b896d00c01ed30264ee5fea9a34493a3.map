{"version":3,"sources":["TextInputState.js"],"names":["Platform","require","UIManager","currentlyFocusedID","inputs","Set","currentlyFocusedField","focusTextInput","textFieldID","OS","focus","dispatchViewManagerCommand","AndroidTextInput","Commands","blurTextInput","blur","registerInput","add","unregisterInput","delete","isTextInput","has","module","exports"],"mappings":";;;;;;;;;;;;;;;AAeA;;AAEA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;;AAEA,IAAIE,qBAA8B,IAAlC;AACA,IAAMC,SAAS,IAAIC,GAAJ,EAAf;;;;;;AAMA,SAASC,qBAAT,GAA0C;AACxC,SAAOH,kBAAP;AACD;;;;;;;AAOD,SAASI,cAAT,CAAwBC,WAAxB,EAA8C;AAC5C,MAAIL,uBAAuBK,WAAvB,IAAsCA,gBAAgB,IAA1D,EAAgE;AAC9DL,yBAAqBK,WAArB;AACA,QAAIR,SAASS,EAAT,KAAgB,KAApB,EAA2B;AACzBP,gBAAUQ,KAAV,CAAgBF,WAAhB;AACD,KAFD,MAEO,IAAIR,SAASS,EAAT,KAAgB,SAApB,EAA+B;AACpCP,gBAAUS,0BAAV;AACEH,iBADF;AAEEN,gBAAUU,gBAAV,CAA2BC,QAA3B,CAAoCN,cAFtC;AAGE,UAHF;;AAKD;AACF;AACF;;;;;;;AAOD,SAASO,aAAT,CAAuBN,WAAvB,EAA6C;AAC3C,MAAIL,uBAAuBK,WAAvB,IAAsCA,gBAAgB,IAA1D,EAAgE;AAC9DL,yBAAqB,IAArB;AACA,QAAIH,SAASS,EAAT,KAAgB,KAApB,EAA2B;AACzBP,gBAAUa,IAAV,CAAeP,WAAf;AACD,KAFD,MAEO,IAAIR,SAASS,EAAT,KAAgB,SAApB,EAA+B;AACpCP,gBAAUS,0BAAV;AACEH,iBADF;AAEEN,gBAAUU,gBAAV,CAA2BC,QAA3B,CAAoCC,aAFtC;AAGE,UAHF;;AAKD;AACF;AACF;;AAED,SAASE,aAAT,CAAuBR,WAAvB,EAA4C;AAC1CJ,SAAOa,GAAP,CAAWT,WAAX;AACD;;AAED,SAASU,eAAT,CAAyBV,WAAzB,EAA8C;AAC5CJ,SAAOe,MAAP,CAAcX,WAAd;AACD;;AAED,SAASY,WAAT,CAAqBZ,WAArB,EAA0C;AACxC,SAAOJ,OAAOiB,GAAP,CAAWb,WAAX,CAAP;AACD;;AAEDc,OAAOC,OAAP,GAAiB;AACfjB,8CADe;AAEfC,gCAFe;AAGfO,8BAHe;AAIfE,8BAJe;AAKfE,kCALe;AAMfE,0BANe,EAAjB","file":"TextInputState.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst UIManager = require('UIManager');\n\nlet currentlyFocusedID: ?number = null;\nconst inputs = new Set();\n\n/**\n * Returns the ID of the currently focused text field, if one exists\n * If no text field is focused it returns null\n */\nfunction currentlyFocusedField(): ?number {\n  return currentlyFocusedID;\n}\n\n/**\n * @param {number} TextInputID id of the text field to focus\n * Focuses the specified text field\n * noop if the text field was already focused\n */\nfunction focusTextInput(textFieldID: ?number) {\n  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {\n    currentlyFocusedID = textFieldID;\n    if (Platform.OS === 'ios') {\n      UIManager.focus(textFieldID);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        textFieldID,\n        UIManager.AndroidTextInput.Commands.focusTextInput,\n        null,\n      );\n    }\n  }\n}\n\n/**\n * @param {number} textFieldID id of the text field to unfocus\n * Unfocuses the specified text field\n * noop if it wasn't focused\n */\nfunction blurTextInput(textFieldID: ?number) {\n  if (currentlyFocusedID === textFieldID && textFieldID !== null) {\n    currentlyFocusedID = null;\n    if (Platform.OS === 'ios') {\n      UIManager.blur(textFieldID);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        textFieldID,\n        UIManager.AndroidTextInput.Commands.blurTextInput,\n        null,\n      );\n    }\n  }\n}\n\nfunction registerInput(textFieldID: number) {\n  inputs.add(textFieldID);\n}\n\nfunction unregisterInput(textFieldID: number) {\n  inputs.delete(textFieldID);\n}\n\nfunction isTextInput(textFieldID: number) {\n  return inputs.has(textFieldID);\n}\n\nmodule.exports = {\n  currentlyFocusedField,\n  focusTextInput,\n  blurTextInput,\n  registerInput,\n  unregisterInput,\n  isTextInput,\n};\n"]}