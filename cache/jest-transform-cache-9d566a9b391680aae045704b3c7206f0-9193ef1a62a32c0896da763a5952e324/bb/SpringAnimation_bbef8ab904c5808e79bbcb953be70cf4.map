{"version":3,"sources":["SpringAnimation.js"],"names":["AnimatedValue","require","AnimatedValueXY","Animation","SpringConfig","invariant","shouldUseNativeDriver","withDefault","value","defaultValue","undefined","SpringAnimation","config","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","__isInteraction","isInteraction","__iterations","iterations","stiffness","damping","mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","springConfig","fromBouncinessAndSpeed","fromOrigamiTensionAndFriction","type","initialVelocity","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","start","__startNativeAnimation","_timeout","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","clearTimeout","global","cancelAnimationFrame","module","exports"],"mappings":"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","file":"SpringAnimation.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedValue = require('../nodes/AnimatedValue');\nconst AnimatedValueXY = require('../nodes/AnimatedValueXY');\nconst Animation = require('./Animation');\nconst SpringConfig = require('../SpringConfig');\n\nconst invariant = require('fbjs/lib/invariant');\nconst {shouldUseNativeDriver} = require('../NativeAnimatedHelper');\n\nimport type {AnimationConfig, EndCallback} from './Animation';\n\nexport type SpringAnimationConfig = AnimationConfig & {\n  toValue: number | AnimatedValue | {x: number, y: number} | AnimatedValueXY,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number | {x: number, y: number},\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport type SpringAnimationConfigSingle = AnimationConfig & {\n  toValue: number | AnimatedValue,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number,\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nfunction withDefault<T>(value: ?T, defaultValue: T): T {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n  return value;\n}\n\nclass SpringAnimation extends Animation {\n  _overshootClamping: boolean;\n  _restDisplacementThreshold: number;\n  _restSpeedThreshold: number;\n  _lastVelocity: number;\n  _startPosition: number;\n  _lastPosition: number;\n  _fromValue: number;\n  _toValue: any;\n  _stiffness: number;\n  _damping: number;\n  _mass: number;\n  _initialVelocity: number;\n  _delay: number;\n  _timeout: any;\n  _startTime: number;\n  _lastTime: number;\n  _frameTime: number;\n  _onUpdate: (value: number) => void;\n  _animationFrame: any;\n  _useNativeDriver: boolean;\n\n  constructor(config: SpringAnimationConfigSingle) {\n    super();\n\n    this._overshootClamping = withDefault(config.overshootClamping, false);\n    this._restDisplacementThreshold = withDefault(\n      config.restDisplacementThreshold,\n      0.001,\n    );\n    this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    this._initialVelocity = withDefault(config.velocity, 0);\n    this._lastVelocity = withDefault(config.velocity, 0);\n    this._toValue = config.toValue;\n    this._delay = withDefault(config.delay, 0);\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction =\n      config.isInteraction !== undefined ? config.isInteraction : true;\n    this.__iterations = config.iterations !== undefined ? config.iterations : 1;\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      this._stiffness = withDefault(config.stiffness, 100);\n      this._damping = withDefault(config.damping, 10);\n      this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        withDefault(config.bounciness, 8),\n        withDefault(config.speed, 12),\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        withDefault(config.tension, 40),\n        withDefault(config.friction, 7),\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig() {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),\n      toValue: this._toValue,\n      iterations: this.__iterations,\n    };\n  }\n\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      // Set the initial velocity to the last velocity\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    const start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n\n    //  If this._delay is more than 0, we start after the timeout.\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState(): Object {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime,\n    };\n  }\n\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n  onUpdate(): void {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n\n    const c: number = this._damping;\n    const m: number = this._mass;\n    const k: number = this._stiffness;\n    const v0: number = -this._initialVelocity;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position =\n        this._toValue -\n        envelope *\n          (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          ((Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0)) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // Conditions for stopping the spring animation\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement =\n        Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || (isVelocity && isDisplacement)) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({finished: true});\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop(): void {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({finished: false});\n  }\n}\n\nmodule.exports = SpringAnimation;\n"]}