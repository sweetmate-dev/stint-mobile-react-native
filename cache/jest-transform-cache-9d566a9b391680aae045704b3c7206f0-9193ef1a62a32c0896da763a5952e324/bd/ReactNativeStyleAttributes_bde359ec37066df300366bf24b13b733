00b951cae9be94c3cca5a470e4e1b98f










'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var ImageStylePropTypes = require('ImageStylePropTypes');
var TextStylePropTypes = require('TextStylePropTypes');
var ViewStylePropTypes = require('ViewStylePropTypes');




var keyMirror = require('fbjs/lib/keyMirror');
var processColor = require('processColor');
var processTransform = require('processTransform');
var sizesDiffer = require('sizesDiffer');

var ReactNativeStyleAttributes = _extends({},
keyMirror(ViewStylePropTypes),
keyMirror(TextStylePropTypes),
keyMirror(ImageStylePropTypes));


ReactNativeStyleAttributes.transform = { process: processTransform };
ReactNativeStyleAttributes.shadowOffset = { diff: sizesDiffer };

var colorAttributes = { process: processColor };
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.borderStartColor = colorAttributes;
ReactNativeStyleAttributes.borderEndColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;

module.exports = ReactNativeStyleAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXF1aXJlIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwia2V5TWlycm9yIiwicHJvY2Vzc0NvbG9yIiwicHJvY2Vzc1RyYW5zZm9ybSIsInNpemVzRGlmZmVyIiwiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJ0cmFuc2Zvcm0iLCJwcm9jZXNzIiwic2hhZG93T2Zmc2V0IiwiZGlmZiIsImNvbG9yQXR0cmlidXRlcyIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJTdGFydENvbG9yIiwiYm9yZGVyRW5kQ29sb3IiLCJjb2xvciIsInNoYWRvd0NvbG9yIiwidGV4dERlY29yYXRpb25Db2xvciIsInRpbnRDb2xvciIsInRleHRTaGFkb3dDb2xvciIsIm92ZXJsYXlDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFVQSxhOztBQUVBLElBQU1BLHNCQUFzQkMsUUFBUSxxQkFBUixDQUE1QjtBQUNBLElBQU1DLHFCQUFxQkQsUUFBUSxvQkFBUixDQUEzQjtBQUNBLElBQU1FLHFCQUFxQkYsUUFBUSxvQkFBUixDQUEzQjs7Ozs7QUFLQSxJQUFNRyxZQUFZSCxRQUFRLG9CQUFSLENBQWxCO0FBQ0EsSUFBTUksZUFBZUosUUFBUSxjQUFSLENBQXJCO0FBQ0EsSUFBTUssbUJBQW1CTCxRQUFRLGtCQUFSLENBQXpCO0FBQ0EsSUFBTU0sY0FBY04sUUFBUSxhQUFSLENBQXBCOztBQUVBLElBQU1PO0FBQ0RKLFVBQVVELGtCQUFWLENBREM7QUFFREMsVUFBVUYsa0JBQVYsQ0FGQztBQUdERSxVQUFVSixtQkFBVixDQUhDLENBQU47OztBQU1BUSwyQkFBMkJDLFNBQTNCLEdBQXVDLEVBQUNDLFNBQVNKLGdCQUFWLEVBQXZDO0FBQ0FFLDJCQUEyQkcsWUFBM0IsR0FBMEMsRUFBQ0MsTUFBTUwsV0FBUCxFQUExQzs7QUFFQSxJQUFNTSxrQkFBa0IsRUFBQ0gsU0FBU0wsWUFBVixFQUF4QjtBQUNBRywyQkFBMkJNLGVBQTNCLEdBQTZDRCxlQUE3QztBQUNBTCwyQkFBMkJPLGlCQUEzQixHQUErQ0YsZUFBL0M7QUFDQUwsMkJBQTJCUSxXQUEzQixHQUF5Q0gsZUFBekM7QUFDQUwsMkJBQTJCUyxlQUEzQixHQUE2Q0osZUFBN0M7QUFDQUwsMkJBQTJCVSxnQkFBM0IsR0FBOENMLGVBQTlDO0FBQ0FMLDJCQUEyQlcsY0FBM0IsR0FBNENOLGVBQTVDO0FBQ0FMLDJCQUEyQlksZ0JBQTNCLEdBQThDUCxlQUE5QztBQUNBTCwyQkFBMkJhLGNBQTNCLEdBQTRDUixlQUE1QztBQUNBTCwyQkFBMkJjLEtBQTNCLEdBQW1DVCxlQUFuQztBQUNBTCwyQkFBMkJlLFdBQTNCLEdBQXlDVixlQUF6QztBQUNBTCwyQkFBMkJnQixtQkFBM0IsR0FBaURYLGVBQWpEO0FBQ0FMLDJCQUEyQmlCLFNBQTNCLEdBQXVDWixlQUF2QztBQUNBTCwyQkFBMkJrQixlQUEzQixHQUE2Q2IsZUFBN0M7QUFDQUwsMkJBQTJCbUIsWUFBM0IsR0FBMENkLGVBQTFDOztBQUVBZSxPQUFPQyxPQUFQLEdBQWlCckIsMEJBQWpCIiwiZmlsZSI6IlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgSW1hZ2VTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ0ltYWdlU3R5bGVQcm9wVHlwZXMnKTtcbmNvbnN0IFRleHRTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ1RleHRTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgVmlld1N0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnVmlld1N0eWxlUHJvcFR5cGVzJyk7XG5cbi8qICRGbG93Rml4TWUoPj0wLjU0LjAgc2l0ZT1yZWFjdF9uYXRpdmVfb3NzKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhbiBlcnJvclxuICogZm91bmQgd2hlbiBGbG93IHYwLjU0IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciBkZWxldGUgdGhpcyBjb21tZW50IGFuZFxuICogcnVuIEZsb3cuICovXG5jb25zdCBrZXlNaXJyb3IgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlNaXJyb3InKTtcbmNvbnN0IHByb2Nlc3NDb2xvciA9IHJlcXVpcmUoJ3Byb2Nlc3NDb2xvcicpO1xuY29uc3QgcHJvY2Vzc1RyYW5zZm9ybSA9IHJlcXVpcmUoJ3Byb2Nlc3NUcmFuc2Zvcm0nKTtcbmNvbnN0IHNpemVzRGlmZmVyID0gcmVxdWlyZSgnc2l6ZXNEaWZmZXInKTtcblxuY29uc3QgUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMgPSB7XG4gIC4uLmtleU1pcnJvcihWaWV3U3R5bGVQcm9wVHlwZXMpLFxuICAuLi5rZXlNaXJyb3IoVGV4dFN0eWxlUHJvcFR5cGVzKSxcbiAgLi4ua2V5TWlycm9yKEltYWdlU3R5bGVQcm9wVHlwZXMpLFxufTtcblxuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudHJhbnNmb3JtID0ge3Byb2Nlc3M6IHByb2Nlc3NUcmFuc2Zvcm19O1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuc2hhZG93T2Zmc2V0ID0ge2RpZmY6IHNpemVzRGlmZmVyfTtcblxuY29uc3QgY29sb3JBdHRyaWJ1dGVzID0ge3Byb2Nlc3M6IHByb2Nlc3NDb2xvcn07XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJCb3R0b21Db2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyTGVmdENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyUmlnaHRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlclRvcENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyU3RhcnRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckVuZENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuY29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5zaGFkb3dDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnRleHREZWNvcmF0aW9uQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50aW50Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50ZXh0U2hhZG93Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5vdmVybGF5Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXM7XG4iXX0=