{"version":3,"sources":["Subscribable.js"],"names":["Subscribable","Mixin","UNSAFE_componentWillMount","_subscribableSubscriptions","componentWillUnmount","forEach","subscription","remove","addListenerOn","eventEmitter","eventType","listener","context","push","addListener","module","exports"],"mappings":";;;;;;;;;;AAUA;;;;;;;;;;;;AAYA,IAAMA,eAAe,EAArB;;AAEAA,aAAaC,KAAb,GAAqB;AACnBC,6BAA2B,qCAAW;AACpC,SAAKC,0BAAL,GAAkC,EAAlC;AACD,GAHkB;;AAKnBC,wBAAsB,gCAAW;;;AAG/B,SAAKD,0BAAL;AACE,SAAKA,0BAAL,CAAgCE,OAAhC,CAAwC;AACtCC,qBAAaC,MAAb,EADsC,GAAxC,CADF;;AAIA,SAAKJ,0BAAL,GAAkC,IAAlC;AACD,GAbkB;;;;;;;;;;;;;;;AA4BnBK,iBAAe;AACbC,cADa;AAEbC,WAFa;AAGbC,UAHa;AAIbC,SAJa;AAKb;AACA,SAAKT,0BAAL,CAAgCU,IAAhC;AACEJ,iBAAaK,WAAb,CAAyBJ,SAAzB,EAAoCC,QAApC,EAA8CC,OAA9C,CADF;;AAGD,GArCkB,EAArB;;;AAwCAG,OAAOC,OAAP,GAAiBhB,YAAjB","file":"Subscribable.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type EventEmitter from 'EventEmitter';\n\n/**\n * Subscribable provides a mixin for safely subscribing a component to an\n * eventEmitter\n *\n * This will be replaced with the observe interface that will be coming soon to\n * React Core\n */\n\nconst Subscribable = {};\n\nSubscribable.Mixin = {\n  UNSAFE_componentWillMount: function() {\n    this._subscribableSubscriptions = [];\n  },\n\n  componentWillUnmount: function() {\n    // This null check is a fix for a broken version of uglify-es. Should be deleted eventually\n    // https://github.com/facebook/react-native/issues/17348\n    this._subscribableSubscriptions &&\n      this._subscribableSubscriptions.forEach(subscription =>\n        subscription.remove(),\n      );\n    this._subscribableSubscriptions = null;\n  },\n\n  /**\n   * Special form of calling `addListener` that *guarantees* that a\n   * subscription *must* be tied to a component instance, and therefore will\n   * be cleaned up when the component is unmounted. It is impossible to create\n   * the subscription and pass it in - this method must be the one to create\n   * the subscription and therefore can guarantee it is retained in a way that\n   * will be cleaned up.\n   *\n   * @param {EventEmitter} eventEmitter emitter to subscribe to.\n   * @param {string} eventType Type of event to listen to.\n   * @param {function} listener Function to invoke when event occurs.\n   * @param {object} context Object to use as listener context.\n   */\n  addListenerOn: function(\n    eventEmitter: EventEmitter,\n    eventType: string,\n    listener: Function,\n    context: Object,\n  ) {\n    this._subscribableSubscriptions.push(\n      eventEmitter.addListener(eventType, listener, context),\n    );\n  },\n};\n\nmodule.exports = Subscribable;\n"]}