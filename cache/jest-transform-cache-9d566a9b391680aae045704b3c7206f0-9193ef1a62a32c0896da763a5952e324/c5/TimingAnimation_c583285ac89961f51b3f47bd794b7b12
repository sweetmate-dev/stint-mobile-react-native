4a91d3df1322f1e8d434b77a6a603217









'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if ("value" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var AnimatedValue = require('../nodes/AnimatedValue');
var AnimatedValueXY = require('../nodes/AnimatedValueXY');
var Animation = require('./Animation');var _require =

require('../NativeAnimatedHelper'),shouldUseNativeDriver = _require.shouldUseNativeDriver;

















var _easeInOut = void 0;
function easeInOut() {
  if (!_easeInOut) {
    var Easing = require('Easing');
    _easeInOut = Easing.inOut(Easing.ease);
  }
  return _easeInOut;
}var

TimingAnimation = function (_Animation) {_inherits(TimingAnimation, _Animation);











  function TimingAnimation(config) {_classCallCheck(this, TimingAnimation);var _this = _possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

    _this._toValue = config.toValue;
    _this._easing = config.easing !== undefined ? config.easing : easeInOut();
    _this._duration = config.duration !== undefined ? config.duration : 500;
    _this._delay = config.delay !== undefined ? config.delay : 0;
    _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
    _this.__isInteraction =
    config.isInteraction !== undefined ? config.isInteraction : true;
    _this._useNativeDriver = shouldUseNativeDriver(config);return _this;
  }_createClass(TimingAnimation, [{ key: '__getNativeAnimationConfig', value: function __getNativeAnimationConfig()

    {
      var frameDuration = 1000.0 / 60.0;
      var frames = [];
      for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
        frames.push(this._easing(dt / this._duration));
      }
      frames.push(this._easing(1));
      return {
        type: 'frames',
        frames: frames,
        toValue: this._toValue,
        iterations: this.__iterations };

    } }, { key: 'start', value: function start(


    fromValue,
    onUpdate,
    onEnd,
    previousAnimation,
    animatedValue)
    {var _this2 = this;
      this.__active = true;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;

      var start = function start() {



        if (_this2._duration === 0 && !_this2._useNativeDriver) {
          _this2._onUpdate(_this2._toValue);
          _this2.__debouncedOnEnd({ finished: true });
        } else {
          _this2._startTime = Date.now();
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2._animationFrame = requestAnimationFrame(
            _this2.onUpdate.bind(_this2));

          }
        }
      };
      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    } }, { key: 'onUpdate', value: function onUpdate()

    {
      var now = Date.now();
      if (now >= this._startTime + this._duration) {
        if (this._duration === 0) {
          this._onUpdate(this._toValue);
        } else {
          this._onUpdate(
          this._fromValue + this._easing(1) * (this._toValue - this._fromValue));

        }
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._onUpdate(
      this._fromValue +
      this._easing((now - this._startTime) / this._duration) * (
      this._toValue - this._fromValue));

      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    } }, { key: 'stop', value: function stop()

    {
      _get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    } }]);return TimingAnimation;}(Animation);


module.exports = TimingAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRpbWluZ0FuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJBbmltYXRlZFZhbHVlIiwicmVxdWlyZSIsIkFuaW1hdGVkVmFsdWVYWSIsIkFuaW1hdGlvbiIsInNob3VsZFVzZU5hdGl2ZURyaXZlciIsIl9lYXNlSW5PdXQiLCJlYXNlSW5PdXQiLCJFYXNpbmciLCJpbk91dCIsImVhc2UiLCJUaW1pbmdBbmltYXRpb24iLCJjb25maWciLCJfdG9WYWx1ZSIsInRvVmFsdWUiLCJfZWFzaW5nIiwiZWFzaW5nIiwidW5kZWZpbmVkIiwiX2R1cmF0aW9uIiwiZHVyYXRpb24iLCJfZGVsYXkiLCJkZWxheSIsIl9faXRlcmF0aW9ucyIsIml0ZXJhdGlvbnMiLCJfX2lzSW50ZXJhY3Rpb24iLCJpc0ludGVyYWN0aW9uIiwiX3VzZU5hdGl2ZURyaXZlciIsImZyYW1lRHVyYXRpb24iLCJmcmFtZXMiLCJkdCIsInB1c2giLCJ0eXBlIiwiZnJvbVZhbHVlIiwib25VcGRhdGUiLCJvbkVuZCIsInByZXZpb3VzQW5pbWF0aW9uIiwiYW5pbWF0ZWRWYWx1ZSIsIl9fYWN0aXZlIiwiX2Zyb21WYWx1ZSIsIl9vblVwZGF0ZSIsIl9fb25FbmQiLCJzdGFydCIsIl9fZGVib3VuY2VkT25FbmQiLCJmaW5pc2hlZCIsIl9zdGFydFRpbWUiLCJEYXRlIiwibm93IiwiX19zdGFydE5hdGl2ZUFuaW1hdGlvbiIsIl9hbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImJpbmQiLCJfdGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJnbG9iYWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBLGE7O0FBRUEsSUFBTUEsZ0JBQWdCQyxRQUFRLHdCQUFSLENBQXRCO0FBQ0EsSUFBTUMsa0JBQWtCRCxRQUFRLDBCQUFSLENBQXhCO0FBQ0EsSUFBTUUsWUFBWUYsUUFBUSxhQUFSLENB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QjtBQUNEO0FBQ0YsSzs7QUFFZ0I7QUFDZixVQUFNSyxNQUFNRCxLQUFLQyxHQUFMLEVBQVo7QUFDQSxVQUFJQSxPQUFPLEtBQUtGLFVBQUwsR0FBa0IsS0FBSzFCLFNBQWxDLEVBQTZDO0FBQzNDLFlBQUksS0FBS0EsU0FBTCxLQUFtQixDQUF2QixFQUEwQjtBQUN4QixlQUFLcUIsU0FBTCxDQUFlLEtBQUsxQixRQUFwQjtBQUNELFNBRkQsTUFFTztBQUNMLGVBQUswQixTQUFMO0FBQ0UsZUFBS0QsVUFBTCxHQUFrQixLQUFLdkIsT0FBTCxDQUFhLENBQWIsS0FBbUIsS0FBS0YsUUFBTCxHQUFnQixLQUFLeUIsVUFBeEMsQ0FEcEI7O0FBR0Q7QUFDRCxhQUFLSSxnQkFBTCxDQUFzQixFQUFDQyxVQUFVLElBQVgsRUFBdEI7QUFDQTtBQUNEOztBQUVELFdBQUtKLFNBQUw7QUFDRSxXQUFLRCxVQUFMO0FBQ0UsV0FBS3ZCLE9BQUwsQ0FBYSxDQUFDK0IsTUFBTSxLQUFLRixVQUFaLElBQTBCLEtBQUsxQixTQUE1QztBQUNHLFdBQUtMLFFBQUwsR0FBZ0IsS0FBS3lCLFVBRHhCLENBRko7O0FBS0EsVUFBSSxLQUFLRCxRQUFULEVBQW1CO0FBQ2pCLGFBQUtXLGVBQUwsR0FBdUJDLHNCQUFzQixLQUFLaEIsUUFBTCxDQUFjaUIsSUFBZCxDQUFtQixJQUFuQixDQUF0QixDQUF2QjtBQUNEO0FBQ0YsSzs7QUFFWTtBQUNYO0FBQ0EsV0FBS2IsUUFBTCxHQUFnQixLQUFoQjtBQUNBZ0IsbUJBQWEsS0FBS0YsUUFBbEI7QUFDQUcsYUFBT0Msb0JBQVAsQ0FBNEIsS0FBS1AsZUFBakM7QUFDQSxXQUFLTixnQkFBTCxDQUFzQixFQUFDQyxVQUFVLEtBQVgsRUFBdEI7QUFDRCxLLDhCQTFHMkJ2QyxTOzs7QUE2RzlCb0QsT0FBT0MsT0FBUCxHQUFpQjlDLGVBQWpCIiwiZmlsZSI6IlRpbWluZ0FuaW1hdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBbmltYXRlZFZhbHVlID0gcmVxdWlyZSgnLi4vbm9kZXMvQW5pbWF0ZWRWYWx1ZScpO1xuY29uc3QgQW5pbWF0ZWRWYWx1ZVhZID0gcmVxdWlyZSgnLi4vbm9kZXMvQW5pbWF0ZWRWYWx1ZVhZJyk7XG5jb25zdCBBbmltYXRpb24gPSByZXF1aXJlKCcuL0FuaW1hdGlvbicpO1xuXG5jb25zdCB7c2hvdWxkVXNlTmF0aXZlRHJpdmVyfSA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmltcG9ydCB0eXBlIHtBbmltYXRpb25Db25maWcsIEVuZENhbGxiYWNrfSBmcm9tICcuL0FuaW1hdGlvbic7XG5cbmV4cG9ydCB0eXBlIFRpbWluZ0FuaW1hdGlvbkNvbmZpZyA9IEFuaW1hdGlvbkNvbmZpZyAmIHtcbiAgdG9WYWx1ZTogbnVtYmVyIHwgQW5pbWF0ZWRWYWx1ZSB8IHt4OiBudW1iZXIsIHk6IG51bWJlcn0gfCBBbmltYXRlZFZhbHVlWFksXG4gIGVhc2luZz86ICh2YWx1ZTogbnVtYmVyKSA9PiBudW1iZXIsXG4gIGR1cmF0aW9uPzogbnVtYmVyLFxuICBkZWxheT86IG51bWJlcixcbn07XG5cbmV4cG9ydCB0eXBlIFRpbWluZ0FuaW1hdGlvbkNvbmZpZ1NpbmdsZSA9IEFuaW1hdGlvbkNvbmZpZyAmIHtcbiAgdG9WYWx1ZTogbnVtYmVyIHwgQW5pbWF0ZWRWYWx1ZSxcbiAgZWFzaW5nPzogKHZhbHVlOiBudW1iZXIpID0+IG51bWJlcixcbiAgZHVyYXRpb24/OiBudW1iZXIsXG4gIGRlbGF5PzogbnVtYmVyLFxufTtcblxubGV0IF9lYXNlSW5PdXQ7XG5mdW5jdGlvbiBlYXNlSW5PdXQoKSB7XG4gIGlmICghX2Vhc2VJbk91dCkge1xuICAgIGNvbnN0IEVhc2luZyA9IHJlcXVpcmUoJ0Vhc2luZycpO1xuICAgIF9lYXNlSW5PdXQgPSBFYXNpbmcuaW5PdXQoRWFzaW5nLmVhc2UpO1xuICB9XG4gIHJldHVybiBfZWFzZUluT3V0O1xufVxuXG5jbGFzcyBUaW1pbmdBbmltYXRpb24gZXh0ZW5kcyBBbmltYXRpb24ge1xuICBfc3RhcnRUaW1lOiBudW1iZXI7XG4gIF9mcm9tVmFsdWU6IG51bWJlcjtcbiAgX3RvVmFsdWU6IGFueTtcbiAgX2R1cmF0aW9uOiBudW1iZXI7XG4gIF9kZWxheTogbnVtYmVyO1xuICBfZWFzaW5nOiAodmFsdWU6IG51bWJlcikgPT4gbnVtYmVyO1xuICBfb25VcGRhdGU6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBfYW5pbWF0aW9uRnJhbWU6IGFueTtcbiAgX3RpbWVvdXQ6IGFueTtcbiAgX3VzZU5hdGl2ZURyaXZlcjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRpbWluZ0FuaW1hdGlvbkNvbmZpZ1NpbmdsZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fdG9WYWx1ZSA9IGNvbmZpZy50b1ZhbHVlO1xuICAgIHRoaXMuX2Vhc2luZyA9IGNvbmZpZy5lYXNpbmcgIT09IHVuZGVmaW5lZCA/IGNvbmZpZy5lYXNpbmcgOiBlYXNlSW5PdXQoKTtcbiAgICB0aGlzLl9kdXJhdGlvbiA9IGNvbmZpZy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmR1cmF0aW9uIDogNTAwO1xuICAgIHRoaXMuX2RlbGF5ID0gY29uZmlnLmRlbGF5ICE9PSB1bmRlZmluZWQgPyBjb25maWcuZGVsYXkgOiAwO1xuICAgIHRoaXMuX19pdGVyYXRpb25zID0gY29uZmlnLml0ZXJhdGlvbnMgIT09IHVuZGVmaW5lZCA/IGNvbmZpZy5pdGVyYXRpb25zIDogMTtcbiAgICB0aGlzLl9faXNJbnRlcmFjdGlvbiA9XG4gICAgICBjb25maWcuaXNJbnRlcmFjdGlvbiAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmlzSW50ZXJhY3Rpb24gOiB0cnVlO1xuICAgIHRoaXMuX3VzZU5hdGl2ZURyaXZlciA9IHNob3VsZFVzZU5hdGl2ZURyaXZlcihjb25maWcpO1xuICB9XG5cbiAgX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKTogYW55IHtcbiAgICBjb25zdCBmcmFtZUR1cmF0aW9uID0gMTAwMC4wIC8gNjAuMDtcbiAgICBjb25zdCBmcmFtZXMgPSBbXTtcbiAgICBmb3IgKGxldCBkdCA9IDAuMDsgZHQgPCB0aGlzLl9kdXJhdGlvbjsgZHQgKz0gZnJhbWVEdXJhdGlvbikge1xuICAgICAgZnJhbWVzLnB1c2godGhpcy5fZWFzaW5nKGR0IC8gdGhpcy5fZHVyYXRpb24pKTtcbiAgICB9XG4gICAgZnJhbWVzLnB1c2godGhpcy5fZWFzaW5nKDEpKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2ZyYW1lcycsXG4gICAgICBmcmFtZXMsXG4gICAgICB0b1ZhbHVlOiB0aGlzLl90b1ZhbHVlLFxuICAgICAgaXRlcmF0aW9uczogdGhpcy5fX2l0ZXJhdGlvbnMsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXJ0KFxuICAgIGZyb21WYWx1ZTogbnVtYmVyLFxuICAgIG9uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgICBvbkVuZDogP0VuZENhbGxiYWNrLFxuICAgIHByZXZpb3VzQW5pbWF0aW9uOiA/QW5pbWF0aW9uLFxuICAgIGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX19hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMuX2Zyb21WYWx1ZSA9IGZyb21WYWx1ZTtcbiAgICB0aGlzLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICAgIHRoaXMuX19vbkVuZCA9IG9uRW5kO1xuXG4gICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7XG4gICAgICAvLyBBbmltYXRpb25zIHRoYXQgc29tZXRpbWVzIGhhdmUgMCBkdXJhdGlvbiBhbmQgc29tZXRpbWVzIGRvIG5vdFxuICAgICAgLy8gc3RpbGwgbmVlZCB0byB1c2UgdGhlIG5hdGl2ZSBkcml2ZXIgd2hlbiBkdXJhdGlvbiBpcyAwIHNvIGFzIHRvXG4gICAgICAvLyBub3QgY2F1c2UgaW50ZXJtaXhlZCBKUyBhbmQgbmF0aXZlIGFuaW1hdGlvbnMuXG4gICAgICBpZiAodGhpcy5fZHVyYXRpb24gPT09IDAgJiYgIXRoaXMuX3VzZU5hdGl2ZURyaXZlcikge1xuICAgICAgICB0aGlzLl9vblVwZGF0ZSh0aGlzLl90b1ZhbHVlKTtcbiAgICAgICAgdGhpcy5fX2RlYm91bmNlZE9uRW5kKHtmaW5pc2hlZDogdHJ1ZX0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKHRoaXMuX3VzZU5hdGl2ZURyaXZlcikge1xuICAgICAgICAgIHRoaXMuX19zdGFydE5hdGl2ZUFuaW1hdGlvbihhbmltYXRlZFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUuYmluZCh0aGlzKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAodGhpcy5fZGVsYXkpIHtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KHN0YXJ0LCB0aGlzLl9kZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBpZiAobm93ID49IHRoaXMuX3N0YXJ0VGltZSArIHRoaXMuX2R1cmF0aW9uKSB7XG4gICAgICBpZiAodGhpcy5fZHVyYXRpb24gPT09IDApIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUodGhpcy5fdG9WYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9vblVwZGF0ZShcbiAgICAgICAgICB0aGlzLl9mcm9tVmFsdWUgKyB0aGlzLl9lYXNpbmcoMSkgKiAodGhpcy5fdG9WYWx1ZSAtIHRoaXMuX2Zyb21WYWx1ZSksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQoe2ZpbmlzaGVkOiB0cnVlfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fb25VcGRhdGUoXG4gICAgICB0aGlzLl9mcm9tVmFsdWUgK1xuICAgICAgICB0aGlzLl9lYXNpbmcoKG5vdyAtIHRoaXMuX3N0YXJ0VGltZSkgLyB0aGlzLl9kdXJhdGlvbikgKlxuICAgICAgICAgICh0aGlzLl90b1ZhbHVlIC0gdGhpcy5fZnJvbVZhbHVlKSxcbiAgICApO1xuICAgIGlmICh0aGlzLl9fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgc3VwZXIuc3RvcCgpO1xuICAgIHRoaXMuX19hY3RpdmUgPSBmYWxzZTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgZ2xvYmFsLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGlvbkZyYW1lKTtcbiAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQoe2ZpbmlzaGVkOiBmYWxzZX0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGltaW5nQW5pbWF0aW9uO1xuIl19