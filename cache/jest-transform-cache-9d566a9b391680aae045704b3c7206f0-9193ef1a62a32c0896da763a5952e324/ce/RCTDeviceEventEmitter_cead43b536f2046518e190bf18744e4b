a18cf57a0fb8d62ecc210e31d2d882e0










'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if ("value" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var EventEmitter = require('EventEmitter');
var EventSubscriptionVendor = require('EventSubscriptionVendor');



function checkNativeEventModule(eventType) {
  if (eventType) {
    if (eventType.lastIndexOf('statusBar', 0) === 0) {
      throw new Error(
      '`' +
      eventType +
      '` event should be registered via the StatusBarIOS module');

    }
    if (eventType.lastIndexOf('keyboard', 0) === 0) {
      throw new Error(
      '`' +
      eventType +
      '` event should be registered via the Keyboard module');

    }
    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
      throw new Error(
      '`' +
      eventType +
      '` event should be registered via the AppState module');

    }
  }
}var





RCTDeviceEventEmitter = function (_EventEmitter) {_inherits(RCTDeviceEventEmitter, _EventEmitter);


  function RCTDeviceEventEmitter() {_classCallCheck(this, RCTDeviceEventEmitter);
    var sharedSubscriber = new EventSubscriptionVendor();var _this = _possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this,
    sharedSubscriber));
    _this.sharedSubscriber = sharedSubscriber;return _this;
  }_createClass(RCTDeviceEventEmitter, [{ key: 'addListener', value: function addListener(


    eventType,
    listener,
    context)
    {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      return _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    } }, { key: 'removeAllListeners', value: function removeAllListeners(

    eventType) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    } }, { key: 'removeSubscription', value: function removeSubscription(

    subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
      }
    } }]);return RCTDeviceEventEmitter;}(EventEmitter);


module.exports = new RCTDeviceEventEmitter();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJDVERldmljZUV2ZW50RW1pdHRlci5qcyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IiLCJjaGVja05hdGl2ZUV2ZW50TW9kdWxlIiwiZXZlbnRUeXBlIiwibGFzdEluZGV4T2YiLCJFcnJvciIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsInNoYXJlZFN1YnNjcmliZXIiLCJsaXN0ZW5lciIsImNvbnRleHQiLCJfX0RFVl9fIiwic3Vic2NyaXB0aW9uIiwiZW1pdHRlciIsInJlbW92ZVN1YnNjcmlwdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFVQSxhOztBQUVBLElBQU1BLGVBQWVDLFFBQVEsY0FBUixDQUFyQjtBQUNBLElBQU1DLDBCQUEwQkQsUUFBUSx5QkFBUixDQUFoQzs7OztBQUlBLFNBQVNFLHNCQUFULENBQWdDQyxTQUFoQyxFQUFvRDtBQUNsRCxNQUFJQSxTQUFKLEVBQWU7QUFDYixRQUFJQSxVQUFVQyxXQUFWLENBQXNCLFdBQXRCLEVBQW1DLENBQW5DLE1BQTBDLENBQTlDLEVBQWlEO0FBQy9DLFlBQU0sSUFBSUMsS0FBSjtBQUNKO0FBQ0VGLGVBREY7QUFFRSxnRUFIRSxDQUFOOztBQUtEO0FBQ0QsUUFBSUEsVUFBVUMsV0FBVixDQUFzQixVQUF0QixFQUFrQyxDQUFsQyxNQUF5QyxDQUE3QyxFQUFnRDtBQUM5QyxZQUFNLElBQUlDLEtBQUo7QUFDSjtBQUNFRixlQURGO0FBRUUsNERBSEUsQ0FBTjs7QUFLRDtBQUNELFFBQUlBLGNBQWMsbUJBQWQsSUFBcUNBLGNBQWMsZUFBdkQsRUFBd0U7QUFDdEUsWUFBTSxJQUFJRSxLQUFKO0FBQ0o7QUFDRUYsZUFERjtBQUVFLDREQUhFLENBQU47O0FBS0Q7QUFDRjtBQUNGLEM7Ozs7OztBQU1LRyxxQjs7O0FBR0osbUNBQWM7QUFDWixRQUFNQyxtQkFBbUIsSUFBSU4sdUJBQUosRUFBekIsQ0FEWTtBQUVOTSxvQkFGTTtBQUdaLFVBQUtBLGdCQUFMLEdBQXdCQSxnQkFBeEIsQ0FIWTtBQUliLEc7OztBQUdDSixhO0FBQ0FLLFk7QUFDQUMsVztBQUNxQjtBQUNyQixVQUFJQyxPQUFKLEVBQWE7QUFDWFIsK0JBQXVCQyxTQUF2QjtBQUNEO0FBQ0QsdUpBQXlCQSxTQUF6QixFQUFvQ0ssUUFBcEMsRUFBOENDLE9BQTlDO0FBQ0QsSzs7QUFFa0JOLGEsRUFBb0I7QUFDckMsVUFBSU8sT0FBSixFQUFhO0FBQ1hSLCtCQUF1QkMsU0FBdkI7QUFDRDtBQUNELHVKQUF5QkEsU0FBekI7QUFDRCxLOztBQUVrQlEsZ0IsRUFBbUM7QUFDcEQsVUFBSUEsYUFBYUMsT0FBYixLQUF5QixJQUE3QixFQUFtQztBQUNqQ0QscUJBQWFDLE9BQWIsQ0FBcUJDLGtCQUFyQixDQUF3Q0YsWUFBeEM7QUFDRCxPQUZELE1BRU87QUFDTCx5SkFBeUJBLFlBQXpCO0FBQ0Q7QUFDRixLLG9DQWpDaUNaLFk7OztBQW9DcENlLE9BQU9DLE9BQVAsR0FBaUIsSUFBSVQscUJBQUosRUFBakIiLCJmaWxlIjoiUkNURGV2aWNlRXZlbnRFbWl0dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnRXZlbnRFbWl0dGVyJyk7XG5jb25zdCBFdmVudFN1YnNjcmlwdGlvblZlbmRvciA9IHJlcXVpcmUoJ0V2ZW50U3Vic2NyaXB0aW9uVmVuZG9yJyk7XG5cbmltcG9ydCB0eXBlIEVtaXR0ZXJTdWJzY3JpcHRpb24gZnJvbSAnRW1pdHRlclN1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIGNoZWNrTmF0aXZlRXZlbnRNb2R1bGUoZXZlbnRUeXBlOiA/c3RyaW5nKSB7XG4gIGlmIChldmVudFR5cGUpIHtcbiAgICBpZiAoZXZlbnRUeXBlLmxhc3RJbmRleE9mKCdzdGF0dXNCYXInLCAwKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYCcgK1xuICAgICAgICAgIGV2ZW50VHlwZSArXG4gICAgICAgICAgJ2AgZXZlbnQgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdmlhIHRoZSBTdGF0dXNCYXJJT1MgbW9kdWxlJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudFR5cGUubGFzdEluZGV4T2YoJ2tleWJvYXJkJywgMCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2AnICtcbiAgICAgICAgICBldmVudFR5cGUgK1xuICAgICAgICAgICdgIGV2ZW50IHNob3VsZCBiZSByZWdpc3RlcmVkIHZpYSB0aGUgS2V5Ym9hcmQgbW9kdWxlJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudFR5cGUgPT09ICdhcHBTdGF0ZURpZENoYW5nZScgfHwgZXZlbnRUeXBlID09PSAnbWVtb3J5V2FybmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2AnICtcbiAgICAgICAgICBldmVudFR5cGUgK1xuICAgICAgICAgICdgIGV2ZW50IHNob3VsZCBiZSByZWdpc3RlcmVkIHZpYSB0aGUgQXBwU3RhdGUgbW9kdWxlJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGVwcmVjYXRlZCAtIHN1YmNsYXNzIE5hdGl2ZUV2ZW50RW1pdHRlciB0byBjcmVhdGUgZ3JhbnVsYXIgZXZlbnQgbW9kdWxlcyBpbnN0ZWFkIG9mXG4gKiBhZGRpbmcgYWxsIGV2ZW50IGxpc3RlbmVycyBkaXJlY3RseSB0byBSQ1REZXZpY2VFdmVudEVtaXR0ZXIuXG4gKi9cbmNsYXNzIFJDVERldmljZUV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHNoYXJlZFN1YnNjcmliZXI6IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHNoYXJlZFN1YnNjcmliZXIgPSBuZXcgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IoKTtcbiAgICBzdXBlcihzaGFyZWRTdWJzY3JpYmVyKTtcbiAgICB0aGlzLnNoYXJlZFN1YnNjcmliZXIgPSBzaGFyZWRTdWJzY3JpYmVyO1xuICB9XG5cbiAgYWRkTGlzdGVuZXIoXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgbGlzdGVuZXI6IEZ1bmN0aW9uLFxuICAgIGNvbnRleHQ6ID9PYmplY3QsXG4gICk6IEVtaXR0ZXJTdWJzY3JpcHRpb24ge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjaGVja05hdGl2ZUV2ZW50TW9kdWxlKGV2ZW50VHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5hZGRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBjb250ZXh0KTtcbiAgfVxuXG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudFR5cGU6ID9zdHJpbmcpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY2hlY2tOYXRpdmVFdmVudE1vZHVsZShldmVudFR5cGUpO1xuICAgIH1cbiAgICBzdXBlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnRUeXBlKTtcbiAgfVxuXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb246IEVtaXR0ZXJTdWJzY3JpcHRpb24pIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLmVtaXR0ZXIgIT09IHRoaXMpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5lbWl0dGVyLnJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5yZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgUkNURGV2aWNlRXZlbnRFbWl0dGVyKCk7XG4iXX0=