29c91b7551f9b4af2d6f80c1cd19fc75









'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var MetroListView = require('MetroListView');
var Platform = require('Platform');
var React = require('React');
var ScrollView = require('ScrollView');
var VirtualizedSectionList = require('VirtualizedSectionList');














































































































































































var defaultProps = _extends({},
VirtualizedSectionList.defaultProps, {
  stickySectionHeadersEnabled: Platform.OS === 'ios' });var



























































SectionList = function (_React$PureComponent) {_inherits(SectionList, _React$PureComponent);function SectionList() {var _ref;var _temp, _this, _ret;_classCallCheck(this, SectionList);for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this.


















































































    _captureRef = function (ref) {



      _this._wrapperListRef = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);}_createClass(SectionList, [{ key: 'scrollToLocation', value: function scrollToLocation(params) {this._wrapperListRef.scrollToLocation(params);} }, { key: 'recordInteraction', value: function recordInteraction() {var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();listRef && listRef.recordInteraction();} }, { key: 'flashScrollIndicators', value: function flashScrollIndicators() {var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();listRef && listRef.flashScrollIndicators();} }, { key: 'getScrollResponder', value: function getScrollResponder() {var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();if (listRef) {return listRef.getScrollResponder();}} }, { key: 'getScrollableNode', value: function getScrollableNode() {var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();if (listRef) {return listRef.getScrollableNode();}} }, { key: 'setNativeProps', value: function setNativeProps(props) {var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();if (listRef) {listRef.setNativeProps(props);}} }, { key: 'render', value: function render() {var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;return React.createElement(List, _extends({}, this.props, { ref: this._captureRef }));} }]);return SectionList;}(React.PureComponent);SectionList.defaultProps = defaultProps;


module.exports = SectionList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlY3Rpb25MaXN0LmpzIl0sIm5hbWVzIjpbIk1ldHJvTGlzdFZpZXciLCJyZXF1aXJlIiwiUGxhdGZvcm0iLCJSZWFjdCIsIlNjcm9sbFZpZXciLCJWaXJ0dWFsaXplZFNlY3Rpb25MaXN0IiwiZGVmYXVsdFByb3BzIiwic3RpY2t5U2VjdGlvbkhlYWRlcnNFbmFibGVkIiwiT1MiLCJTZWN0aW9uTGlzdCIsIl9jYXB0dXJlUmVmIiwiX3dyYXBwZXJMaXN0UmVmIiwicmVmIiwicGFyYW1zIiwic2Nyb2xsVG9Mb2NhdGlvbiIsImxpc3RSZWYiLCJnZXRMaXN0UmVmIiwicmVjb3JkSW50ZXJhY3Rpb24iLCJmbGFzaFNjcm9sbEluZGljYXRvcnMiLCJnZXRTY3JvbGxSZXNwb25kZXIiLCJnZXRTY3JvbGxhYmxlTm9kZSIsInByb3BzIiwic2V0TmF0aXZlUHJvcHMiLCJMaXN0IiwibGVnYWN5SW1wbGVtZW50YXRpb24iLCJQdXJlQ29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBU0EsYTs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsZUFBUixDQUF0QjtBQUNBLElBQU1DLFdBQVdELFFBQVEsVUFBUixDQUFqQjtBQUNBLElBQU1FLFFBQVFGLFFBQVEsT0FBUixDQUFkO0FBQ0EsSUFBTUcsYUFBYUgsUUFBUSxZQUFSLENBQW5CO0FBQ0EsSUFBTUkseUJBQXlCSixRQUFRLHdCQUFSLENBQS9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0tBLElBQU1LO0FBQ0RELHVCQUF1QkMsWUFEdEI7QUFFSkMsK0JBQTZCTCxTQUFTTSxFQUFULEtBQWdCLEtBRnpDLEdBQU4sQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOERNQyxXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1GSkMsZSxHQUFjLGVBQU87Ozs7QUFJbkIsWUFBS0MsZUFBTCxHQUF1QkMsR0FBdkI7QUFDRCxLLDBJQXZFZ0JDLE0sRUFNZCxDQUNELEtBQUtGLGVBQUwsQ0FBcUJHLGdCQUFyQixDQUFzQ0QsTUFBdEMsRUFDRCxDLG9FQU9tQixDQUNsQixJQUFNRSxVQUFVLEtBQUtKLGVBQUwsSUFBd0IsS0FBS0EsZUFBTCxDQUFxQkssVUFBckIsRUFBeEMsQ0FFQUQsV0FBV0EsUUFBUUUsaUJBQVIsRUFBWCxDQUNELEMsNEVBT3VCLENBQ3RCLElBQU1GLFVBQVUsS0FBS0osZUFBTCxJQUF3QixLQUFLQSxlQUFMLENBQXFCSyxVQUFyQixFQUF4QyxDQUNBRCxXQUFXQSxRQUFRRyxxQkFBUixFQUFYLENBQ0QsQyxzRUFLaUMsQ0FDaEMsSUFBTUgsVUFBVSxLQUFLSixlQUFMLElBQXdCLEtBQUtBLGVBQUwsQ0FBcUJLLFVBQXJCLEVBQXhDLENBQ0EsSUFBSUQsT0FBSixFQUFhLENBQ1gsT0FBT0EsUUFBUUksa0JBQVIsRUFBUCxDQUNELENBQ0YsQyxvRUFFbUIsQ0FDbEIsSUFBTUosVUFBVSxLQUFLSixlQUFMLElBQXdCLEtBQUtBLGVBQUwsQ0FBcUJLLFVBQXJCLEVBQXhDLENBQ0EsSUFBSUQsT0FBSixFQUFhLENBQ1gsT0FBT0EsUUFBUUssaUJBQVIsRUFBUCxDQUNELENBQ0YsQyw0REFFY0MsSyxFQUFlLENBQzVCLElBQU1OLFVBQVUsS0FBS0osZUFBTCxJQUF3QixLQUFLQSxlQUFMLENBQXFCSyxVQUFyQixFQUF4QyxDQUNBLElBQUlELE9BQUosRUFBYSxDQUNYQSxRQUFRTyxjQUFSLENBQXVCRCxLQUF2QixFQUNELENBQ0YsQyw4Q0FFUSxDQUNQLElBQU1FLE9BQU8sS0FBS0YsS0FBTCxDQUFXRyxvQkFBWCxHQUNUeEIsYUFEUyxHQUVUSyxzQkFGSixDQU1BLE9BQU8sb0JBQUMsSUFBRCxlQUFVLEtBQUtnQixLQUFmLElBQXNCLEtBQUssS0FBS1gsV0FBaEMsSUFBUCxDQUNELEMsMEJBaEZtRFAsTUFBTXNCLGEsRUFBdERoQixXLENBS0dILFksR0FBNkJBLFk7OztBQXNGdENvQixPQUFPQyxPQUFQLEdBQWlCbEIsV0FBakIiLCJmaWxlIjoiU2VjdGlvbkxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTWV0cm9MaXN0VmlldyA9IHJlcXVpcmUoJ01ldHJvTGlzdFZpZXcnKTtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnUGxhdGZvcm0nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgnUmVhY3QnKTtcbmNvbnN0IFNjcm9sbFZpZXcgPSByZXF1aXJlKCdTY3JvbGxWaWV3Jyk7XG5jb25zdCBWaXJ0dWFsaXplZFNlY3Rpb25MaXN0ID0gcmVxdWlyZSgnVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCcpO1xuXG5pbXBvcnQgdHlwZSB7Vmlld1Rva2VufSBmcm9tICdWaWV3YWJpbGl0eUhlbHBlcic7XG5pbXBvcnQgdHlwZSB7UHJvcHMgYXMgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdFByb3BzfSBmcm9tICdWaXJ0dWFsaXplZFNlY3Rpb25MaXN0JztcblxudHlwZSBJdGVtID0gYW55O1xuXG5leHBvcnQgdHlwZSBTZWN0aW9uQmFzZTxTZWN0aW9uSXRlbVQ+ID0ge1xuICAvKipcbiAgICogVGhlIGRhdGEgZm9yIHJlbmRlcmluZyBpdGVtcyBpbiB0aGlzIHNlY3Rpb24uXG4gICAqL1xuICBkYXRhOiAkUmVhZE9ubHlBcnJheTxTZWN0aW9uSXRlbVQ+LFxuICAvKipcbiAgICogT3B0aW9uYWwga2V5IHRvIGtlZXAgdHJhY2sgb2Ygc2VjdGlvbiByZS1vcmRlcmluZy4gSWYgeW91IGRvbid0IHBsYW4gb24gcmUtb3JkZXJpbmcgc2VjdGlvbnMsXG4gICAqIHRoZSBhcnJheSBpbmRleCB3aWxsIGJlIHVzZWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIGtleT86IHN0cmluZyxcblxuICAvLyBPcHRpb25hbCBwcm9wcyB3aWxsIG92ZXJyaWRlIGxpc3Qtd2lkZSBwcm9wcyBqdXN0IGZvciB0aGlzIHNlY3Rpb24uXG4gIHJlbmRlckl0ZW0/OiA/KGluZm86IHtcbiAgICBpdGVtOiBTZWN0aW9uSXRlbVQsXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBzZWN0aW9uOiBTZWN0aW9uQmFzZTxTZWN0aW9uSXRlbVQ+LFxuICAgIHNlcGFyYXRvcnM6IHtcbiAgICAgIGhpZ2hsaWdodDogKCkgPT4gdm9pZCxcbiAgICAgIHVuaGlnaGxpZ2h0OiAoKSA9PiB2b2lkLFxuICAgICAgdXBkYXRlUHJvcHM6IChzZWxlY3Q6ICdsZWFkaW5nJyB8ICd0cmFpbGluZycsIG5ld1Byb3BzOiBPYmplY3QpID0+IHZvaWQsXG4gICAgfSxcbiAgfSkgPT4gP1JlYWN0LkVsZW1lbnQ8YW55PixcbiAgSXRlbVNlcGFyYXRvckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIGtleUV4dHJhY3Rvcj86IChpdGVtOiBTZWN0aW9uSXRlbVQpID0+IHN0cmluZyxcblxuICAvLyBUT0RPOiBzdXBwb3J0IG1vcmUgb3B0aW9uYWwvb3ZlcnJpZGUgcHJvcHNcbiAgLy8gb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZD86IC4uLlxufTtcblxudHlwZSBSZXF1aXJlZFByb3BzPFNlY3Rpb25UOiBTZWN0aW9uQmFzZTxhbnk+PiA9IHtcbiAgLyoqXG4gICAqIFRoZSBhY3R1YWwgZGF0YSB0byByZW5kZXIsIGFraW4gdG8gdGhlIGBkYXRhYCBwcm9wIGluIFtgPEZsYXRMaXN0PmBdKC9yZWFjdC1uYXRpdmUvZG9jcy9mbGF0bGlzdC5odG1sKS5cbiAgICpcbiAgICogR2VuZXJhbCBzaGFwZTpcbiAgICpcbiAgICogICAgIHNlY3Rpb25zOiAkUmVhZE9ubHlBcnJheTx7XG4gICAqICAgICAgIGRhdGE6ICRSZWFkT25seUFycmF5PFNlY3Rpb25JdGVtPixcbiAgICogICAgICAgcmVuZGVySXRlbT86ICh7aXRlbTogU2VjdGlvbkl0ZW0sIC4uLn0pID0+ID9SZWFjdC5FbGVtZW50PCo+LFxuICAgKiAgICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50PzogP1JlYWN0Q2xhc3M8e2hpZ2hsaWdodGVkOiBib29sZWFuLCAuLi59PixcbiAgICogICAgIH0+XG4gICAqL1xuICBzZWN0aW9uczogJFJlYWRPbmx5QXJyYXk8U2VjdGlvblQ+LFxufTtcblxudHlwZSBPcHRpb25hbFByb3BzPFNlY3Rpb25UOiBTZWN0aW9uQmFzZTxhbnk+PiA9IHtcbiAgLyoqXG4gICAqIERlZmF1bHQgcmVuZGVyZXIgZm9yIGV2ZXJ5IGl0ZW0gaW4gZXZlcnkgc2VjdGlvbi4gQ2FuIGJlIG92ZXItcmlkZGVuIG9uIGEgcGVyLXNlY3Rpb24gYmFzaXMuXG4gICAqL1xuICByZW5kZXJJdGVtPzogKGluZm86IHtcbiAgICBpdGVtOiBJdGVtLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgc2VjdGlvbjogU2VjdGlvblQsXG4gICAgc2VwYXJhdG9yczoge1xuICAgICAgaGlnaGxpZ2h0OiAoKSA9PiB2b2lkLFxuICAgICAgdW5oaWdobGlnaHQ6ICgpID0+IHZvaWQsXG4gICAgICB1cGRhdGVQcm9wczogKHNlbGVjdDogJ2xlYWRpbmcnIHwgJ3RyYWlsaW5nJywgbmV3UHJvcHM6IE9iamVjdCkgPT4gdm9pZCxcbiAgICB9LFxuICB9KSA9PiA/UmVhY3QuRWxlbWVudDxhbnk+LFxuICAvKipcbiAgICogUmVuZGVyZWQgaW4gYmV0d2VlbiBlYWNoIGl0ZW0sIGJ1dCBub3QgYXQgdGhlIHRvcCBvciBib3R0b20uIEJ5IGRlZmF1bHQsIGBoaWdobGlnaHRlZGAsXG4gICAqIGBzZWN0aW9uYCwgYW5kIGBbbGVhZGluZy90cmFpbGluZ11bSXRlbS9TZXBhcmF0b3JdYCBwcm9wcyBhcmUgcHJvdmlkZWQuIGByZW5kZXJJdGVtYCBwcm92aWRlc1xuICAgKiBgc2VwYXJhdG9ycy5oaWdobGlnaHRgL2B1bmhpZ2hsaWdodGAgd2hpY2ggd2lsbCB1cGRhdGUgdGhlIGBoaWdobGlnaHRlZGAgcHJvcCwgYnV0IHlvdSBjYW4gYWxzb1xuICAgKiBhZGQgY3VzdG9tIHByb3BzIHdpdGggYHNlcGFyYXRvcnMudXBkYXRlUHJvcHNgLlxuICAgKi9cbiAgSXRlbVNlcGFyYXRvckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgdGhlIGxpc3QuIENhbiBiZSBhIFJlYWN0IENvbXBvbmVudCBDbGFzcywgYSByZW5kZXIgZnVuY3Rpb24sIG9yXG4gICAqIGEgcmVuZGVyZWQgZWxlbWVudC5cbiAgICovXG4gIExpc3RIZWFkZXJDb21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gIC8qKlxuICAgKiBSZW5kZXJlZCB3aGVuIHRoZSBsaXN0IGlzIGVtcHR5LiBDYW4gYmUgYSBSZWFjdCBDb21wb25lbnQgQ2xhc3MsIGEgcmVuZGVyIGZ1bmN0aW9uLCBvclxuICAgKiBhIHJlbmRlcmVkIGVsZW1lbnQuXG4gICAqL1xuICBMaXN0RW1wdHlDb21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdmVyeSBlbmQgb2YgdGhlIGxpc3QuIENhbiBiZSBhIFJlYWN0IENvbXBvbmVudCBDbGFzcywgYSByZW5kZXIgZnVuY3Rpb24sIG9yXG4gICAqIGEgcmVuZGVyZWQgZWxlbWVudC5cbiAgICovXG4gIExpc3RGb290ZXJDb21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdG9wIGFuZCBib3R0b20gb2YgZWFjaCBzZWN0aW9uIChub3RlIHRoaXMgaXMgZGlmZmVyZW50IGZyb21cbiAgICogYEl0ZW1TZXBhcmF0b3JDb21wb25lbnRgIHdoaWNoIGlzIG9ubHkgcmVuZGVyZWQgYmV0d2VlbiBpdGVtcykuIFRoZXNlIGFyZSBpbnRlbmRlZCB0byBzZXBhcmF0ZVxuICAgKiBzZWN0aW9ucyBmcm9tIHRoZSBoZWFkZXJzIGFib3ZlIGFuZCBiZWxvdyBhbmQgdHlwaWNhbGx5IGhhdmUgdGhlIHNhbWUgaGlnaGxpZ2h0IHJlc3BvbnNlIGFzXG4gICAqIGBJdGVtU2VwYXJhdG9yQ29tcG9uZW50YC4gQWxzbyByZWNlaXZlcyBgaGlnaGxpZ2h0ZWRgLCBgW2xlYWRpbmcvdHJhaWxpbmddW0l0ZW0vU2VwYXJhdG9yXWAsXG4gICAqIGFuZCBhbnkgY3VzdG9tIHByb3BzIGZyb20gYHNlcGFyYXRvcnMudXBkYXRlUHJvcHNgLlxuICAgKi9cbiAgU2VjdGlvblNlcGFyYXRvckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIC8qKlxuICAgKiBBIG1hcmtlciBwcm9wZXJ0eSBmb3IgdGVsbGluZyB0aGUgbGlzdCB0byByZS1yZW5kZXIgKHNpbmNlIGl0IGltcGxlbWVudHMgYFB1cmVDb21wb25lbnRgKS4gSWZcbiAgICogYW55IG9mIHlvdXIgYHJlbmRlckl0ZW1gLCBIZWFkZXIsIEZvb3RlciwgZXRjLiBmdW5jdGlvbnMgZGVwZW5kIG9uIGFueXRoaW5nIG91dHNpZGUgb2YgdGhlXG4gICAqIGBkYXRhYCBwcm9wLCBzdGljayBpdCBoZXJlIGFuZCB0cmVhdCBpdCBpbW11dGFibHkuXG4gICAqL1xuICBleHRyYURhdGE/OiBhbnksXG4gIC8qKlxuICAgKiBIb3cgbWFueSBpdGVtcyB0byByZW5kZXIgaW4gdGhlIGluaXRpYWwgYmF0Y2guIFRoaXMgc2hvdWxkIGJlIGVub3VnaCB0byBmaWxsIHRoZSBzY3JlZW4gYnV0IG5vdFxuICAgKiBtdWNoIG1vcmUuIE5vdGUgdGhlc2UgaXRlbXMgd2lsbCBuZXZlciBiZSB1bm1vdW50ZWQgYXMgcGFydCBvZiB0aGUgd2luZG93ZWQgcmVuZGVyaW5nIGluIG9yZGVyXG4gICAqIHRvIGltcHJvdmUgcGVyY2VpdmVkIHBlcmZvcm1hbmNlIG9mIHNjcm9sbC10by10b3AgYWN0aW9ucy5cbiAgICovXG4gIGluaXRpYWxOdW1Ub1JlbmRlcjogbnVtYmVyLFxuICAvKipcbiAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBzY3JvbGwuIFVzZXMgc2NhbGUgdHJhbnNmb3JtcyBvZiAtMS5cbiAgICovXG4gIGludmVydGVkPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgYSB1bmlxdWUga2V5IGZvciBhIGdpdmVuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCBpbmRleC4gS2V5IGlzIHVzZWQgZm9yIGNhY2hpbmdcbiAgICogYW5kIGFzIHRoZSByZWFjdCBrZXkgdG8gdHJhY2sgaXRlbSByZS1vcmRlcmluZy4gVGhlIGRlZmF1bHQgZXh0cmFjdG9yIGNoZWNrcyBpdGVtLmtleSwgdGhlblxuICAgKiBmYWxscyBiYWNrIHRvIHVzaW5nIHRoZSBpbmRleCwgbGlrZSByZWFjdCBkb2VzLiBOb3RlIHRoYXQgdGhpcyBzZXRzIGtleXMgZm9yIGVhY2ggaXRlbSwgYnV0XG4gICAqIGVhY2ggb3ZlcmFsbCBzZWN0aW9uIHN0aWxsIG5lZWRzIGl0cyBvd24ga2V5LlxuICAgKi9cbiAga2V5RXh0cmFjdG9yOiAoaXRlbTogSXRlbSwgaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGVkIG9uY2Ugd2hlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGdldHMgd2l0aGluIGBvbkVuZFJlYWNoZWRUaHJlc2hvbGRgIG9mIHRoZSByZW5kZXJlZFxuICAgKiBjb250ZW50LlxuICAgKi9cbiAgb25FbmRSZWFjaGVkPzogPyhpbmZvOiB7ZGlzdGFuY2VGcm9tRW5kOiBudW1iZXJ9KSA9PiB2b2lkLFxuICAvKipcbiAgICogSG93IGZhciBmcm9tIHRoZSBlbmQgKGluIHVuaXRzIG9mIHZpc2libGUgbGVuZ3RoIG9mIHRoZSBsaXN0KSB0aGUgYm90dG9tIGVkZ2Ugb2YgdGhlXG4gICAqIGxpc3QgbXVzdCBiZSBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQgdG8gdHJpZ2dlciB0aGUgYG9uRW5kUmVhY2hlZGAgY2FsbGJhY2suXG4gICAqIFRodXMgYSB2YWx1ZSBvZiAwLjUgd2lsbCB0cmlnZ2VyIGBvbkVuZFJlYWNoZWRgIHdoZW4gdGhlIGVuZCBvZiB0aGUgY29udGVudCBpc1xuICAgKiB3aXRoaW4gaGFsZiB0aGUgdmlzaWJsZSBsZW5ndGggb2YgdGhlIGxpc3QuXG4gICAqL1xuICBvbkVuZFJlYWNoZWRUaHJlc2hvbGQ/OiA/bnVtYmVyLFxuICAvKipcbiAgICogSWYgcHJvdmlkZWQsIGEgc3RhbmRhcmQgUmVmcmVzaENvbnRyb2wgd2lsbCBiZSBhZGRlZCBmb3IgXCJQdWxsIHRvIFJlZnJlc2hcIiBmdW5jdGlvbmFsaXR5LiBNYWtlXG4gICAqIHN1cmUgdG8gYWxzbyBzZXQgdGhlIGByZWZyZXNoaW5nYCBwcm9wIGNvcnJlY3RseS5cbiAgICovXG4gIG9uUmVmcmVzaD86ID8oKSA9PiB2b2lkLFxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXdhYmlsaXR5IG9mIHJvd3MgY2hhbmdlcywgYXMgZGVmaW5lZCBieSB0aGVcbiAgICogYHZpZXdhYmlsaXR5Q29uZmlnYCBwcm9wLlxuICAgKi9cbiAgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZD86ID8oaW5mbzoge1xuICAgIHZpZXdhYmxlSXRlbXM6IEFycmF5PFZpZXdUb2tlbj4sXG4gICAgY2hhbmdlZDogQXJyYXk8Vmlld1Rva2VuPixcbiAgfSkgPT4gdm9pZCxcbiAgLyoqXG4gICAqIFNldCB0aGlzIHRydWUgd2hpbGUgd2FpdGluZyBmb3IgbmV3IGRhdGEgZnJvbSBhIHJlZnJlc2guXG4gICAqL1xuICByZWZyZXNoaW5nPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBOb3RlOiBtYXkgaGF2ZSBidWdzIChtaXNzaW5nIGNvbnRlbnQpIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyAtIHVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgKlxuICAgKiBUaGlzIG1heSBpbXByb3ZlIHNjcm9sbCBwZXJmb3JtYW5jZSBmb3IgbGFyZ2UgbGlzdHMuXG4gICAqL1xuICByZW1vdmVDbGlwcGVkU3Vidmlld3M/OiBib29sZWFuLFxuICAvKipcbiAgICogUmVuZGVyZWQgYXQgdGhlIHRvcCBvZiBlYWNoIHNlY3Rpb24uIFRoZXNlIHN0aWNrIHRvIHRoZSB0b3Agb2YgdGhlIGBTY3JvbGxWaWV3YCBieSBkZWZhdWx0IG9uXG4gICAqIGlPUy4gU2VlIGBzdGlja3lTZWN0aW9uSGVhZGVyc0VuYWJsZWRgLlxuICAgKi9cbiAgcmVuZGVyU2VjdGlvbkhlYWRlcj86ID8oaW5mbzoge3NlY3Rpb246IFNlY3Rpb25UfSkgPT4gP1JlYWN0LkVsZW1lbnQ8YW55PixcbiAgLyoqXG4gICAqIFJlbmRlcmVkIGF0IHRoZSBib3R0b20gb2YgZWFjaCBzZWN0aW9uLlxuICAgKi9cbiAgcmVuZGVyU2VjdGlvbkZvb3Rlcj86ID8oaW5mbzoge3NlY3Rpb246IFNlY3Rpb25UfSkgPT4gP1JlYWN0LkVsZW1lbnQ8YW55PixcbiAgLyoqXG4gICAqIE1ha2VzIHNlY3Rpb24gaGVhZGVycyBzdGljayB0byB0aGUgdG9wIG9mIHRoZSBzY3JlZW4gdW50aWwgdGhlIG5leHQgb25lIHB1c2hlcyBpdCBvZmYuIE9ubHlcbiAgICogZW5hYmxlZCBieSBkZWZhdWx0IG9uIGlPUyBiZWNhdXNlIHRoYXQgaXMgdGhlIHBsYXRmb3JtIHN0YW5kYXJkIHRoZXJlLlxuICAgKi9cbiAgc3RpY2t5U2VjdGlvbkhlYWRlcnNFbmFibGVkPzogYm9vbGVhbixcblxuICBsZWdhY3lJbXBsZW1lbnRhdGlvbj86ID9ib29sZWFuLFxufTtcblxuZXhwb3J0IHR5cGUgUHJvcHM8U2VjdGlvblQ+ID0gUmVxdWlyZWRQcm9wczxTZWN0aW9uVD4gJlxuICBPcHRpb25hbFByb3BzPFNlY3Rpb25UPiAmXG4gIFZpcnR1YWxpemVkU2VjdGlvbkxpc3RQcm9wczxTZWN0aW9uVD47XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgLi4uVmlydHVhbGl6ZWRTZWN0aW9uTGlzdC5kZWZhdWx0UHJvcHMsXG4gIHN0aWNreVNlY3Rpb25IZWFkZXJzRW5hYmxlZDogUGxhdGZvcm0uT1MgPT09ICdpb3MnLFxufTtcblxudHlwZSBEZWZhdWx0UHJvcHMgPSB0eXBlb2YgZGVmYXVsdFByb3BzO1xuXG4vKipcbiAqIEEgcGVyZm9ybWFudCBpbnRlcmZhY2UgZm9yIHJlbmRlcmluZyBzZWN0aW9uZWQgbGlzdHMsIHN1cHBvcnRpbmcgdGhlIG1vc3QgaGFuZHkgZmVhdHVyZXM6XG4gKlxuICogIC0gRnVsbHkgY3Jvc3MtcGxhdGZvcm0uXG4gKiAgLSBDb25maWd1cmFibGUgdmlld2FiaWxpdHkgY2FsbGJhY2tzLlxuICogIC0gTGlzdCBoZWFkZXIgc3VwcG9ydC5cbiAqICAtIExpc3QgZm9vdGVyIHN1cHBvcnQuXG4gKiAgLSBJdGVtIHNlcGFyYXRvciBzdXBwb3J0LlxuICogIC0gU2VjdGlvbiBoZWFkZXIgc3VwcG9ydC5cbiAqICAtIFNlY3Rpb24gc2VwYXJhdG9yIHN1cHBvcnQuXG4gKiAgLSBIZXRlcm9nZW5lb3VzIGRhdGEgYW5kIGl0ZW0gcmVuZGVyaW5nIHN1cHBvcnQuXG4gKiAgLSBQdWxsIHRvIFJlZnJlc2guXG4gKiAgLSBTY3JvbGwgbG9hZGluZy5cbiAqXG4gKiBJZiB5b3UgZG9uJ3QgbmVlZCBzZWN0aW9uIHN1cHBvcnQgYW5kIHdhbnQgYSBzaW1wbGVyIGludGVyZmFjZSwgdXNlXG4gKiBbYDxGbGF0TGlzdD5gXSgvcmVhY3QtbmF0aXZlL2RvY3MvZmxhdGxpc3QuaHRtbCkuXG4gKlxuICogU2ltcGxlIEV4YW1wbGVzOlxuICpcbiAqICAgICA8U2VjdGlvbkxpc3RcbiAqICAgICAgIHJlbmRlckl0ZW09eyh7aXRlbX0pID0+IDxMaXN0SXRlbSB0aXRsZT17aXRlbX0gLz59XG4gKiAgICAgICByZW5kZXJTZWN0aW9uSGVhZGVyPXsoe3NlY3Rpb259KSA9PiA8SGVhZGVyIHRpdGxlPXtzZWN0aW9uLnRpdGxlfSAvPn1cbiAqICAgICAgIHNlY3Rpb25zPXtbIC8vIGhvbW9nZW5lb3VzIHJlbmRlcmluZyBiZXR3ZWVuIHNlY3Rpb25zXG4gKiAgICAgICAgIHtkYXRhOiBbLi4uXSwgdGl0bGU6IC4uLn0sXG4gKiAgICAgICAgIHtkYXRhOiBbLi4uXSwgdGl0bGU6IC4uLn0sXG4gKiAgICAgICAgIHtkYXRhOiBbLi4uXSwgdGl0bGU6IC4uLn0sXG4gKiAgICAgICBdfVxuICogICAgIC8+XG4gKlxuICogICAgIDxTZWN0aW9uTGlzdFxuICogICAgICAgc2VjdGlvbnM9e1sgLy8gaGV0ZXJvZ2VuZW91cyByZW5kZXJpbmcgYmV0d2VlbiBzZWN0aW9uc1xuICogICAgICAgICB7ZGF0YTogWy4uLl0sIHJlbmRlckl0ZW06IC4uLn0sXG4gKiAgICAgICAgIHtkYXRhOiBbLi4uXSwgcmVuZGVySXRlbTogLi4ufSxcbiAqICAgICAgICAge2RhdGE6IFsuLi5dLCByZW5kZXJJdGVtOiAuLi59LFxuICogICAgICAgXX1cbiAqICAgICAvPlxuICpcbiAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSB3cmFwcGVyIGFyb3VuZCBbYDxWaXJ0dWFsaXplZExpc3Q+YF0oZG9jcy92aXJ0dWFsaXplZGxpc3QuaHRtbCksXG4gKiBhbmQgdGh1cyBpbmhlcml0cyBpdHMgcHJvcHMgKGFzIHdlbGwgYXMgdGhvc2Ugb2YgYFNjcm9sbFZpZXdgKSB0aGF0IGFyZW4ndCBleHBsaWNpdGx5IGxpc3RlZFxuICogaGVyZSwgYWxvbmcgd2l0aCB0aGUgZm9sbG93aW5nIGNhdmVhdHM6XG4gKlxuICogLSBJbnRlcm5hbCBzdGF0ZSBpcyBub3QgcHJlc2VydmVkIHdoZW4gY29udGVudCBzY3JvbGxzIG91dCBvZiB0aGUgcmVuZGVyIHdpbmRvdy4gTWFrZSBzdXJlIGFsbFxuICogICB5b3VyIGRhdGEgaXMgY2FwdHVyZWQgaW4gdGhlIGl0ZW0gZGF0YSBvciBleHRlcm5hbCBzdG9yZXMgbGlrZSBGbHV4LCBSZWR1eCwgb3IgUmVsYXkuXG4gKiAtIFRoaXMgaXMgYSBgUHVyZUNvbXBvbmVudGAgd2hpY2ggbWVhbnMgdGhhdCBpdCB3aWxsIG5vdCByZS1yZW5kZXIgaWYgYHByb3BzYCByZW1haW4gc2hhbGxvdy1cbiAqICAgZXF1YWwuIE1ha2Ugc3VyZSB0aGF0IGV2ZXJ5dGhpbmcgeW91ciBgcmVuZGVySXRlbWAgZnVuY3Rpb24gZGVwZW5kcyBvbiBpcyBwYXNzZWQgYXMgYSBwcm9wXG4gKiAgIChlLmcuIGBleHRyYURhdGFgKSB0aGF0IGlzIG5vdCBgPT09YCBhZnRlciB1cGRhdGVzLCBvdGhlcndpc2UgeW91ciBVSSBtYXkgbm90IHVwZGF0ZSBvblxuICogICBjaGFuZ2VzLiBUaGlzIGluY2x1ZGVzIHRoZSBgZGF0YWAgcHJvcCBhbmQgcGFyZW50IGNvbXBvbmVudCBzdGF0ZS5cbiAqIC0gSW4gb3JkZXIgdG8gY29uc3RyYWluIG1lbW9yeSBhbmQgZW5hYmxlIHNtb290aCBzY3JvbGxpbmcsIGNvbnRlbnQgaXMgcmVuZGVyZWQgYXN5bmNocm9ub3VzbHlcbiAqICAgb2Zmc2NyZWVuLiBUaGlzIG1lYW5zIGl0J3MgcG9zc2libGUgdG8gc2Nyb2xsIGZhc3RlciB0aGFuIHRoZSBmaWxsIHJhdGUgYW5kIG1vbWVudGFyaWx5IHNlZVxuICogICBibGFuayBjb250ZW50LiBUaGlzIGlzIGEgdHJhZGVvZmYgdGhhdCBjYW4gYmUgYWRqdXN0ZWQgdG8gc3VpdCB0aGUgbmVlZHMgb2YgZWFjaCBhcHBsaWNhdGlvbixcbiAqICAgYW5kIHdlIGFyZSB3b3JraW5nIG9uIGltcHJvdmluZyBpdCBiZWhpbmQgdGhlIHNjZW5lcy5cbiAqIC0gQnkgZGVmYXVsdCwgdGhlIGxpc3QgbG9va3MgZm9yIGEgYGtleWAgcHJvcCBvbiBlYWNoIGl0ZW0gYW5kIHVzZXMgdGhhdCBmb3IgdGhlIFJlYWN0IGtleS5cbiAqICAgQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBwcm92aWRlIGEgY3VzdG9tIGBrZXlFeHRyYWN0b3JgIHByb3AuXG4gKlxuICovXG5jbGFzcyBTZWN0aW9uTGlzdDxTZWN0aW9uVDogU2VjdGlvbkJhc2U8YW55Pj4gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFxuICBQcm9wczxTZWN0aW9uVD4sXG4gIHZvaWQsXG4+IHtcbiAgcHJvcHM6IFByb3BzPFNlY3Rpb25UPjtcbiAgc3RhdGljIGRlZmF1bHRQcm9wczogRGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRvIHRoZSBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgYHNlY3Rpb25JbmRleGAgYW5kIGBpdGVtSW5kZXhgICh3aXRoaW4gdGhlIHNlY3Rpb24pXG4gICAqIHBvc2l0aW9uZWQgaW4gdGhlIHZpZXdhYmxlIGFyZWEgc3VjaCB0aGF0IGB2aWV3UG9zaXRpb25gIDAgcGxhY2VzIGl0IGF0IHRoZSB0b3AgKGFuZCBtYXkgYmVcbiAgICogY292ZXJlZCBieSBhIHN0aWNreSBoZWFkZXIpLCAxIGF0IHRoZSBib3R0b20sIGFuZCAwLjUgY2VudGVyZWQgaW4gdGhlIG1pZGRsZS4gYHZpZXdPZmZzZXRgIGlzIGFcbiAgICogZml4ZWQgbnVtYmVyIG9mIHBpeGVscyB0byBvZmZzZXQgdGhlIGZpbmFsIHRhcmdldCBwb3NpdGlvbiwgZS5nLiB0byBjb21wZW5zYXRlIGZvciBzdGlja3lcbiAgICogaGVhZGVycy5cbiAgICpcbiAgICogTm90ZTogY2Fubm90IHNjcm9sbCB0byBsb2NhdGlvbnMgb3V0c2lkZSB0aGUgcmVuZGVyIHdpbmRvdyB3aXRob3V0IHNwZWNpZnlpbmcgdGhlXG4gICAqIGBnZXRJdGVtTGF5b3V0YCBwcm9wLlxuICAgKi9cbiAgc2Nyb2xsVG9Mb2NhdGlvbihwYXJhbXM6IHtcbiAgICBhbmltYXRlZD86ID9ib29sZWFuLFxuICAgIGl0ZW1JbmRleDogbnVtYmVyLFxuICAgIHNlY3Rpb25JbmRleDogbnVtYmVyLFxuICAgIHZpZXdPZmZzZXQ/OiBudW1iZXIsXG4gICAgdmlld1Bvc2l0aW9uPzogbnVtYmVyLFxuICB9KSB7XG4gICAgdGhpcy5fd3JhcHBlckxpc3RSZWYuc2Nyb2xsVG9Mb2NhdGlvbihwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBsaXN0IGFuIGludGVyYWN0aW9uIGhhcyBvY2N1cnJlZCwgd2hpY2ggc2hvdWxkIHRyaWdnZXIgdmlld2FiaWxpdHkgY2FsY3VsYXRpb25zLCBlLmcuXG4gICAqIGlmIGB3YWl0Rm9ySW50ZXJhY3Rpb25zYCBpcyB0cnVlIGFuZCB0aGUgdXNlciBoYXMgbm90IHNjcm9sbGVkLiBUaGlzIGlzIHR5cGljYWxseSBjYWxsZWQgYnlcbiAgICogdGFwcyBvbiBpdGVtcyBvciBieSBuYXZpZ2F0aW9uIGFjdGlvbnMuXG4gICAqL1xuICByZWNvcmRJbnRlcmFjdGlvbigpIHtcbiAgICBjb25zdCBsaXN0UmVmID0gdGhpcy5fd3JhcHBlckxpc3RSZWYgJiYgdGhpcy5fd3JhcHBlckxpc3RSZWYuZ2V0TGlzdFJlZigpO1xuICAgIC8vICRGbG93Rml4TWUgRm91bmQgd2hlbiB0eXBpbmcgTGlzdFZpZXdcbiAgICBsaXN0UmVmICYmIGxpc3RSZWYucmVjb3JkSW50ZXJhY3Rpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgc2Nyb2xsIGluZGljYXRvcnMgbW9tZW50YXJpbHkuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGZsYXNoU2Nyb2xsSW5kaWNhdG9ycygpIHtcbiAgICBjb25zdCBsaXN0UmVmID0gdGhpcy5fd3JhcHBlckxpc3RSZWYgJiYgdGhpcy5fd3JhcHBlckxpc3RSZWYuZ2V0TGlzdFJlZigpO1xuICAgIGxpc3RSZWYgJiYgbGlzdFJlZi5mbGFzaFNjcm9sbEluZGljYXRvcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGhhbmRsZSB0byB0aGUgdW5kZXJseWluZyBzY3JvbGwgcmVzcG9uZGVyLlxuICAgKi9cbiAgZ2V0U2Nyb2xsUmVzcG9uZGVyKCk6ID9TY3JvbGxWaWV3IHtcbiAgICBjb25zdCBsaXN0UmVmID0gdGhpcy5fd3JhcHBlckxpc3RSZWYgJiYgdGhpcy5fd3JhcHBlckxpc3RSZWYuZ2V0TGlzdFJlZigpO1xuICAgIGlmIChsaXN0UmVmKSB7XG4gICAgICByZXR1cm4gbGlzdFJlZi5nZXRTY3JvbGxSZXNwb25kZXIoKTtcbiAgICB9XG4gIH1cblxuICBnZXRTY3JvbGxhYmxlTm9kZSgpIHtcbiAgICBjb25zdCBsaXN0UmVmID0gdGhpcy5fd3JhcHBlckxpc3RSZWYgJiYgdGhpcy5fd3JhcHBlckxpc3RSZWYuZ2V0TGlzdFJlZigpO1xuICAgIGlmIChsaXN0UmVmKSB7XG4gICAgICByZXR1cm4gbGlzdFJlZi5nZXRTY3JvbGxhYmxlTm9kZSgpO1xuICAgIH1cbiAgfVxuXG4gIHNldE5hdGl2ZVByb3BzKHByb3BzOiBPYmplY3QpIHtcbiAgICBjb25zdCBsaXN0UmVmID0gdGhpcy5fd3JhcHBlckxpc3RSZWYgJiYgdGhpcy5fd3JhcHBlckxpc3RSZWYuZ2V0TGlzdFJlZigpO1xuICAgIGlmIChsaXN0UmVmKSB7XG4gICAgICBsaXN0UmVmLnNldE5hdGl2ZVByb3BzKHByb3BzKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgTGlzdCA9IHRoaXMucHJvcHMubGVnYWN5SW1wbGVtZW50YXRpb25cbiAgICAgID8gTWV0cm9MaXN0Vmlld1xuICAgICAgOiBWaXJ0dWFsaXplZFNlY3Rpb25MaXN0O1xuICAgIC8qICRGbG93Rml4TWUoPj0wLjY2LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuXG4gICAgICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjY2IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciBkZWxldGUgdGhpc1xuICAgICAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgIHJldHVybiA8TGlzdCB7Li4udGhpcy5wcm9wc30gcmVmPXt0aGlzLl9jYXB0dXJlUmVmfSAvPjtcbiAgfVxuXG4gIF93cmFwcGVyTGlzdFJlZjogTWV0cm9MaXN0VmlldyB8IFZpcnR1YWxpemVkU2VjdGlvbkxpc3Q8YW55PjtcbiAgX2NhcHR1cmVSZWYgPSByZWYgPT4ge1xuICAgIC8qICRGbG93Rml4TWUoPj0wLjUzLjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIscmVhY3RfbmF0aXZlX29zcykgVGhpcyBjb21tZW50XG4gICAgICogc3VwcHJlc3NlcyBhbiBlcnJvciB3aGVuIHVwZ3JhZGluZyBGbG93J3Mgc3VwcG9ydCBmb3IgUmVhY3QuIFRvIHNlZSB0aGVcbiAgICAgKiBlcnJvciBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICB0aGlzLl93cmFwcGVyTGlzdFJlZiA9IHJlZjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWN0aW9uTGlzdDtcbiJdfQ==