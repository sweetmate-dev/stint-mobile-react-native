d97197cc2cfd0397b6bfb03d5a1b9a1e









'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var PixelRatio = require('PixelRatio');
var ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');
var StyleSheetValidation = require('StyleSheetValidation');

var flatten = require('flattenStyle');





















































































































































var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
  hairlineWidth = 1 / PixelRatio.get();
}

var absoluteFill = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0 };

if (__DEV__) {
  Object.freeze(absoluteFill);
}













































module.exports = {



















  hairlineWidth: hairlineWidth,






  absoluteFill: absoluteFill,













  absoluteFillObject: absoluteFill,







  compose: function compose(
  style1,
  style2)
  {
    if (style1 != null && style2 != null) {
      return [style1, style2];
    } else {
      return style1 != null ? style1 : style2;
    }
  },








































  flatten: flatten,










  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(
  property,
  process)
  {
    var value = void 0;

    if (typeof ReactNativeStyleAttributes[property] === 'string') {
      value = {};
    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
      value = ReactNativeStyleAttributes[property];
    } else {
      console.error(property + ' is not a valid style attribute');
      return;
    }

    if (__DEV__ && typeof value.process === 'function') {
      console.warn('Overwriting ' + property + ' style attribute preprocessor');
    }

    ReactNativeStyleAttributes[property] = _extends({}, value, { process: process });
  },




  create: function create(obj) {



    if (__DEV__) {
      for (var _key in obj) {
        StyleSheetValidation.validateStyle(_key, obj);
        if (obj[_key]) {
          Object.freeze(obj[_key]);
        }
      }
    }
    return obj;
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,