ffa79645cb6724b12ea0de0f2f9cdb85


'use strict';
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }return target;
}function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
  }
}function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
}function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }return _assertThisInitialized(self);
}function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return self;
}function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);if (!base) return;var desc = Object.getOwnPropertyDescriptor(base, property);if (desc.get) {
        return desc.get.call(receiver);
      }return desc.value;
    };
  }return _get(target, property, receiver || target);
}function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);if (object === null) break;
  }return object;
}function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };return _getPrototypeOf(o);
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);
}function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;return o;
  };return _setPrototypeOf(o, p);
}var AnimatedStyle = function (_AnimatedWithChildren) {
  _inherits(AnimatedStyle, _AnimatedWithChildren);

  function AnimatedStyle(style) {
    var _this;_classCallCheck(this, AnimatedStyle);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedStyle).call(this));
    style = require('flattenStyle')(style) || {};
    if (style.transform) {
      style = _objectSpread({}, style, {
        transform: new (require('./AnimatedTransform'))(style.transform) });
    }
    _this._style = style;return _this;
  }_createClass(AnimatedStyle, [{ key: "_walkStyleAndGetValues", value: function _walkStyleAndGetValues(style) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof require('./AnimatedNode')) {
          if (!value.__isNative) {

            updatedStyle[key] = value.__getValue();
          }
        } else if (value && !Array.isArray(value) && typeof value === 'object') {

          updatedStyle[key] = this._walkStyleAndGetValues(value);
        } else {
          updatedStyle[key] = value;
        }
      }
      return updatedStyle;
    } }, { key: "__getValue", value: function __getValue() {
      return this._walkStyleAndGetValues(this._style);
    } }, { key: "_walkStyleAndGetAnimatedValues", value: function _walkStyleAndGetAnimatedValues(style) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof require('./AnimatedNode')) {
          updatedStyle[key] = value.__getAnimatedValue();
        } else if (value && !Array.isArray(value) && typeof value === 'object') {

          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
        }
      }
      return updatedStyle;
    } }, { key: "__getAnimatedValue", value: function __getAnimatedValue() {
      return this._walkStyleAndGetAnimatedValues(this._style);
    } }, { key: "__attach", value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof require('./AnimatedNode')) {
          value.__addChild(this);
        }
      }
    } }, { key: "__detach", value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof require('./AnimatedNode')) {
          value.__removeChild(this);
        }
      }
      _get(_getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
    } }, { key: "__makeNative", value: function __makeNative() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof require('./AnimatedNode')) {
          value.__makeNative();
        }
      }
      _get(_getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);
    } }, { key: "__getNativeConfig", value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof require('./AnimatedNode')) {
          styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
        }
      }
      require('../NativeAnimatedHelper').validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig };
    } }]);return AnimatedStyle;
}(require('./AnimatedWithChildren'));

module.exports = AnimatedStyle;