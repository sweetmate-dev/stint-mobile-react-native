{"version":3,"sources":["toolbar-android.js"],"names":["createToolbarAndroidComponent","IconNamePropType","getImageSource","updateIconSources","props","nextProps","keys","Object","IconToolbarAndroid","propTypes","stateToEvict","logoName","logo","undefined","navIconName","navIcon","overflowIconName","overflowIcon","state","length","setState","size","iconSize","color","iconColor","titleColor","then","Promise","all","actions","map","action","iconName","icon","resolve","PureComponent","PropTypes","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool","defaultProps"],"mappings":";;;;;;;AAOwBA,6B,CANxB,yC,iDACA,mC,2CACA,8B,6CACA,uC,qDACA,6C,q8BAEe,SAASA,6BAAT;AACbC,gBADa;AAEbC,cAFa;AAGb;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBuB;AACnB,aAAKC,iBAAL,CAAuB,KAAKC,KAA5B;AACD,OAzBH;;AA2B4BC,eA3B5B,EA2BuC;AACnC,YAAMC,OAAOC,OAAOD,IAAP,CAAYE,mBAAmBC,SAA/B,CAAb;AACA,YAAI,CAAC,uBAAQ,oBAAKJ,SAAL,EAAgBC,IAAhB,CAAR,EAA+B,oBAAK,KAAKF,KAAV,EAAiBE,IAAjB,CAA/B,CAAL,EAA6D;AAC3D,cAAMI,eAAe,EAArB;AACA,cAAI,CAACL,UAAUM,QAAf,EAAyB;AACvBD,yBAAaE,IAAb,GAAoBC,SAApB;AACD;AACD,cAAI,CAACR,UAAUS,WAAf,EAA4B;AAC1BJ,yBAAaK,OAAb,GAAuBF,SAAvB;AACD;AACD,cAAI,CAACR,UAAUW,gBAAf,EAAiC;AAC/BN,yBAAaO,YAAb,GAA4BJ,SAA5B;AACD;AACD,cAAI,KAAKK,KAAL,IAAcX,OAAOD,IAAP,CAAYI,YAAZ,EAA0BS,MAA5C,EAAoD;AAClD,iBAAKC,QAAL,CAAcV,YAAd,EAA4B,oBAAM,OAAKP,iBAAL,CAAuBE,SAAvB,CAAN,EAA5B;AACD,WAFD,MAEO;AACL,iBAAKF,iBAAL,CAAuBE,SAAvB;AACD;AACF;AACF,OA9CH;;AAgDoBD,WAhDpB,EAgD2B;AACvB,YAAMiB,OAAOjB,MAAMkB,QAAnB;AACA,YAAMC,QAAQnB,MAAMoB,SAAN,IAAmBpB,MAAMqB,UAAvC;AACA,YAAIrB,MAAMO,QAAV,EAAoB;AAClBT,yBAAeE,MAAMO,QAArB,EAA+BU,IAA/B,EAAqCE,KAArC,EAA4CG,IAA5C,CAAiD;AAC/C,qBAAKN,QAAL,CAAc,EAAER,UAAF,EAAd,CAD+C,GAAjD;;AAGD;AACD,YAAIR,MAAMU,WAAV,EAAuB;AACrBZ,yBAAeE,MAAMU,WAArB,EAAkCO,IAAlC,EAAwCE,KAAxC,EAA+CG,IAA/C,CAAoD;AAClD,qBAAKN,QAAL,CAAc,EAAEL,gBAAF,EAAd,CADkD,GAApD;;AAGD;AACD,YAAIX,MAAMY,gBAAV,EAA4B;AAC1Bd,yBAAeE,MAAMY,gBAArB,EAAuCK,IAAvC,EAA6CE,KAA7C,EAAoDG,IAApD,CAAyD;AACvD,qBAAKN,QAAL,CAAc,EAAEH,0BAAF,EAAd,CADuD,GAAzD;;AAGD;;AAEDU,gBAAQC,GAAR;AACE,SAACxB,MAAMyB,OAAN,IAAiB,EAAlB,EAAsBC,GAAtB,CAA0B,kBAAU;AAClC,cAAIC,OAAOC,QAAX,EAAqB;AACnB,mBAAO9B;AACL6B,mBAAOC,QADF;AAELD,mBAAOT,QAAP,IAAmBD,IAFd;AAGLU,mBAAOP,SAAP,IAAoBD,KAHf;AAILG,gBAJK,CAIA,qCAAcK,MAAd,IAAsBE,UAAtB,KAJA,CAAP;AAKD;AACD,iBAAON,QAAQO,OAAR,CAAgBH,MAAhB,CAAP;AACD,SATD,CADF;AAWEL,YAXF,CAWO,2BAAW,OAAKN,QAAL,CAAc,EAAES,gBAAF,EAAd,CAAX,EAXP;AAYD,OA/EH;;AAiFW;AACP,eAAO,8BAAC,2BAAD,eAAoB,KAAKzB,KAAzB,EAAoC,KAAKc,KAAzC,EAAP;AACD,OAnFH,iCAAwCiB,oBAAxC,UACS1B,SADT,GACqB,EACjBE,UAAUV,gBADO,EAEjBa,aAAab,gBAFI,EAGjBe,kBAAkBf,gBAHD,EAIjB4B,SAASO,oBAAUC,OAAV,CACPD,oBAAUE,KAAV,CAAgB,EACdC,OAAOH,oBAAUI,MAAV,CAAiBC,UADV,EAEdT,UAAU/B,gBAFI,EAGdqB,UAAUc,oBAAUM,MAHN,EAIdlB,WAAWY,oBAAUO,SAAV,CAAoB,CAACP,oBAAUI,MAAX,EAAmBJ,oBAAUM,MAA7B,CAApB,CAJG,EAKdE,MAAMR,oBAAUS,KAAV,CAAgB,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CAAhB,CALQ,EAMdC,cAAcV,oBAAUW,IANV,EAAhB,CADO,CAJQ,EAcjBzB,UAAUc,oBAAUM,MAdH,EAejBlB,WAAWY,oBAAUO,SAAV,CAAoB,CAACP,oBAAUI,MAAX,EAAmBJ,oBAAUM,MAA7B,CAApB,CAfM,EADrB,SAmBSM,YAnBT,GAmBwB,EACpB1B,UAAU,EADU,EAnBxB;;AAqFD","file":"toolbar-android.js","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    componentWillMount() {\n      this.updateIconSources(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const keys = Object.keys(IconToolbarAndroid.propTypes);\n      if (!isEqual(pick(nextProps, keys), pick(this.props, keys))) {\n        const stateToEvict = {};\n        if (!nextProps.logoName) {\n          stateToEvict.logo = undefined;\n        }\n        if (!nextProps.navIconName) {\n          stateToEvict.navIcon = undefined;\n        }\n        if (!nextProps.overflowIconName) {\n          stateToEvict.overflowIcon = undefined;\n        }\n        if (this.state && Object.keys(stateToEvict).length) {\n          this.setState(stateToEvict, () => this.updateIconSources(nextProps));\n        } else {\n          this.updateIconSources(nextProps);\n        }\n      }\n    }\n\n    updateIconSources(props) {\n      const size = props.iconSize;\n      const color = props.iconColor || props.titleColor;\n      if (props.logoName) {\n        getImageSource(props.logoName, size, color).then(logo =>\n          this.setState({ logo })\n        );\n      }\n      if (props.navIconName) {\n        getImageSource(props.navIconName, size, color).then(navIcon =>\n          this.setState({ navIcon })\n        );\n      }\n      if (props.overflowIconName) {\n        getImageSource(props.overflowIconName, size, color).then(overflowIcon =>\n          this.setState({ overflowIcon })\n        );\n      }\n\n      Promise.all(\n        (props.actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || size,\n              action.iconColor || color\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      ).then(actions => this.setState({ actions }));\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]}