f044aa5d56d560ff570666a7177c8921









'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React = require('React');
var View = require('View');
var VirtualizedList = require('VirtualizedList');

var invariant = require('fbjs/lib/invariant');var




















































































































VirtualizedSectionList = function (_React$PureComponent) {_inherits(VirtualizedSectionList, _React$PureComponent);_createClass(VirtualizedSectionList, [{ key: 'scrollToLocation', value: function scrollToLocation(








    params)




    {
      var index = params.itemIndex + 1;
      for (var ii = 0; ii < params.sectionIndex; ii++) {
        index += this.props.sections[ii].data.length + 2;
      }
      var toIndexParams = _extends({},
      params, {
        index: index });

      this._listRef.scrollToIndex(toIndexParams);
    } }, { key: 'getListRef', value: function getListRef()

    {
      return this._listRef;
    } }]);

  function VirtualizedSectionList(props, context) {_classCallCheck(this, VirtualizedSectionList);var _this = _possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this,
    props, context));_this.








































    _keyExtractor = function (item, index) {
      var info = _this._subExtractor(index);
      return info && info.key || String(index);
    };_this.




















































    _convertViewable = function (viewable) {
      invariant(viewable.index != null, 'Received a broken ViewToken');
      var info = _this._subExtractor(viewable.index);
      if (!info) {
        return null;
      }
      var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
      return _extends({},
      viewable, {
        index: info.index,



        key: keyExtractor(viewable.item, info.index),
        section: info.section });

    };_this.

    _onViewableItemsChanged = function (_ref)





    {var viewableItems = _ref.viewableItems,changed = _ref.changed;
      if (_this.props.onViewableItemsChanged) {
        _this.props.onViewableItemsChanged({
          viewableItems: viewableItems.
          map(_this._convertViewable, _this).
          filter(Boolean),
          changed: changed.map(_this._convertViewable, _this).filter(Boolean) });

      }
    };_this.

    _renderItem = function (_ref2) {var item = _ref2.item,index = _ref2.index;
      var info = _this._subExtractor(index);
      if (!info) {
        return null;
      }
      var infoIndex = info.index;
      if (infoIndex == null) {var
        _section = info.section;
        if (info.header === true) {var
          _renderSectionHeader = _this.props.renderSectionHeader;
          return _renderSectionHeader ? _renderSectionHeader({ section: _section }) : null;
        } else {var
          _renderSectionFooter = _this.props.renderSectionFooter;
          return _renderSectionFooter ? _renderSectionFooter({ section: _section }) : null;
        }
      } else {
        var _renderItem = info.section.renderItem || _this.props.renderItem;
        var _SeparatorComponent = _this._getSeparatorComponent(index, info);
        invariant(_renderItem, 'no renderItem!');
        return (
          React.createElement(ItemWithSeparator, {
            SeparatorComponent: _SeparatorComponent,
            LeadingSeparatorComponent:
            infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,

            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: _renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection }));


      }
    };_this.

    _onUpdateSeparator = function (key, newProps) {
      var ref = _this._cellRefs[key];
      ref && ref.updateSeparatorProps(newProps);
    };_this.























    _cellRefs = {};_this.

    _captureRef = function (ref) {



      _this._listRef = ref;
    };_this.state = _this._computeState(props);return _this;}_createClass(VirtualizedSectionList, [{ key: 'UNSAFE_componentWillReceiveProps', value: function UNSAFE_componentWillReceiveProps(nextProps) {this.setState(this._computeState(nextProps));} }, { key: '_computeState', value: function _computeState(props) {var offset = props.ListHeaderComponent ? 1 : 0;var stickyHeaderIndices = [];var itemCount = props.sections.reduce(function (v, section) {stickyHeaderIndices.push(v + offset);return v + section.data.length + 2;}, 0);return { childProps: _extends({}, props, { renderItem: this._renderItem, ItemSeparatorComponent: undefined, data: props.sections, getItemCount: function getItemCount() {return itemCount;}, getItem: getItem, keyExtractor: this._keyExtractor, onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined, stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined }) };} }, { key: 'render', value: function render() {return React.createElement(VirtualizedList, _extends({}, this.state.childProps, { ref: this._captureRef }));} }, { key: '_subExtractor', value: function _subExtractor(index) {var itemIndex = index;var defaultKeyExtractor = this.props.keyExtractor;for (var ii = 0; ii < this.props.sections.length; ii++) {var _section2 = this.props.sections[ii];var _key = _section2.key || String(ii);itemIndex -= 1;if (itemIndex >= _section2.data.length + 1) {itemIndex -= _section2.data.length + 1;} else if (itemIndex === -1) {return { section: _section2, key: _key + ':header', index: null, header: true, trailingSection: this.props.sections[ii + 1] };} else if (itemIndex === _section2.data.length) {return { section: _section2, key: _key + ':footer', index: null, header: false, trailingSection: this.props.sections[ii + 1] };} else {var _keyExtractor = _section2.keyExtractor || defaultKeyExtractor;return { section: _section2, key: _key + ':' + _keyExtractor(_section2.data[itemIndex], itemIndex), index: itemIndex, leadingItem: _section2.data[itemIndex - 1], leadingSection: this.props.sections[ii - 1], trailingItem: _section2.data[itemIndex + 1], trailingSection: this.props.sections[ii + 1] };}}} }, { key: '_getSeparatorComponent', value: function _getSeparatorComponent(index, info) {info = info || this._subExtractor(index);if (!info) {return null;}var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;var SectionSeparatorComponent = this.props.SectionSeparatorComponent;var isLastItemInList = index === this.state.childProps.getItemCount() - 1;var isLastItemInSection = info.index === info.section.data.length - 1;if (SectionSeparatorComponent && isLastItemInSection) {return SectionSeparatorComponent;}if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {return ItemSeparatorComponent;}return null;} }]);return VirtualizedSectionList;}(React.PureComponent);VirtualizedSectionList.defaultProps = _extends({}, VirtualizedList.defaultProps, { data: [] });var

































ItemWithSeparator = function (_React$Component) {_inherits(ItemWithSeparator, _React$Component);function ItemWithSeparator() {var _ref4;var _temp, _this2, _ret;_classCallCheck(this, ItemWithSeparator);for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {args[_key2] = arguments[_key2];}return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.



    state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this2.props.item,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.trailingItem,
        trailingSection: _this2.props.trailingSection },

      leadingSeparatorProps: {
        highlighted: false,
        leadingItem: _this2.props.leadingItem,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.item,
        trailingSection: _this2.props.trailingSection } }, _this2.



    _separators = {
      highlight: function highlight() {
        ['leading', 'trailing'].forEach(function (s) {return (
            _this2._separators.updateProps(s, { highlighted: true }));});

      },
      unhighlight: function unhighlight() {
        ['leading', 'trailing'].forEach(function (s) {return (
            _this2._separators.updateProps(s, { highlighted: false }));});

      },
      updateProps: function updateProps(select, newProps) {var _this2$props =
        _this2.props,LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,cellKey = _this2$props.cellKey,prevCellKey = _this2$props.prevCellKey;
        if (select === 'leading' && LeadingSeparatorComponent != null) {
          _this2.setState(function (state) {return {
              leadingSeparatorProps: _extends({}, state.leadingSeparatorProps, newProps) };});

        } else {
          _this2.props.onUpdateSeparator(
          select === 'leading' && prevCellKey || cellKey,
          newProps);

        }
      } }, _temp), _possibleConstructorReturn(_this2, _ret);}_createClass(ItemWithSeparator, [{ key: 'updateSeparatorProps', value: function updateSeparatorProps(


























    newProps) {
      this.setState(function (state) {return {
          separatorProps: _extends({}, state.separatorProps, newProps) };});

    } }, { key: 'render', value: function render()

    {var _props =






      this.props,LeadingSeparatorComponent = _props.LeadingSeparatorComponent,SeparatorComponent = _props.SeparatorComponent,item = _props.item,index = _props.index,section = _props.section;
      var element = this.props.renderItem({
        item: item,
        index: index,
        section: section,
        separators: this._separators });

      var leadingSeparator = LeadingSeparatorComponent &&
      React.createElement(LeadingSeparatorComponent, this.state.leadingSeparatorProps);

      var separator = SeparatorComponent &&
      React.createElement(SeparatorComponent, this.state.separatorProps);

      return leadingSeparator || separator ?
      React.createElement(View, null,
        leadingSeparator,
        element,
        separator) :


      element;

    } }], [{ key: 'getDerivedStateFromProps', value: function getDerivedStateFromProps(props, prevState) {return { separatorProps: _extends({}, prevState.separatorProps, { leadingItem: props.item, leadingSection: props.leadingSection, section: props.section, trailingItem: props.trailingItem, trailingSection: props.trailingSection }), leadingSeparatorProps: _extends({}, prevState.leadingSeparatorProps, { leadingItem: props.leadingItem, leadingSection: props.leadingSection, section: props.section, trailingItem: props.item, trailingSection: props.trailingSection }) };} }]);return ItemWithSeparator;}(React.Component);


function getItem(sections, index) {
  if (!sections) {
    return null;
  }
  var itemIdx = index - 1;
  for (var ii = 0; ii < sections.length; ii++) {
    if (itemIdx === -1 || itemIdx === sections[ii].data.length) {



      return sections[ii];
    } else if (itemIdx < sections[ii].data.length) {

      return sections[ii].data[itemIdx];
    } else {
      itemIdx -= sections[ii].data.length + 2;
    }
  }
  return null;
}

module.exports = VirtualizedSectionList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,