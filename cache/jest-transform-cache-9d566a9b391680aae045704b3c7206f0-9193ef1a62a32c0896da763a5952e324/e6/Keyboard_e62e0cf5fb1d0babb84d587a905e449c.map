{"version":3,"sources":["Keyboard.js"],"names":["LayoutAnimation","require","invariant","NativeEventEmitter","KeyboardObserver","dismissKeyboard","KeyboardEventEmitter","Keyboard","addListener","eventName","callback","removeListener","removeAllListeners","dismiss","scheduleLayoutAnimation","event","duration","easing","configureNext","update","type","Types","module","exports"],"mappings":";;;;;;;;;;AAUA;;AAEA,IAAMA,kBAAkBC,QAAQ,iBAAR,CAAxB;AACA,IAAMC,YAAYD,QAAQ,oBAAR,CAAlB;AACA,IAAME,qBAAqBF,QAAQ,oBAAR,CAA3B;AACA,IAAMG,mBAAmBH,QAAQ,eAAR,EAAyBG,gBAAlD;AACA,IAAMC,kBAAkBJ,QAAQ,iBAAR,CAAxB;AACA,IAAMK,uBAAuB,IAAIH,kBAAJ,CAAuBC,gBAAvB,CAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA,IAAIG,WAAW;;;;;;;;;;;;;;;;;;;;;;;;AAwBbC,aAxBa,uBAwBDC,SAxBC,EAwB6BC,QAxB7B,EAwB8D;AACzER,cAAU,KAAV,EAAiB,qCAAjB;AACD,GA1BY;;;;;;;;AAkCbS,gBAlCa,0BAkCEF,SAlCF,EAkCgCC,QAlChC,EAkCoD;AAC/DR,cAAU,KAAV,EAAiB,qCAAjB;AACD,GApCY;;;;;;;AA2CbU,oBA3Ca,8BA2CMH,SA3CN,EA2CoC;AAC/CP,cAAU,KAAV,EAAiB,qCAAjB;AACD,GA7CY;;;;;AAkDbW,SAlDa,qBAkDH;AACRX,cAAU,KAAV,EAAiB,qCAAjB;AACD,GApDY;;;;;;AA0DbY,yBA1Da,mCA0DWC,KA1DX,EA0DiC;AAC5Cb,cAAU,KAAV,EAAiB,qCAAjB;AACD,GA5DY,EAAf;;;;AAgEAK,WAAWD,oBAAX;AACAC,SAASM,OAAT,GAAmBR,eAAnB;AACAE,SAASO,uBAAT,GAAmC,UAASC,KAAT,EAA+B;AACzDC,UADyD,GACrCD,KADqC,CACzDC,QADyD,CAC/CC,MAD+C,GACrCF,KADqC,CAC/CE,MAD+C;AAEhE,MAAID,QAAJ,EAAc;AACZhB,oBAAgBkB,aAAhB,CAA8B;AAC5BF,gBAAUA,QADkB;AAE5BG,cAAQ;AACNH,kBAAUA,QADJ;AAENI,cAAOH,UAAUjB,gBAAgBqB,KAAhB,CAAsBJ,MAAtB,CAAX,IAA6C,UAF7C,EAFoB,EAA9B;;;AAOD;AACF,CAXD;;AAaAK,OAAOC,OAAP,GAAiBhB,QAAjB","file":"Keyboard.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst LayoutAnimation = require('LayoutAnimation');\nconst invariant = require('fbjs/lib/invariant');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst KeyboardObserver = require('NativeModules').KeyboardObserver;\nconst dismissKeyboard = require('dismissKeyboard');\nconst KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);\n\ntype KeyboardEventName =\n  | 'keyboardWillShow'\n  | 'keyboardDidShow'\n  | 'keyboardWillHide'\n  | 'keyboardDidHide'\n  | 'keyboardWillChangeFrame'\n  | 'keyboardDidChangeFrame';\n\ntype ScreenRect = $ReadOnly<{|\n  screenX: number,\n  screenY: number,\n  width: number,\n  height: number,\n|}>;\n\nexport type KeyboardEvent = $ReadOnly<{|\n  duration?: number,\n  easing?: string,\n  endCoordinates: ScreenRect,\n  startCoordinates?: ScreenRect,\n|}>;\n\ntype KeyboardEventListener = (e: KeyboardEvent) => void;\n\n// The following object exists for documentation purposes\n// Actual work happens in\n// https://github.com/facebook/react-native/blob/master/Libraries/EventEmitter/NativeEventEmitter.js\n\n/**\n * `Keyboard` module to control keyboard events.\n *\n * ### Usage\n *\n * The Keyboard module allows you to listen for native events and react to them, as\n * well as make changes to the keyboard, like dismissing it.\n *\n *```\n * import React, { Component } from 'react';\n * import { Keyboard, TextInput } from 'react-native';\n *\n * class Example extends Component {\n *   componentWillMount () {\n *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);\n *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);\n *   }\n *\n *   componentWillUnmount () {\n *     this.keyboardDidShowListener.remove();\n *     this.keyboardDidHideListener.remove();\n *   }\n *\n *   _keyboardDidShow () {\n *     alert('Keyboard Shown');\n *   }\n *\n *   _keyboardDidHide () {\n *     alert('Keyboard Hidden');\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         onSubmitEditing={Keyboard.dismiss}\n *       />\n *     );\n *   }\n * }\n *```\n */\n\nlet Keyboard = {\n  /**\n   * The `addListener` function connects a JavaScript function to an identified native\n   * keyboard notification event.\n   *\n   * This function then returns the reference to the listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This\n   *can be any of the following:\n   *\n   * - `keyboardWillShow`\n   * - `keyboardDidShow`\n   * - `keyboardWillHide`\n   * - `keyboardDidHide`\n   * - `keyboardWillChangeFrame`\n   * - `keyboardDidChangeFrame`\n   *\n   * Note that if you set `android:windowSoftInputMode` to `adjustResize`  or `adjustNothing`,\n   * only `keyboardDidShow` and `keyboardDidHide` events will be available on Android.\n   * `keyboardWillShow` as well as `keyboardWillHide` are generally not available on Android\n   * since there is no native corresponding event.\n   *\n   * @param {function} callback function to be called when the event fires.\n   */\n  addListener(eventName: KeyboardEventName, callback: KeyboardEventListener) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Removes a specific listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.\n   * @param {function} callback function to be called when the event fires.\n   */\n  removeListener(eventName: KeyboardEventName, callback: Function) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Removes all listeners for a specific event type.\n   *\n   * @param {string} eventType The native event string listeners are watching which will be removed.\n   */\n  removeAllListeners(eventName: KeyboardEventName) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Dismisses the active keyboard and removes focus.\n   */\n  dismiss() {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Useful for syncing TextInput (or other keyboard accessory view) size of\n   * position changes with keyboard movements.\n   */\n  scheduleLayoutAnimation(event: KeyboardEvent) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n};\n\n// Throw away the dummy object and reassign it to original module\nKeyboard = KeyboardEventEmitter;\nKeyboard.dismiss = dismissKeyboard;\nKeyboard.scheduleLayoutAnimation = function(event: KeyboardEvent) {\n  const {duration, easing} = event;\n  if (duration) {\n    LayoutAnimation.configureNext({\n      duration: duration,\n      update: {\n        duration: duration,\n        type: (easing && LayoutAnimation.Types[easing]) || 'keyboard',\n      },\n    });\n  }\n};\n\nmodule.exports = Keyboard;\n"]}