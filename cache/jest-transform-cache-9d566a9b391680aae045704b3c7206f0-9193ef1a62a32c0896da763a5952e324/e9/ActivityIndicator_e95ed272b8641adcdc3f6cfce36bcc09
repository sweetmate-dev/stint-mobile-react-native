b97e89c3f0e01e97f24e481c72f6e86e










'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

var Platform = require('Platform');
var React = require('React');
var StyleSheet = require('StyleSheet');
var View = require('View');

var requireNativeComponent = require('requireNativeComponent');




var RCTActivityIndicator =
Platform.OS === 'android' ?
require('ProgressBarAndroid') :
requireNativeComponent('RCTActivityIndicatorView');

var GRAY = '#999999';











































var ActivityIndicator = function ActivityIndicator(
props,
forwardedRef)
{var
  onLayout = props.onLayout,style = props.style,restProps = _objectWithoutProperties(props, ['onLayout', 'style']);
  var sizeStyle = void 0;

  switch (props.size) {
    case 'small':
      sizeStyle = styles.sizeSmall;
      break;
    case 'large':
      sizeStyle = styles.sizeLarge;
      break;
    default:
      sizeStyle = { height: props.size, width: props.size };
      break;}


  var nativeProps = _extends({},
  restProps, {
    ref: forwardedRef,
    style: sizeStyle,
    styleAttr: 'Normal',
    indeterminate: true });


  return (
    React.createElement(View, {
        onLayout: onLayout,
        style: StyleSheet.compose(
        styles.container,
        style) },



      React.createElement(RCTActivityIndicator, nativeProps)));


};


var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);

ActivityIndicatorWithRef.defaultProps = {
  animating: true,
  color: Platform.OS === 'ios' ? GRAY : null,
  hidesWhenStopped: true,
  size: 'small' };


var styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center' },

  sizeSmall: {
    width: 20,
    height: 20 },

  sizeLarge: {
    width: 36,
    height: 36 } });



module.exports = ActivityIndicatorWithRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFjdGl2aXR5SW5kaWNhdG9yLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlJlYWN0IiwiU3R5bGVTaGVldCIsIlZpZXciLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiUkNUQWN0aXZpdHlJbmRpY2F0b3IiLCJPUyIsIkdSQVkiLCJBY3Rpdml0eUluZGljYXRvciIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwib25MYXlvdXQiLCJzdHlsZSIsInJlc3RQcm9wcyIsInNpemVTdHlsZSIsInNpemUiLCJzdHlsZXMiLCJzaXplU21hbGwiLCJzaXplTGFyZ2UiLCJoZWlnaHQiLCJ3aWR0aCIsIm5hdGl2ZVByb3BzIiwicmVmIiwic3R5bGVBdHRyIiwiaW5kZXRlcm1pbmF0ZSIsImNvbXBvc2UiLCJjb250YWluZXIiLCJBY3Rpdml0eUluZGljYXRvcldpdGhSZWYiLCJmb3J3YXJkUmVmIiwiZGVmYXVsdFByb3BzIiwiYW5pbWF0aW5nIiwiY29sb3IiLCJoaWRlc1doZW5TdG9wcGVkIiwiY3JlYXRlIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVVBLGE7O0FBRUEsSUFBTUEsV0FBV0MsUUFBUSxVQUFSLENBQWpCO0FBQ0EsSUFBTUMsUUFBUUQsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNRSxhQUFhRixRQUFRLFlBQVIsQ0FBbkI7QUFDQSxJQUFNRyxPQUFPSCxRQUFRLE1BQVIsQ0FBYjs7QUFFQSxJQUFNSSx5QkFBeUJKLFFBQVEsd0JBQVIsQ0FBL0I7Ozs7O0FBS0EsSUFBTUs7QUFDSk4sU0FBU08sRUFBVCxLQUFnQixTQUFoQjtBQUNJTixRQUFRLG9CQUFSLENBREo7QUFFSUksdUJBQXVCLDBCQUF2QixDQUhOOztBQUtBLElBQU1HLE9BQU8sU0FBYjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Q0EsSUFBTUMsb0JBQW9CLFNBQXBCQSxpQkFBb0I7QUFDeEJDLEtBRHdCO0FBRXhCQyxZQUZ3QjtBQUdyQjtBQUNJQyxVQURKLEdBQ3FDRixLQURyQyxDQUNJRSxRQURKLENBQ2NDLEtBRGQsR0FDcUNILEtBRHJDLENBQ2NHLEtBRGQsQ0FDd0JDLFNBRHhCLDRCQUNxQ0osS0FEckM7QUFFSCxNQUFJSyxrQkFBSjs7QUFFQSxVQUFRTCxNQUFNTSxJQUFkO0FBQ0UsU0FBSyxPQUFMO0FBQ0VELGtCQUFZRSxPQUFPQyxTQUFuQjtBQUNBO0FBQ0YsU0FBSyxPQUFMO0FBQ0VILGtCQUFZRSxPQUFPRSxTQUFuQjtBQUNBO0FBQ0Y7QUFDRUosa0JBQVksRUFBQ0ssUUFBUVYsTUFBTU0sSUFBZixFQUFxQkssT0FBT1gsTUFBTU0sSUFBbEMsRUFBWjtBQUNBLFlBVEo7OztBQVlBLE1BQU1NO0FBQ0RSLFdBREM7QUFFSlMsU0FBS1osWUFGRDtBQUdKRSxXQUFPRSxTQUhIO0FBSUpTLGVBQVcsUUFKUDtBQUtKQyxtQkFBZSxJQUxYLEdBQU47OztBQVFBO0FBQ0Usd0JBQUMsSUFBRDtBQUNFLGtCQUFVYixRQURaO0FBRUUsZUFBT1QsV0FBV3VCLE9BQVg7QUFDTFQsZUFBT1UsU0FERjtBQUVMZCxhQUZLLENBRlQ7Ozs7QUFRRSwwQkFBQyxvQkFBRCxFQUEwQlMsV0FBMUIsQ0FSRixDQURGOzs7QUFZRCxDQXZDRDs7O0FBMENBLElBQU1NLDJCQUEyQjFCLE1BQU0yQixVQUFOLENBQWlCcEIsaUJBQWpCLENBQWpDOztBQUVBbUIseUJBQXlCRSxZQUF6QixHQUF3QztBQUN0Q0MsYUFBVyxJQUQyQjtBQUV0Q0MsU0FBT2hDLFNBQVNPLEVBQVQsS0FBZ0IsS0FBaEIsR0FBd0JDLElBQXhCLEdBQStCLElBRkE7QUFHdEN5QixvQkFBa0IsSUFIb0I7QUFJdENqQixRQUFNLE9BSmdDLEVBQXhDOzs7QUFPQSxJQUFNQyxTQUFTZCxXQUFXK0IsTUFBWCxDQUFrQjtBQUMvQlAsYUFBVztBQUNUUSxnQkFBWSxRQURIO0FBRVRDLG9CQUFnQixRQUZQLEVBRG9COztBQUsvQmxCLGFBQVc7QUFDVEcsV0FBTyxFQURFO0FBRVRELFlBQVEsRUFGQyxFQUxvQjs7QUFTL0JELGFBQVc7QUFDVEUsV0FBTyxFQURFO0FBRVRELFlBQVEsRUFGQyxFQVRvQixFQUFsQixDQUFmOzs7O0FBZUFpQixPQUFPQyxPQUFQLEdBQWtCVix3QkFBbEIiLCJmaWxlIjoiQWN0aXZpdHlJbmRpY2F0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJ1BsYXRmb3JtJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ1JlYWN0Jyk7XG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnU3R5bGVTaGVldCcpO1xuY29uc3QgVmlldyA9IHJlcXVpcmUoJ1ZpZXcnKTtcblxuY29uc3QgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoJ3JlcXVpcmVOYXRpdmVDb21wb25lbnQnKTtcblxuaW1wb3J0IHR5cGUge05hdGl2ZUNvbXBvbmVudH0gZnJvbSAnUmVhY3ROYXRpdmUnO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnVmlld1Byb3BUeXBlcyc7XG5cbmNvbnN0IFJDVEFjdGl2aXR5SW5kaWNhdG9yID1cbiAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJ1xuICAgID8gcmVxdWlyZSgnUHJvZ3Jlc3NCYXJBbmRyb2lkJylcbiAgICA6IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoJ1JDVEFjdGl2aXR5SW5kaWNhdG9yVmlldycpO1xuXG5jb25zdCBHUkFZID0gJyM5OTk5OTknO1xuXG50eXBlIEluZGljYXRvclNpemUgPSBudW1iZXIgfCAnc21hbGwnIHwgJ2xhcmdlJztcblxudHlwZSBJT1NQcm9wcyA9ICRSZWFkT25seTx7fFxuICAvKipcbiAgICogV2hldGhlciB0aGUgaW5kaWNhdG9yIHNob3VsZCBoaWRlIHdoZW4gbm90IGFuaW1hdGluZyAodHJ1ZSBieSBkZWZhdWx0KS5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvYWN0aXZpdHlpbmRpY2F0b3IuaHRtbCNoaWRlc3doZW5zdG9wcGVkXG4gICAqL1xuICBoaWRlc1doZW5TdG9wcGVkPzogP2Jvb2xlYW4sXG58fT47XG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC4uLlZpZXdQcm9wcyxcbiAgLi4uSU9TUHJvcHMsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgaW5kaWNhdG9yICh0cnVlLCB0aGUgZGVmYXVsdCkgb3IgaGlkZSBpdCAoZmFsc2UpLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy9hY3Rpdml0eWluZGljYXRvci5odG1sI2FuaW1hdGluZ1xuICAgKi9cbiAgYW5pbWF0aW5nPzogP2Jvb2xlYW4sXG5cbiAgLyoqXG4gICAqIFRoZSBmb3JlZ3JvdW5kIGNvbG9yIG9mIHRoZSBzcGlubmVyIChkZWZhdWx0IGlzIGdyYXkpLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy9hY3Rpdml0eWluZGljYXRvci5odG1sI2NvbG9yXG4gICAqL1xuICBjb2xvcj86ID9zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGluZGljYXRvciAoZGVmYXVsdCBpcyAnc21hbGwnKS5cbiAgICogUGFzc2luZyBhIG51bWJlciB0byB0aGUgc2l6ZSBwcm9wIGlzIG9ubHkgc3VwcG9ydGVkIG9uIEFuZHJvaWQuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL2FjdGl2aXR5aW5kaWNhdG9yLmh0bWwjc2l6ZVxuICAgKi9cbiAgc2l6ZT86ID9JbmRpY2F0b3JTaXplLFxufH0+O1xuXG4vKipcbiAqIERpc3BsYXlzIGEgY2lyY3VsYXIgbG9hZGluZyBpbmRpY2F0b3IuXG4gKlxuICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvYWN0aXZpdHlpbmRpY2F0b3IuaHRtbFxuICovXG5jb25zdCBBY3Rpdml0eUluZGljYXRvciA9IChcbiAgcHJvcHM6IFByb3BzLFxuICBmb3J3YXJkZWRSZWY/OiA/UmVhY3QuUmVmPCdSQ1RBY3Rpdml0eUluZGljYXRvclZpZXcnPixcbikgPT4ge1xuICBjb25zdCB7b25MYXlvdXQsIHN0eWxlLCAuLi5yZXN0UHJvcHN9ID0gcHJvcHM7XG4gIGxldCBzaXplU3R5bGU7XG5cbiAgc3dpdGNoIChwcm9wcy5zaXplKSB7XG4gICAgY2FzZSAnc21hbGwnOlxuICAgICAgc2l6ZVN0eWxlID0gc3R5bGVzLnNpemVTbWFsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xhcmdlJzpcbiAgICAgIHNpemVTdHlsZSA9IHN0eWxlcy5zaXplTGFyZ2U7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc2l6ZVN0eWxlID0ge2hlaWdodDogcHJvcHMuc2l6ZSwgd2lkdGg6IHByb3BzLnNpemV9O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBjb25zdCBuYXRpdmVQcm9wcyA9IHtcbiAgICAuLi5yZXN0UHJvcHMsXG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgc3R5bGU6IHNpemVTdHlsZSxcbiAgICBzdHlsZUF0dHI6ICdOb3JtYWwnLFxuICAgIGluZGV0ZXJtaW5hdGU6IHRydWUsXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld1xuICAgICAgb25MYXlvdXQ9e29uTGF5b3V0fVxuICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY29tcG9zZShcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgc3R5bGUsXG4gICAgICApfT5cbiAgICAgIHsvKiAkRmxvd0ZpeE1lKD49MC43OC4wIHNpdGU9cmVhY3RfbmF0aXZlX2FuZHJvaWRfZmIpIFRoaXMgaXNzdWUgd2FzXG4gICAgICAgICogZm91bmQgd2hlbiBtYWtpbmcgRmxvdyBjaGVjayAuYW5kcm9pZC5qcyBmaWxlcy4gKi99XG4gICAgICA8UkNUQWN0aXZpdHlJbmRpY2F0b3Igey4uLm5hdGl2ZVByb3BzfSAvPlxuICAgIDwvVmlldz5cbiAgKTtcbn07XG5cbi8vICRGbG93Rml4TWUgLSBUT0RPIFQyOTE1NjcyMSBgUmVhY3QuZm9yd2FyZFJlZmAgaXMgbm90IGRlZmluZWQgaW4gRmxvdywgeWV0LlxuY29uc3QgQWN0aXZpdHlJbmRpY2F0b3JXaXRoUmVmID0gUmVhY3QuZm9yd2FyZFJlZihBY3Rpdml0eUluZGljYXRvcik7XG5cbkFjdGl2aXR5SW5kaWNhdG9yV2l0aFJlZi5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuaW1hdGluZzogdHJ1ZSxcbiAgY29sb3I6IFBsYXRmb3JtLk9TID09PSAnaW9zJyA/IEdSQVkgOiBudWxsLFxuICBoaWRlc1doZW5TdG9wcGVkOiB0cnVlLFxuICBzaXplOiAnc21hbGwnLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIH0sXG4gIHNpemVTbWFsbDoge1xuICAgIHdpZHRoOiAyMCxcbiAgICBoZWlnaHQ6IDIwLFxuICB9LFxuICBzaXplTGFyZ2U6IHtcbiAgICB3aWR0aDogMzYsXG4gICAgaGVpZ2h0OiAzNixcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChBY3Rpdml0eUluZGljYXRvcldpdGhSZWY6IENsYXNzPE5hdGl2ZUNvbXBvbmVudDxQcm9wcz4+KTtcbiJdfQ==