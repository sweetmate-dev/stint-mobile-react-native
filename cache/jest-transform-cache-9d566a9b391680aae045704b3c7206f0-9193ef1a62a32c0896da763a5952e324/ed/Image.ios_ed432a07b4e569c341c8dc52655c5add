23954f1f44c4320d394e742855dffb3b









'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var ImageProps = require('ImageProps');
var NativeModules = require('NativeModules');
var React = require('React');
var ReactNative = require('ReactNative');
var StyleSheet = require('StyleSheet');

var flattenStyle = require('flattenStyle');
var requireNativeComponent = require('requireNativeComponent');
var resolveAssetSource = require('resolveAssetSource');

var ImageViewManager = NativeModules.ImageViewManager;

var RCTImageView = requireNativeComponent('RCTImageView');



function getSize(
uri,
success,
failure)
{
  ImageViewManager.getSize(
  uri,
  success,
  failure ||
  function () {
    console.warn('Failed to get size for image: ' + uri);
  });

}

function prefetch(url) {
  return ImageViewManager.prefetchImage(url);
}

















var Image = function Image(
props,
forwardedRef)
{
  var source = resolveAssetSource(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined };


  var sources = void 0;
  var style = void 0;
  if (Array.isArray(source)) {
    style = flattenStyle([styles.base, props.style]) || {};
    sources = source;
  } else {var
    _width = source.width,_height = source.height,uri = source.uri;
    style = flattenStyle([{ width: _width, height: _height }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn(
    'The <Image> component requires a `source` property rather than `src`.');

  }

  if (props.children != null) {
    throw new Error(
    'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');

  }

  return (
    React.createElement(RCTImageView, _extends({},
    props, {
      ref: forwardedRef,
      style: style,
      resizeMode: resizeMode,
      tintColor: tintColor,
      source: sources })));


};


Image = React.forwardRef(Image);






Image.getSize = getSize;







Image.prefetch = prefetch;






Image.resolveAssetSource = resolveAssetSource;

Image.propTypes = ImageProps;

var styles = StyleSheet.create({
  base: {
    overflow: 'hidden' } });



module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,