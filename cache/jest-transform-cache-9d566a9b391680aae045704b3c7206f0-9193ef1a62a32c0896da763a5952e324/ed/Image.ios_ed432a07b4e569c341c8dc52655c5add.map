{"version":3,"sources":["Image.ios.js"],"names":["ImageProps","require","NativeModules","React","ReactNative","StyleSheet","flattenStyle","requireNativeComponent","resolveAssetSource","ImageViewManager","RCTImageView","getSize","uri","success","failure","console","warn","prefetch","url","prefetchImage","Image","props","forwardedRef","source","undefined","width","height","sources","style","Array","isArray","styles","base","resizeMode","tintColor","src","children","Error","forwardRef","propTypes","create","overflow","module","exports"],"mappings":";;;;;;;;;AASA,a;;AAEA,IAAMA,aAAaC,QAAQ,YAAR,CAAnB;AACA,IAAMC,gBAAgBD,QAAQ,eAAR,CAAtB;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,IAAMG,cAAcH,QAAQ,aAAR,CAApB;AACA,IAAMI,aAAaJ,QAAQ,YAAR,CAAnB;;AAEA,IAAMK,eAAeL,QAAQ,cAAR,CAArB;AACA,IAAMM,yBAAyBN,QAAQ,wBAAR,CAA/B;AACA,IAAMO,qBAAqBP,QAAQ,oBAAR,CAA3B;;AAEA,IAAMQ,mBAAmBP,cAAcO,gBAAvC;;AAEA,IAAMC,eAAeH,uBAAuB,cAAvB,CAArB;;;;AAIA,SAASI,OAAT;AACEC,GADF;AAEEC,OAFF;AAGEC,OAHF;AAIE;AACAL,mBAAiBE,OAAjB;AACEC,KADF;AAEEC,SAFF;AAGEC;AACE,cAAW;AACTC,YAAQC,IAAR,CAAa,mCAAmCJ,GAAhD;AACD,GANL;;AAQD;;AAED,SAASK,QAAT,CAAkBC,GAAlB,EAA+B;AAC7B,SAAOT,iBAAiBU,aAAjB,CAA+BD,GAA/B,CAAP;AACD;;;;;;;;;;;;;;;;;;AAkBD,IAAIE,QAAQ;AACVC,KADU;AAEVC,YAFU;AAGP;AACH,MAAMC,SAASf,mBAAmBa,MAAME,MAAzB,KAAoC;AACjDX,SAAKY,SAD4C;AAEjDC,WAAOD,SAF0C;AAGjDE,YAAQF,SAHyC,EAAnD;;;AAMA,MAAIG,gBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,MAAMC,OAAN,CAAcP,MAAd,CAAJ,EAA2B;AACzBK,YAAQtB,aAAa,CAACyB,OAAOC,IAAR,EAAcX,MAAMO,KAApB,CAAb,KAA4C,EAApD;AACAD,cAAUJ,MAAV;AACD,GAHD,MAGO;AACEE,UADF,GACwBF,MADxB,CACEE,KADF,CACSC,OADT,GACwBH,MADxB,CACSG,MADT,CACiBd,GADjB,GACwBW,MADxB,CACiBX,GADjB;AAELgB,YAAQtB,aAAa,CAAC,EAACmB,aAAD,EAAQC,eAAR,EAAD,EAAkBK,OAAOC,IAAzB,EAA+BX,MAAMO,KAArC,CAAb,KAA6D,EAArE;AACAD,cAAU,CAACJ,MAAD,CAAV;;AAEA,QAAIX,QAAQ,EAAZ,EAAgB;AACdG,cAAQC,IAAR,CAAa,0CAAb;AACD;AACF;;AAED,MAAMiB,aAAaZ,MAAMY,UAAN,IAAoBL,MAAMK,UAA1B,IAAwC,OAA3D;AACA,MAAMC,YAAYN,MAAMM,SAAxB;;AAEA,MAAIb,MAAMc,GAAN,IAAa,IAAjB,EAAuB;AACrBpB,YAAQC,IAAR;AACE,2EADF;;AAGD;;AAED,MAAIK,MAAMe,QAAN,IAAkB,IAAtB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ;AACJ,+KADI,CAAN;;AAGD;;AAED;AACE,wBAAC,YAAD;AACMhB,SADN;AAEE,WAAKC,YAFP;AAGE,aAAOM,KAHT;AAIE,kBAAYK,UAJd;AAKE,iBAAWC,SALb;AAME,cAAQP,OANV,IADF;;;AAUD,CAlDD;;;AAqDAP,QAAQjB,MAAMmC,UAAN,CAAiBlB,KAAjB,CAAR;;;;;;;AAOAA,MAAMT,OAAN,GAAgBA,OAAhB;;;;;;;;AAQAS,MAAMH,QAAN,GAAiBA,QAAjB;;;;;;;AAOAG,MAAMZ,kBAAN,GAA2BA,kBAA3B;;AAEAY,MAAMmB,SAAN,GAAkBvC,UAAlB;;AAEA,IAAM+B,SAAS1B,WAAWmC,MAAX,CAAkB;AAC/BR,QAAM;AACJS,cAAU,QADN,EADyB,EAAlB,CAAf;;;;AAMAC,OAAOC,OAAP,GAAkBvB,KAAlB","file":"Image.ios.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ImageProps = require('ImageProps');\nconst NativeModules = require('NativeModules');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\n\nconst flattenStyle = require('flattenStyle');\nconst requireNativeComponent = require('requireNativeComponent');\nconst resolveAssetSource = require('resolveAssetSource');\n\nconst ImageViewManager = NativeModules.ImageViewManager;\n\nconst RCTImageView = requireNativeComponent('RCTImageView');\n\nimport type {ImageProps as ImagePropsType} from 'ImageProps';\n\nfunction getSize(\n  uri: string,\n  success: (width: number, height: number) => void,\n  failure?: (error: any) => void,\n) {\n  ImageViewManager.getSize(\n    uri,\n    success,\n    failure ||\n      function() {\n        console.warn('Failed to get size for image: ' + uri);\n      },\n  );\n}\n\nfunction prefetch(url: string) {\n  return ImageViewManager.prefetchImage(url);\n}\n\ndeclare class ImageComponentType extends ReactNative.NativeComponent<\n  ImagePropsType,\n> {\n  static getSize: typeof getSize;\n  static prefetch: typeof prefetch;\n  static resolveAssetSource: typeof resolveAssetSource;\n  static propTypes: typeof ImageProps;\n}\n\n/**\n * A React component for displaying different types of images,\n * including network images, static resources, temporary local images, and\n * images from local disk, such as the camera roll.\n *\n * See https://facebook.github.io/react-native/docs/image.html\n */\nlet Image = (\n  props: ImagePropsType,\n  forwardedRef: ?React.Ref<'RCTImageView'>,\n) => {\n  const source = resolveAssetSource(props.source) || {\n    uri: undefined,\n    width: undefined,\n    height: undefined,\n  };\n\n  let sources;\n  let style;\n  if (Array.isArray(source)) {\n    style = flattenStyle([styles.base, props.style]) || {};\n    sources = source;\n  } else {\n    const {width, height, uri} = source;\n    style = flattenStyle([{width, height}, styles.base, props.style]) || {};\n    sources = [source];\n\n    if (uri === '') {\n      console.warn('source.uri should not be an empty string');\n    }\n  }\n\n  const resizeMode = props.resizeMode || style.resizeMode || 'cover';\n  const tintColor = style.tintColor;\n\n  if (props.src != null) {\n    console.warn(\n      'The <Image> component requires a `source` property rather than `src`.',\n    );\n  }\n\n  if (props.children != null) {\n    throw new Error(\n      'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.',\n    );\n  }\n\n  return (\n    <RCTImageView\n      {...props}\n      ref={forwardedRef}\n      style={style}\n      resizeMode={resizeMode}\n      tintColor={tintColor}\n      source={sources}\n    />\n  );\n};\n\n// $FlowFixMe - TODO T29156721 `React.forwardRef` is not defined in Flow, yet.\nImage = React.forwardRef(Image);\n\n/**\n * Retrieve the width and height (in pixels) of an image prior to displaying it.\n *\n * See https://facebook.github.io/react-native/docs/image.html#getsize\n */\nImage.getSize = getSize;\n\n/**\n * Prefetches a remote image for later use by downloading it to the disk\n * cache.\n *\n * See https://facebook.github.io/react-native/docs/image.html#prefetch\n */\nImage.prefetch = prefetch;\n\n/**\n * Resolves an asset reference into an object.\n *\n * See https://facebook.github.io/react-native/docs/image.html#resolveassetsource\n */\nImage.resolveAssetSource = resolveAssetSource;\n\nImage.propTypes = ImageProps;\n\nconst styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n});\n\nmodule.exports = (Image: Class<ImageComponentType>);\n"]}