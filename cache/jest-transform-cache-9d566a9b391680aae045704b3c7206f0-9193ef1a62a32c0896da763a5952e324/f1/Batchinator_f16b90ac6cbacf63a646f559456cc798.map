{"version":3,"sources":["Batchinator.js"],"names":["InteractionManager","require","Batchinator","callback","delayMS","_delay","_callback","options","abort","_taskHandle","cancel","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout","module","exports"],"mappings":";;;;;;;;;;AAUA,a;;AAEA,IAAMA,qBAAqBC,QAAQ,oBAAR,CAA3B,C;;;;;;;;;;;;;;;;;;;;;;;;AAwBMC,W;;;;AAIJ,uBAAYC,QAAZ,EAAkCC,OAAlC,EAAmD;AACjD,SAAKC,MAAL,GAAcD,OAAd;AACA,SAAKE,SAAL,GAAiBH,QAAjB;AACD,G;;;;;;;AAOmD,SAA5CI,OAA4C,uEAAhB,EAACC,OAAO,KAAR,EAAgB;AAClD,UAAI,KAAKC,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBC,MAAjB;AACA,YAAI,CAACH,QAAQC,KAAb,EAAoB;AAClB,eAAKF,SAAL;AACD;AACD,aAAKG,WAAL,GAAmB,IAAnB;AACD;AACF,K;AACU;AACT,UAAI,KAAKA,WAAT,EAAsB;AACpB;AACD;AACD,UAAME,gBAAgBC,WAAW,YAAM;AACrC,cAAKH,WAAL,GAAmBT,mBAAmBa,oBAAnB,CAAwC,YAAM;;;AAG/D,gBAAKJ,WAAL,GAAmB,IAAnB;AACA,gBAAKH,SAAL;AACD,SALkB,CAAnB;AAMD,OAPqB,EAOnB,KAAKD,MAPc,CAAtB;AAQA,WAAKI,WAAL,GAAmB,EAACC,QAAQ,0BAAMI,aAAaH,aAAb,CAAN,EAAT,EAAnB;AACD,K;;;AAGHI,OAAOC,OAAP,GAAiBd,WAAjB","file":"Batchinator.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst InteractionManager = require('InteractionManager');\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nclass Batchinator {\n  _callback: () => void;\n  _delay: number;\n  _taskHandle: ?{cancel: () => void};\n  constructor(callback: () => void, delayMS: number) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n  dispose(options: {abort: boolean} = {abort: false}) {\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  }\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n    const timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {cancel: () => clearTimeout(timeoutHandle)};\n  }\n}\n\nmodule.exports = Batchinator;\n"]}