9d2eceafd790c9cba8175c880783674a










'use strict';






var exceptionID = 0;
function reportException(e, isFatal) {var _require =
  require('NativeModules'),ExceptionsManager = _require.ExceptionsManager;
  if (ExceptionsManager) {
    var parseErrorStack = require('parseErrorStack');
    var stack = parseErrorStack(e);
    var currentExceptionID = ++exceptionID;
    if (isFatal) {
      ExceptionsManager.reportFatalException(
      e.message,
      stack,
      currentExceptionID);

    } else {
      ExceptionsManager.reportSoftException(
      e.message,
      stack,
      currentExceptionID);

    }
    if (__DEV__) {
      var symbolicateStackTrace = require('symbolicateStackTrace');
      symbolicateStackTrace(stack).
      then(function (prettyStack) {
        if (prettyStack) {
          ExceptionsManager.updateExceptionMessage(
          e.message,
          prettyStack,
          currentExceptionID);

        } else {
          throw new Error('The stack is null');
        }
      }).
      catch(function (error) {return (
          console.warn('Unable to symbolicate stack trace: ' + error.message));});

    }
  }
}









function handleException(e, isFatal) {




  if (!e.message) {
    e = new Error(e);
  }
  if (console._errorOriginal) {
    console._errorOriginal(e.message);
  } else {
    console.error(e.message);
  }
  reportException(e, isFatal);
}

function reactConsoleErrorHandler() {
  console._errorOriginal.apply(console, arguments);
  if (!console.reportErrorsAsExceptions) {
    return;
  }

  if (arguments[0] && arguments[0].stack) {
    reportException(arguments[0], false);
  } else {
    var stringifySafe = require('stringifySafe');
    var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');
    if (str.slice(0, 10) === '"Warning: ') {



      return;
    }
    var error = new Error('console.error: ' + str);
    error.framesToPop = 1;
    reportException(error, false);
  }
}





function installConsoleErrorReporter() {

  if (console._errorOriginal) {
    return;
  }

  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {


    console.reportErrorsAsExceptions = true;
  }
}

module.exports = { handleException: handleException, installConsoleErrorReporter: installConsoleErrorReporter };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV4Y2VwdGlvbnNNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImV4Y2VwdGlvbklEIiwicmVwb3J0RXhjZXB0aW9uIiwiZSIsImlzRmF0YWwiLCJyZXF1aXJlIiwiRXhjZXB0aW9uc01hbmFnZXIiLCJwYXJzZUVycm9yU3RhY2siLCJzdGFjayIsImN1cnJlbnRFeGNlcHRpb25JRCIsInJlcG9ydEZhdGFsRXhjZXB0aW9uIiwibWVzc2FnZSIsInJlcG9ydFNvZnRFeGNlcHRpb24iLCJfX0RFVl9fIiwic3ltYm9saWNhdGVTdGFja1RyYWNlIiwidGhlbiIsInByZXR0eVN0YWNrIiwidXBkYXRlRXhjZXB0aW9uTWVzc2FnZSIsIkVycm9yIiwiY2F0Y2giLCJjb25zb2xlIiwid2FybiIsImVycm9yIiwiaGFuZGxlRXhjZXB0aW9uIiwiX2Vycm9yT3JpZ2luYWwiLCJyZWFjdENvbnNvbGVFcnJvckhhbmRsZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlcG9ydEVycm9yc0FzRXhjZXB0aW9ucyIsInN0cmluZ2lmeVNhZmUiLCJzdHIiLCJBcnJheSIsInByb3RvdHlwZSIsIm1hcCIsImNhbGwiLCJqb2luIiwic2xpY2UiLCJmcmFtZXNUb1BvcCIsImluc3RhbGxDb25zb2xlRXJyb3JSZXBvcnRlciIsImJpbmQiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7QUFPQSxJQUFJQSxjQUFjLENBQWxCO0FBQ0EsU0FBU0MsZUFBVCxDQUF5QkMsQ0FBekIsRUFBMkNDLE9BQTNDLEVBQTZEO0FBQy9CQyxVQUFRLGVBQVIsQ0FEK0IsQ0FDcERDLGlCQURvRCxZQUNwREEsaUJBRG9EO0FBRTNELE1BQUlBLGlCQUFKLEVBQXVCO0FBQ3JCLFFBQU1DLGtCQUFrQkYsUUFBUSxpQkFBUixDQUF4QjtBQUNBLFFBQU1HLFFBQVFELGdCQUFnQkosQ0FBaEIsQ0FBZDtBQUNBLFFBQU1NLHFCQUFxQixFQUFFUixXQUE3QjtBQUNBLFFBQUlHLE9BQUosRUFBYTtBQUNYRSx3QkFBa0JJLG9CQUFsQjtBQUNFUCxRQUFFUSxPQURKO0FBRUVILFdBRkY7QUFHRUMsd0JBSEY7O0FBS0QsS0FORCxNQU1PO0FBQ0xILHdCQUFrQk0sbUJBQWxCO0FBQ0VULFFBQUVRLE9BREo7QUFFRUgsV0FGRjtBQUdFQyx3QkFIRjs7QUFLRDtBQUNELFFBQUlJLE9BQUosRUFBYTtBQUNYLFVBQU1DLHdCQUF3QlQsUUFBUSx1QkFBUixDQUE5QjtBQUNBUyw0QkFBc0JOLEtBQXRCO0FBQ0dPLFVBREgsQ0FDUSx1QkFBZTtBQUNuQixZQUFJQyxXQUFKLEVBQWlCO0FBQ2ZWLDRCQUFrQlcsc0JBQWxCO0FBQ0VkLFlBQUVRLE9BREo7QUFFRUsscUJBRkY7QUFHRVAsNEJBSEY7O0FBS0QsU0FORCxNQU1PO0FBQ0wsZ0JBQU0sSUFBSVMsS0FBSixDQUFVLG1CQUFWLENBQU47QUFDRDtBQUNGLE9BWEg7QUFZR0MsV0FaSCxDQVlTO0FBQ0xDLGtCQUFRQyxJQUFSLENBQWEsd0NBQXdDQyxNQUFNWCxPQUEzRCxDQURLLEdBWlQ7O0FBZUQ7QUFDRjtBQUNGOzs7Ozs7Ozs7O0FBVUQsU0FBU1ksZUFBVCxDQUF5QnBCLENBQXpCLEVBQW1DQyxPQUFuQyxFQUFxRDs7Ozs7QUFLbkQsTUFBSSxDQUFDRCxFQUFFUSxPQUFQLEVBQWdCO0FBQ2RSLFFBQUksSUFBSWUsS0FBSixDQUFVZixDQUFWLENBQUo7QUFDRDtBQUNELE1BQUlpQixRQUFRSSxjQUFaLEVBQTRCO0FBQzFCSixZQUFRSSxjQUFSLENBQXVCckIsRUFBRVEsT0FBekI7QUFDRCxHQUZELE1BRU87QUFDTFMsWUFBUUUsS0FBUixDQUFjbkIsRUFBRVEsT0FBaEI7QUFDRDtBQUNEVCxrQkFBZ0JDLENBQWhCLEVBQW1CQyxPQUFuQjtBQUNEOztBQUVELFNBQVNxQix3QkFBVCxHQUFvQztBQUNsQ0wsVUFBUUksY0FBUixDQUF1QkUsS0FBdkIsQ0FBNkJOLE9BQTdCLEVBQXNDTyxTQUF0QztBQUNBLE1BQUksQ0FBQ1AsUUFBUVEsd0JBQWIsRUFBdUM7QUFDckM7QUFDRDs7QUFFRCxNQUFJRCxVQUFVLENBQVYsS0FBZ0JBLFVBQVUsQ0FBVixFQUFhbkIsS0FBakMsRUFBd0M7QUFDdENOLG9CQUFnQnlCLFVBQVUsQ0FBVixDQUFoQixFQUE0QyxLQUE1QztBQUNELEdBRkQsTUFFTztBQUNMLFFBQU1FLGdCQUFnQnhCLFFBQVEsZUFBUixDQUF0QjtBQUNBLFFBQU15QixNQUFNQyxNQUFNQyxTQUFOLENBQWdCQyxHQUFoQixDQUFvQkMsSUFBcEIsQ0FBeUJQLFNBQXpCLEVBQW9DRSxhQUFwQyxFQUFtRE0sSUFBbkQsQ0FBd0QsSUFBeEQsQ0FBWjtBQUNBLFFBQUlMLElBQUlNLEtBQUosQ0FBVSxDQUFWLEVBQWEsRUFBYixNQUFxQixZQUF6QixFQUF1Qzs7OztBQUlyQztBQUNEO0FBQ0QsUUFBTWQsUUFBdUIsSUFBSUosS0FBSixDQUFVLG9CQUFvQlksR0FBOUIsQ0FBN0I7QUFDQVIsVUFBTWUsV0FBTixHQUFvQixDQUFwQjtBQUNBbkMsb0JBQWdCb0IsS0FBaEIsRUFBcUMsS0FBckM7QUFDRDtBQUNGOzs7Ozs7QUFNRCxTQUFTZ0IsMkJBQVQsR0FBdUM7O0FBRXJDLE1BQUlsQixRQUFRSSxjQUFaLEVBQTRCO0FBQzFCO0FBQ0Q7O0FBRURKLFVBQVFJLGNBQVIsR0FBeUJKLFFBQVFFLEtBQVIsQ0FBY2lCLElBQWQsQ0FBbUJuQixPQUFuQixDQUF6QjtBQUNBQSxVQUFRRSxLQUFSLEdBQWdCRyx3QkFBaEI7QUFDQSxNQUFJTCxRQUFRUSx3QkFBUixLQUFxQ1ksU0FBekMsRUFBb0Q7OztBQUdsRHBCLFlBQVFRLHdCQUFSLEdBQW1DLElBQW5DO0FBQ0Q7QUFDRjs7QUFFRGEsT0FBT0MsT0FBUCxHQUFpQixFQUFDbkIsZ0NBQUQsRUFBa0JlLHdEQUFsQixFQUFqQiIsImZpbGUiOiJFeGNlcHRpb25zTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtFeHRlbmRlZEVycm9yfSBmcm9tICdwYXJzZUVycm9yU3RhY2snO1xuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGRldmVsb3Blci12aXNpYmxlIGFzcGVjdCBvZiBlcnJvcnMgYW5kIGV4Y2VwdGlvbnNcbiAqL1xubGV0IGV4Y2VwdGlvbklEID0gMDtcbmZ1bmN0aW9uIHJlcG9ydEV4Y2VwdGlvbihlOiBFeHRlbmRlZEVycm9yLCBpc0ZhdGFsOiBib29sZWFuKSB7XG4gIGNvbnN0IHtFeGNlcHRpb25zTWFuYWdlcn0gPSByZXF1aXJlKCdOYXRpdmVNb2R1bGVzJyk7XG4gIGlmIChFeGNlcHRpb25zTWFuYWdlcikge1xuICAgIGNvbnN0IHBhcnNlRXJyb3JTdGFjayA9IHJlcXVpcmUoJ3BhcnNlRXJyb3JTdGFjaycpO1xuICAgIGNvbnN0IHN0YWNrID0gcGFyc2VFcnJvclN0YWNrKGUpO1xuICAgIGNvbnN0IGN1cnJlbnRFeGNlcHRpb25JRCA9ICsrZXhjZXB0aW9uSUQ7XG4gICAgaWYgKGlzRmF0YWwpIHtcbiAgICAgIEV4Y2VwdGlvbnNNYW5hZ2VyLnJlcG9ydEZhdGFsRXhjZXB0aW9uKFxuICAgICAgICBlLm1lc3NhZ2UsXG4gICAgICAgIHN0YWNrLFxuICAgICAgICBjdXJyZW50RXhjZXB0aW9uSUQsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBFeGNlcHRpb25zTWFuYWdlci5yZXBvcnRTb2Z0RXhjZXB0aW9uKFxuICAgICAgICBlLm1lc3NhZ2UsXG4gICAgICAgIHN0YWNrLFxuICAgICAgICBjdXJyZW50RXhjZXB0aW9uSUQsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY29uc3Qgc3ltYm9saWNhdGVTdGFja1RyYWNlID0gcmVxdWlyZSgnc3ltYm9saWNhdGVTdGFja1RyYWNlJyk7XG4gICAgICBzeW1ib2xpY2F0ZVN0YWNrVHJhY2Uoc3RhY2spXG4gICAgICAgIC50aGVuKHByZXR0eVN0YWNrID0+IHtcbiAgICAgICAgICBpZiAocHJldHR5U3RhY2spIHtcbiAgICAgICAgICAgIEV4Y2VwdGlvbnNNYW5hZ2VyLnVwZGF0ZUV4Y2VwdGlvbk1lc3NhZ2UoXG4gICAgICAgICAgICAgIGUubWVzc2FnZSxcbiAgICAgICAgICAgICAgcHJldHR5U3RhY2ssXG4gICAgICAgICAgICAgIGN1cnJlbnRFeGNlcHRpb25JRCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN0YWNrIGlzIG51bGwnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PlxuICAgICAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIHN5bWJvbGljYXRlIHN0YWNrIHRyYWNlOiAnICsgZXJyb3IubWVzc2FnZSksXG4gICAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmRlY2xhcmUgdmFyIGNvbnNvbGU6IHR5cGVvZiBjb25zb2xlICYge1xuICBfZXJyb3JPcmlnaW5hbDogRnVuY3Rpb24sXG4gIHJlcG9ydEVycm9yc0FzRXhjZXB0aW9uczogYm9vbGVhbixcbn07XG5cbi8qKlxuICogTG9ncyBleGNlcHRpb25zIHRvIHRoZSAobmF0aXZlKSBjb25zb2xlIGFuZCBkaXNwbGF5cyB0aGVtXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUV4Y2VwdGlvbihlOiBFcnJvciwgaXNGYXRhbDogYm9vbGVhbikge1xuICAvLyBXb3JrYXJvdW5kIGZvciByZXBvcnRpbmcgZXJyb3JzIGNhdXNlZCBieSBgdGhyb3cgJ3NvbWUgc3RyaW5nJ2BcbiAgLy8gVW5mb3J0dW5hdGVseSB0aGVyZSBpcyBubyB3YXkgdG8gZmlndXJlIG91dCB0aGUgc3RhY2t0cmFjZSBpbiB0aGlzXG4gIC8vIGNhc2UsIHNvIGlmIHlvdSBlbmRlZCB1cCBoZXJlIHRyeWluZyB0byB0cmFjZSBhbiBlcnJvciwgbG9vayBmb3JcbiAgLy8gYHRocm93ICc8ZXJyb3IgbWVzc2FnZT4nYCBzb21ld2hlcmUgaW4geW91ciBjb2RlYmFzZS5cbiAgaWYgKCFlLm1lc3NhZ2UpIHtcbiAgICBlID0gbmV3IEVycm9yKGUpO1xuICB9XG4gIGlmIChjb25zb2xlLl9lcnJvck9yaWdpbmFsKSB7XG4gICAgY29uc29sZS5fZXJyb3JPcmlnaW5hbChlLm1lc3NhZ2UpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcbiAgfVxuICByZXBvcnRFeGNlcHRpb24oZSwgaXNGYXRhbCk7XG59XG5cbmZ1bmN0aW9uIHJlYWN0Q29uc29sZUVycm9ySGFuZGxlcigpIHtcbiAgY29uc29sZS5fZXJyb3JPcmlnaW5hbC5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICBpZiAoIWNvbnNvbGUucmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50c1swXSAmJiBhcmd1bWVudHNbMF0uc3RhY2spIHtcbiAgICByZXBvcnRFeGNlcHRpb24oYXJndW1lbnRzWzBdLCAvKiBpc0ZhdGFsICovIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdHJpbmdpZnlTYWZlID0gcmVxdWlyZSgnc3RyaW5naWZ5U2FmZScpO1xuICAgIGNvbnN0IHN0ciA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChhcmd1bWVudHMsIHN0cmluZ2lmeVNhZmUpLmpvaW4oJywgJyk7XG4gICAgaWYgKHN0ci5zbGljZSgwLCAxMCkgPT09ICdcIldhcm5pbmc6ICcpIHtcbiAgICAgIC8vIFJlYWN0IHdhcm5pbmdzIHVzZSBjb25zb2xlLmVycm9yIHNvIHRoYXQgYSBzdGFjayB0cmFjZSBpcyBzaG93biwgYnV0XG4gICAgICAvLyB3ZSBkb24ndCAoY3VycmVudGx5KSB3YW50IHRoZXNlIHRvIHNob3cgYSByZWRib3hcbiAgICAgIC8vIChOb3RlOiBMb2dpYyBkdXBsaWNhdGVkIGluIHBvbHlmaWxscy9jb25zb2xlLmpzLilcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZXJyb3I6IEV4dGVuZGVkRXJyb3IgPSBuZXcgRXJyb3IoJ2NvbnNvbGUuZXJyb3I6ICcgKyBzdHIpO1xuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTtcbiAgICByZXBvcnRFeGNlcHRpb24oZXJyb3IsIC8qIGlzRmF0YWwgKi8gZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICogU2hvd3MgYSByZWRib3ggd2l0aCBzdGFja3RyYWNlIGZvciBhbGwgY29uc29sZS5lcnJvciBtZXNzYWdlcy4gIERpc2FibGUgYnlcbiAqIHNldHRpbmcgYGNvbnNvbGUucmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zID0gZmFsc2U7YCBpbiB5b3VyIGFwcC5cbiAqL1xuZnVuY3Rpb24gaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyKCkge1xuICAvLyBFbmFibGUgcmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zXG4gIGlmIChjb25zb2xlLl9lcnJvck9yaWdpbmFsKSB7XG4gICAgcmV0dXJuOyAvLyBhbHJlYWR5IGluc3RhbGxlZFxuICB9XG4gIC8vIEZsb3cgZG9lc24ndCBsaWtlIGl0IHdoZW4geW91IHNldCBhcmJpdHJhcnkgdmFsdWVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICBjb25zb2xlLl9lcnJvck9yaWdpbmFsID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuICBjb25zb2xlLmVycm9yID0gcmVhY3RDb25zb2xlRXJyb3JIYW5kbGVyO1xuICBpZiAoY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEluZGl2aWR1YWwgYXBwcyBjYW4gZGlzYWJsZSB0aGlzXG4gICAgLy8gRmxvdyBkb2Vzbid0IGxpa2UgaXQgd2hlbiB5b3Ugc2V0IGFyYml0cmFyeSB2YWx1ZXMgb24gYSBnbG9iYWwgb2JqZWN0XG4gICAgY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMgPSB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge2hhbmRsZUV4Y2VwdGlvbiwgaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyfTtcbiJdfQ==