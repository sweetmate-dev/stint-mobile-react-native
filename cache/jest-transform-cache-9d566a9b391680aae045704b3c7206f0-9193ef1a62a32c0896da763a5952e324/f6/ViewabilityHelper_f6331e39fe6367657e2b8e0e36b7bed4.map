{"version":3,"sources":["ViewabilityHelper.js"],"names":["invariant","require","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"mappings":"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","file":"ViewabilityHelper.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an error\n   * found when Flow v0.63 was deployed. To see the error delete this comment\n   * and run Flow. */\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    invariant(\n      last < itemCount,\n      'Invalid render range ' + JSON.stringify({renderRange, itemCount}),\n    );\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): void {\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !getFrameMetrics(0)\n    ) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"]}